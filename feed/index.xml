<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/</link>
	<description>Mes cours et supports pédagogiques pour l&#039;enseignement de l&#039;ingénierie informatique.</description>
	<lastBuildDate>Sat, 04 Sep 2021 16:36:29 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<item>
		<title>01. Vue: practical activity, part n°1</title>
		<link>https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 04 Sep 2021 16:36:06 +0000</pubDate>
				<category><![CDATA[03. VueJS]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=3243</guid>

					<description><![CDATA[<p>Learning outcomes Understand how Vue CLI is related to other well-known tools (webpack, babel&#8230;). Practise the Vue&#8217;s essentials (basic components, templates, scoped styles&#8230;). Properly split the source in various files and folders. Implement some routing capabilities. Expected result At the end of the tutorial series, you got a lightweight SPA client for exploring mails and &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/" class="more-link">Continuer la lecture de <span class="screen-reader-text">01. Vue: practical activity, part n°1</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/">01. Vue: practical activity, part n°1</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Understand how Vue CLI is related to other well-known tools (webpack, babel&#8230;).</li><li>Practise the Vue&rsquo;s essentials (basic components, templates, scoped styles&#8230;).</li><li>Properly split the source in various files and folders.</li><li>Implement some routing capabilities.</li></ul>



<h4>Expected result</h4>



<p>At the end of the tutorial series, you got a lightweight SPA client for exploring mails and contacts from the Outlook product, through the Microsoft Graph API. This SPA targets both computers and phones, requiring responsive capabilities and appreciating resilience to network issues.</p>



<p>The first tutorial of the Vue&rsquo;s series focuses on setting up the project, understanding tools behind the Vue CLI (those discussed in last tutorial) and preparing routes for the OAuth2 authorisation flow.</p>



<h4>Prepare your development environment</h4>



<p>In a general manner, your productivity and code quality are affected by used tools. Personally:</p>



<ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer noopener">vscode</a> as my primary code editor, especially suitable for JavaScript development.</li><li><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur" target="_blank" rel="noreferrer noopener">Vetur</a> is a vscode extension enabling syntax and language servers for <code>.vue</code> files.</li><li><a href="https://devtools.vuejs.org/" target="_blank" rel="noreferrer noopener">vue-devtools</a> extends browser&rsquo;s debugging capabilities (beta channel for Vue3).</li><li><a href="https://cli.vuejs.org/" target="_blank" rel="noreferrer noopener">Vue CLI</a> for managed vue projects (from project creation to distribution).</li><li>npm, node, typescript and the rest of well-known JS tools&#8230;</li></ul>



<h4>About the use of git with Moodle delivery</h4>



<p>The Vue CLI automatically initiates a local git repository unless you explicitly refuse it. After each question, I strongly recommend you commit your work with a meaningful message. This provides at least 2 immediate benefits:</p>



<ul><li>You can discard any change to your project since the last commit (for example, the last completed question). So, in the case you went in the wrong direction for a particular question, you can rollback to last clean state. This makes you confident while refactoring or deleting code.</li><li>As a teacher, I can « time travel » inside your code and see how it was at the end of some question.</li></ul>



<p>Because of the graded nature of the tutorial, you cannot push your code on a public repository. On another side, sharing with me access to your private Github repository is a time consuming and error-prone.</p>



<p>Instead, you will just upload the zip archive through the Moodle « assignment activity ». <span class="has-inline-color has-medium-pink-color">While building your zip, be sure to include the <code>.git</code> folder</span>. To be safe, just compress the parent folder and check the output archive.</p>



<h4>Vue project setup</h4>



<p class="question"><strong>Question 1</strong>: That is the main difference between local installation and global installation of packages with npm? What kind of packages do you generally install locally? What kind is generally installed globally?</p>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># example of command to install the vue cli locally</span>
npm install @vue/cli

<span class="hljs-comment"># example of command to install the vue cli globally</span>
npm install -g @vue/cli</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>According to the <a href="https://cli.vuejs.org/guide/installation.html" target="_blank" rel="noreferrer noopener">docs</a>, the global installation is best suitable for Vue CLI.</p>



<p class="exercice"><strong>Exercise 1</strong>: Create a new Vue project (called <code>vue-oauth-microsoft-graph</code>). Opt for the Vue3 recipe that relies on webpack and babel for the build chain.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> The Vue CLI as already committed the newly generated project.</p>



<p class="question"><strong>Question 2</strong>: Webpack is internally used by the Vue CLI. Why is it required to deal with both multiples JavaScript files and special extensions like <code>.vue</code>?</p>



<p>Babel is configured by default with <code>@vue/cli-plugin-babel/preset</code>, as specified in <code>babel.config.js</code>. By reading the package&rsquo;s documentation, you see it uses the <code>browserslist</code> configuration defined in <code>package.json</code>.</p>



<p class="question"><strong>Question 3</strong>: What is the role of babel and how <code>browserslist</code> may configure its output?</p>



<p class="question"><strong>Question 4</strong>: What is eslint and which set of rules are currently applied?</p>



<p><strong>Tips</strong>: additionally to the previous tools installed by Vue CLI, you can enable static type checking in your project. See the appendix at the end of the tutorial. Of course, it is optional.</p>



<p class="exercice"><strong>Exercise 2</strong>: Run <code>npm run serve</code> and open the app in your browser. Remember that npm looks at the <code>package.json</code> file (specially the <code>scripts</code> object) to find which command to execute.</p>



<p>Did you notice that <code>npm run serve</code> launches a program called  <code>vue-cli-service</code>? This is a cli locally installed by npm inside the <code>node_modules</code> folder. This dependency is dedicated to development experience, so it is a <code>devDependencies</code> in your <code>package.json</code>.</p>



<p class="exercice"><strong>Exercise 3:</strong> The newly generated project contains a few placeholders. Cleanup your project so it does not contain neither useless assets, nor the hello world.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 3: remove vue CLI placeholders »</p>



<p>By default, only the <code>src/components</code> folder is intended for storing <code>.vue</code> files (aka. vue components). But we are free to use other directories depending on the nature of each component. Let&rsquo;s add <code>src/pages</code> to our code base.</p>



<ul><li><code>src/pages</code> contains top level components that produce a particular page (ex. the home page, the index of mails page, the contact page&#8230;). Those components are intended to be mounted with vue-router.</li><li><code>src/components</code> contains shared components required by pages or other components (ex. navigation headers, buttons, user&rsquo;s cards, short preview of an email&#8230;).</li></ul>



<p class="exercice"><strong>Exercise 4</strong>: Create the HomePage component inside the right folder. Do not spend too much time on the template content, as it could be a simple sentence. Import it inside <code>App.vue</code> and eventually cleanup any dead code (code not reachable anymore, for example a component no more imported).</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 4: create HomePage component »</p>



<h4>Base layout</h4>



<p><i class="fas fa-exclamation-circle" style="color: #d32f2f; margin-right: 0.5em"></i> While my original intent was using Vuetify to not spent unnecessary time styling component, Vuetify for Vue 3 is still under active development. Sorry! 😇</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="435" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/image-1024x435.png" alt="" class="wp-image-3378" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/09/image-1024x435.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/09/image-300x128.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/09/image-768x327.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/09/image.png 1296w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>Basic possible visual at the end of the next exercise and its components tree.</figcaption></figure>



<p><strong>Tips</strong>: If you wish to use <a href="https://fontawesome.com/" target="_blank" rel="noreferrer noopener">font awesome</a> icons with Vue 3, <a href="https://stackoverflow.com/questions/66389974/using-font-awesome-in-vue-3" target="_blank" rel="noreferrer noopener">take a look at this thread</a>.</p>



<p class="exercice"><strong>Exercise 5</strong>: Let&rsquo;s begin with the root component, formally <code>App</code> (in <code>src/App.vue</code>). Replace its template with the following content and create missing components. Add some content to the header (ex. fake home link, fake user name&#8230;) and legal credits to the footer. Eventually, polish the looks and feels with scoped CSS.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-comment">&lt;!-- file src/App.vue --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">base-header</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">HomePage</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">base-footer</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 5: create BaseHeader and BaseFooter »</p>



<p class="exercice"><strong>Exercise 6</strong>: In order to keep the root component <code>App</code> as simple as possible, create a <code>BaseLayout</code> component. Using the <a href="https://v3.vuejs.org/guide/component-slots.html#slot-content" target="_blank" rel="noreferrer noopener">slot API</a>,  allow <code>BaseLayout</code> to receive children.</p>



<p><strong>Tips</strong>: If you integrated font awesome, try extracting most logic out of <code>App</code>. When it comes to configure third party dependencies, I generally work with ES-modules inside a <code>src/lib</code> folder. Example: <code>src/lib/fontAwesome.js</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-comment">&lt;!-- file src/App.vue --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">base-header</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">home-page</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">base-footer</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 6: create BaseLayout that uses slot API »</p>



<h4>Add routing capabilities</h4>



<p class="exercice"><strong>Exercise 7</strong>: Install vue-router v4+ according to <a href="https://next.router.vuejs.org/installation.html" target="_blank" rel="noreferrer noopener">official documentation</a>. Make sure to pick the version compatible with Vue3, so vue-router v4 or higher.</p>



<p class="exercice"><strong>Exercise 8</strong>: Using the <a href="https://next.router.vuejs.org/guide/" target="_blank" rel="noreferrer noopener">Getting Started</a> guide, create 2 routes (<code>/</code> that loads <code>HomePage</code> and <code>/oauth2/callback</code> that loads <code>Oauth2CallbackPage</code>). You also have to create the missing page component. Define the router in its own module (ex. <code>src/lib/router.js</code>).</p>



<p><strong>Tips</strong>: for the previous question, you need:</p>



<ul><li>to add <code>src/lib/router.js</code> and export a router built with <code>createRouter()</code>.</li><li>to import the router in <code>src/main.js</code> and call <code>x.use(router)</code> somewhere&#8230;</li><li>to use <code>&lt;router-view /&gt;</code> instead of <code>&lt;home-page /&gt;</code> somewhere&#8230;</li><li>to create another component for the second page.</li></ul>



<p><strong>Tips</strong>: I experienced issues with the default export of <code>vue-router</code>. See above:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> router = VueRouter.createRouter(<span class="hljs-comment">/** ... */</span>) <span class="hljs-comment">// VueRouter is undefined</span>

<span class="hljs-keyword">import</span> { createRouter } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> router = createRouter(<span class="hljs-comment">/** ... */</span>) <span class="hljs-comment">// works fine</span></code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 8: add and set up vue-router »</p>



<p class="question"><strong>Question 5</strong>: Why should you now use <code>&lt;router-link to="/"&gt;Home&lt;/router-link&gt;</code> instead of <code>&lt;a href="/"&gt;Home&lt;/a&gt;</code>?</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="786" height="564" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/Peek-04-09-2021-17-31.gif" alt="" class="wp-image-3441"/><figcaption>The routing is operational, including header navigation.</figcaption></figure>



<h4>To continue&#8230;</h4>



<p>Next time, let&rsquo;s connect some third party API through Oauth2. The user identity will be retrieved from it. Additionally, you will fetch data from Outlook through that API.</p>



<p class="has-text-align-center">***</p>



<h4>Appendix: about static type checking</h4>



<p>In the previous tutorial, I introduced you static type checking with straightforward JavaScript and JSDoc. Badly, the <code>tsc</code> command does not handle <code>.vue</code> files. Despite the fact that it is partially working,  it does not worth the vue&rsquo;s typescript integration.</p>



<p>A more robust approach would be moving the whole project to <code>typescript</code>. With the Vue CLI, it is just running <code>vue add typescript</code> at the beginning of the journey. Be sure every change is committed, since this command override some files without warning.</p>



<p>Migrating to TypeScript at the beginning of the tutorial is not a big deal. Most types are already built in the Vue module. Eventually, the whole project is checked on serve and on build.</p>



<p>Since TypeScript may save your time, catch bugs and give you bonus grade to the project, why not giving it a try?</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/">01. Vue: practical activity, part n°1</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Project</title>
		<link>https://thomas-veillard.fr/front-end-web-development/project/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Mon, 23 Aug 2021 17:59:03 +0000</pubDate>
				<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=3194</guid>

					<description><![CDATA[<p>Topic Build a web application to book, rent or buy something of your choice, like: A train ticket office. Using public API, it may find routes between 2 train stations at some date and time. Then, the customer can book required tickets. A product shop. The application displays the catalogue, allows both sorting and filtering &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/project/" class="more-link">Continuer la lecture de <span class="screen-reader-text">Project</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/project/">Project</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Topic</h4>



<p>Build a web application to book, rent or buy something of your choice, like:</p>



<ul><li><strong>A train ticket office</strong>. Using public API, it may find routes between 2 train stations at some date and time. Then, the customer can book required tickets.</li><li><strong>A product shop</strong>. The application displays the catalogue, allows both sorting and filtering by various criteria. Each product has a dedicated presentation. Additionally, the customer may fill a cart and provide its delivery address.</li><li><strong>A clearing booking app</strong>. Allows customers to find available cleaners near their home at some date and time. Then, the customer picks a proposal, fills its address&#8230;</li><li><strong>A VPS builder</strong>. The customer builds its own VPS instance by selecting some amount of RAM, disk, CPU, IO bandwidth, additional volumes&#8230; The final configuration should be valid (ex. disallow too much RAM if not enough v-core, etc.).</li></ul>



<h4>The rules</h4>



<ul><li>Can be done alone or in groups of 2 students.</li><li>Use Vue.js, Angular or React. You are free to use any library you want.</li><li>Use <a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noreferrer noopener">this</a> git workflow model (at least master and develop branches).</li><li>I will check who commits, and when.</li><li>Document installation steps in README.md.</li><li>Produce a short demo video of your application in action.</li><li>Use API over HTTP (a public API, a mock server or your own backend).</li><li>Build various views (pages, modals&#8230;). At least 5 busy pages.</li><li>Setup various routes using HTML History API (ex. <code>/products/:productId</code>).</li></ul>



<h4>README.md</h4>



<p>I will follow steps in your README to build and run your project. For simple front-end projects, it could be really short: (ex. git clone, npm install&#8230;).</p>



<p>But if you implemented a backend or have special requirements, they must be explicit. If setup is complex, please provide an install script (targeting Ubuntu).</p>



<h4>Delivery (for groups G3, G4 and G5)</h4>



<p>Your git repository is your delivery. Just share read-only access with me if the repository is private (my Github username is <code>TruffeCendree</code>). 2 deliveries are planned:</p>



<ul><li><strong>At least one week before any in-class session</strong>, you can submit your work-in-progress for a ungraduated optional review. The number of projects I can review in a short time is of course limited, so please do not wait the last session.</li><li><strong>On Sunday, October 31 at 23h59 </strong>for a final review. Code to be graded must be on your master branch.</li></ul>



<h4>Graduation</h4>



<figure class="wp-block-table is-style-stripes"><table><tbody><tr><td><strong>Criteria</strong></td><td><strong>Points</strong></td></tr><tr><td>Git and workflow</td><td>2 points</td></tr><tr><td>User experience (UX), user interface (UI)<br><em>Graded by reviewing your demonstration video.</em></td><td>5 points</td></tr><tr><td>Code quality, maintenability, bugs&#8230;<br><em>You will receive a detailled code review report.</em></td><td>13 points</td></tr></tbody></table></figure>



<h4>Bonuses</h4>



<p>The following list is not exhaustive. Be free to highlight challenges you overcame in a special section of your README.</p>



<ul><li>Write a fully featured backend (higher bonus if built on node.js). Adding a backend does not reduce my expectation on the frontend part.</li><li>Switch from JavaScript to TypeScript (use strict mode, ban the <code>any</code> type).</li><li>Use high quality JSdoc comments, with <code>tsconfig.json</code> setup to check js all files.</li><li>Host your static website online (ex. Firebase Hosting, render.com, aws S3&#8230;).</li><li>Implement error tracking of hosted site with (ex. Sentry, Rollbar, Stackdriver&#8230;).</li><li>Write automatic specs (unit, e2e&#8230;).</li><li>Send emails with your backend (look at the <a href="https://mailcatcher.me/" target="_blank" rel="noreferrer noopener">mailcatcher</a> to mock the STMP server).</li><li>Generate high quality PDF with putteteer or selenium.</li></ul>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/project/">Project</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>5. Que peut faire le web aujourd&#8217;hui ?</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 20 Feb 2021 10:43:49 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[Développement web côté client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1973</guid>

					<description><![CDATA[<p>Lorsqu&#8217;on fait référence à HTML5, on pense d&#8217;abord à une certaine version du langage de balise utilisé pour structurer les contenus. Toutefois, ce nom désigne aussi l&#8217;ensemble des HTML5 API. Vous trouverez un aperçu de ces nombreuses fonctionnalités sur le site https://whatwebcando.today./ Vous pourriez découvrir par exemple que votre application peut déléguer le processus de paiement &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/" class="more-link">Continuer la lecture de <span class="screen-reader-text">5. Que peut faire le web aujourd&#8217;hui ?</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/">5. Que peut faire le web aujourd&rsquo;hui ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Lorsqu&rsquo;on fait référence à HTML5, on pense d&rsquo;abord à une certaine version du langage de balise utilisé pour structurer les contenus. Toutefois, ce nom désigne aussi l&rsquo;ensemble des <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5" target="_blank" rel="noreferrer noopener">HTML5 API</a>. </p>



<p>Vous trouverez un aperçu de ces nombreuses fonctionnalités sur le site <a href="https://whatwebcando.today/" target="_blank" rel="noreferrer noopener">https://whatwebcando.today/</a>. Vous pourriez découvrir par exemple que votre application peut déléguer le processus de paiement à votre navigateur !</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="658" height="515" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Your-browser-can-process-payments.png" alt="" class="wp-image-1790" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/02/Your-browser-can-process-payments.png 658w, https://thomas-veillard.fr/wp-content/uploads/2021/02/Your-browser-can-process-payments-300x235.png 300w" sizes="(max-width: 658px) 100vw, 658px" /><figcaption>Démonstration de la <a href="https://whatwebcando.today/payments.html" target="_blank" rel="noreferrer noopener">Payments API</a>, qui permet au site web de déléguer tout le processus de commande et de paiement en ligne. Cela inclut l&rsquo;affichage du détail des prix, l&rsquo;enregistrement des cartes bancaires et le traitement du paiement.</figcaption></figure>



<h4>Exemple d&rsquo;APIs exploitant le réseau</h4>



<p>De nos jours, les applications web peuvent émettre et recevoir en temps réel des messages du serveur. En fonction de vos besoins, vous pourriez utiliser :</p>



<ul><li>Les <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" target="_blank" rel="noreferrer noopener">WebSockets</a> pour une communication à double sens ;</li><li>Les <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events" target="_blank" rel="noreferrer noopener">server-sent events</a> pour recevoir des notifications depuis le serveur (unidirectionnel et l&rsquo;infrastructure est plus simple que les websockets).</li></ul>



<h4>Exemples d&rsquo;API pour le multimédia</h4>



<p>Votre navigateur supporte à coup sûr la visioconférence grâce à l&rsquo;API <a href="https://developer.mozilla.org/fr/docs/WebRTC" target="_blank" rel="noreferrer noopener">WebRTC</a>. Celle-ci permet la réception et diffusion de flux en temps réel et tire avantage des codecs et enregistrements de flux exposés par d&rsquo;autres API (caméra, microphone, voire partage d&rsquo;écran).</p>



<p>Toujours sur le plan des traitements multimédias, le navigateur sait procéder à des rendus 2D et 3D accélérés par carte graphique grâce à la <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="noreferrer noopener">Canvas API</a> et la <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API" target="_blank" rel="noreferrer noopener">WebGL API</a>.</p>



<h4>Votre navigateur est un véritable moteur de bases de données</h4>



<p>Il y a plusieurs façons de sauvegarder des données côté client. Entre autres :</p>



<ul><li>Les <a href="https://developer.mozilla.org/fr/docs/Web/HTTP/Cookies" target="_blank" rel="noreferrer noopener">cookies</a> sont de petits fichiers textes que le serveur dépose dans le navigateur. Celui-ci les renvoie systématiquement lors de futures requêtes HTTP(s) vers les domaines autorisés.</li><li>Les <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer noopener">localStorage</a> et <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage" target="_blank" rel="noreferrer noopener">sessionStorage</a> sont des bases de données clés/valeurs destinées à conserver de petits volumes de données. Des objets plus complexes peuvent être enregistrés s&rsquo;ils sont sérialisés avec <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/JSON/stringify" target="_blank" rel="noreferrer noopener">JSON.stringify</a> par exemple.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noreferrer noopener">IndexedDB</a> est une base de données relationnelle et transactionnelle dans laquelle vous pouvez sauvegarder plusieurs gigaoctets de données 🤩. À partir d&rsquo;un certain volume (dépendant du navigateur), l&rsquo;application devra demander le consentement de l&rsquo;utilisateur.</li></ul>



<h4>En conclusion</h4>



<p>Le navigateur est un environnement d&rsquo;exécution très riche en fonctionnalités. Chacune d&rsquo;elles est implémentée dans le respect de standards, dont notamment les HTML5 API Standards.</p>



<p>Malheureusement, votre base d&rsquo;utilisateur est hétérogène. Avant d&#8217;employer toute solution, vous devriez vérifier son taux d&rsquo;adoption par le marché. Le référentiel <a href="https://caniuse.com/" target="_blank" rel="noreferrer noopener">https://caniuse.com/</a> vous y aidera. Il agrège les parts de marché de chaque navigateur, version par version.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/">5. Que peut faire le web aujourd&rsquo;hui ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>4. Utiliser les technologies web pour construire autre chose qu&#8217;un site.</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 20 Feb 2021 09:22:35 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[Développement web côté client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1944</guid>

					<description><![CDATA[<p>Pour les ordinateurs de bureau et les téléphones Puisque les technologies du web front-end sont si pratiques pour la construction d&#8217;interfaces, les développeurs ont mis au point des stratagèmes afin de les utiliser dans d&#8217;autres contextes. En particulier, ils souhaitent en user pour leurs applications sur PC, tablettes et téléphones. Peu importe la plateforme, l&#8217;idée &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/" class="more-link">Continuer la lecture de <span class="screen-reader-text">4. Utiliser les technologies web pour construire autre chose qu&#8217;un site.</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/">4. Utiliser les technologies web pour construire autre chose qu&rsquo;un site.</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Pour les ordinateurs de bureau et les téléphones</h4>



<p>Puisque les technologies du web front-end sont si pratiques pour la construction d&rsquo;interfaces, les développeurs ont mis au point des stratagèmes afin de les utiliser dans d&rsquo;autres contextes. En particulier, ils souhaitent en user pour leurs applications sur PC, tablettes et téléphones. </p>



<p>Peu importe la plateforme, l&rsquo;idée est souvent la même. Il s&rsquo;agit d&rsquo;écrire une application en HTML/CSS/JS et de l&#8217;empaqueter dans une webview. Tous les éléments relatifs à l&rsquo;interface d&rsquo;un navigateur classique sont masqués (pas de barre d&rsquo;adresse, de bouton de retour, etc.). L&rsquo;intégration avec le système est aussi renforcée grâce à de nouvelles APIs.</p>



<p>Une fois empaquetée, l&rsquo;application propose une expérience similaire aux autres logiciels. Elle peut fournir un programme d&rsquo;installation autonome (sous Windows ou MacOS), un paquet (.deb sous Debian, .rpm sous RHEL) ou une diffusion sur les boutiques (Google Play, App Store).</p>



<blockquote class="wp-block-quote"><p>Write once, run everywhere. 🎉</p><cite>Il s&rsquo;agit à l&rsquo;origine du <a href="https://en.wikipedia.org/wiki/Write_once,_run_anywhere" target="_blank" rel="noreferrer noopener">slogan de Java</a>.</cite></blockquote>



<p>Cette citation résume un autre bénéfice de mutualiser la base de code entre plusieurs implémentations (ex. un site web, une application PC et téléphone). Vous n&rsquo;avez alors qu&rsquo;une seule base de code et plusieurs cibles de construction. En conséquence, toute nouveauté ou correction est immédiatement disponible sur ces plateformes. Toutefois, rien ne vous empêche d&rsquo;activer conditionnellement certaines fonctionnalités en fonction de la plateforme.</p>



<p>Les utilisateurs pourraient exiger davantage de fonctionnalités d&rsquo;une application installée en comparaison à sa version site. Electron et Cordova vous offrent cette possibilité via une plus forte intégration avec le système et des API supplémentaires. Ce n&rsquo;est envisageable uniquement car Cordova et Electron font confiance à votre code, contrairement à un navigateur qui doit s&rsquo;en protéger.</p>



<p>En effet, le navigateur fait face à des enjeux de sécurité. Il considère chaque site comme un programme non fiable, voire potentiellement malveillant. Les mécanismes de protection sont nombreux : sandbox, demande de permissions, API restreintes, etc. C&rsquo;est typiquement pour cette raison que le système de fichier n&rsquo;est pas exposé à un site web, mais pleinement accessible dans le contexte d&rsquo;Electron.</p>



<h4>Pour le terminal (ligne de commande) et les serveurs</h4>



<p>De nos jours, Javascript peut s&rsquo;exécuter en dehors d&rsquo;un navigateur. Node.js est l&rsquo;environnement de référence. Il est basé sur le moteur V8 de Chromium qu&rsquo;il étend avec de nouvelles API. De nombreux outils en ligne de commandes et serveurs HTTP s&rsquo;en servent.</p>



<p>Pour les développeurs, utiliser le même langage entre le front-end et back-end améliore nettement la productivité. C&rsquo;est aussi un chemin rapide pour devenir « full-stack ».</p>



<ul><li>Il n&rsquo;y a qu&rsquo;un seul à langage et écosystème à maîtriser (donc plus de temps pour approfondir le sujet).</li><li>La stack technique est consistante et des briques (code, dépendances&#8230;) peuvent être mutualisées entre le front-end et le back-end.</li></ul>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/">4. Utiliser les technologies web pour construire autre chose qu&rsquo;un site.</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>3. À quelle point cette interface est-elle élaborée ?</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 20 Feb 2021 07:09:08 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[Développement web côté client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1896</guid>

					<description><![CDATA[<p>La disposition et mise en page (layout) La disposition et la mise en page consistent à dimensionner et positionner les blocs. La page de commande d&#8217;un nouveau serveur est composée de 4 principaux blocs : l&#8217;entête accueille l&#8217;identité du service (logo), le centre de notifications et la navigation vers les autres portails ; le menu &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/" class="more-link">Continuer la lecture de <span class="screen-reader-text">3. À quelle point cette interface est-elle élaborée ?</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/">3. À quelle point cette interface est-elle élaborée ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-image size-large"><img loading="lazy" width="1058" height="692" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/How-rich-can-be-a-web-ui-.gif" alt="" class="wp-image-1406"/><figcaption>L&rsquo;interface de gestion d&rsquo;Hetzner Cloud est un bel exemple de Single Page Application.</figcaption></figure>



<h4>La disposition et mise en page (layout)</h4>



<p>La disposition et la mise en page consistent à dimensionner et positionner les blocs. La page de commande d&rsquo;un nouveau serveur est composée de 4 principaux blocs :</p>



<ul><li>l&rsquo;entête accueille l&rsquo;identité du service (logo), le centre de notifications et la navigation vers les autres portails ;</li><li>le menu de gauche permet de naviguer dans l&rsquo;interface de gestion du projet ;</li><li>le corps de la page (espace qui centralise l&rsquo;attention de l&rsquo;utilisateur) contient le formulaire ;</li><li>le pied de page flottant résume l&rsquo;état actuel de la commande.</li></ul>



<h4>Le formulaire dynamique</h4>



<p>Le formulaire lui-même est hautement interactif. Les actions disponibles à une étape dépendent d&rsquo;une combinaison de choix antérieurs. Il ouvre des sous-formulaires dans des fenêtres contextuelles, calcule et affiche le prix dans le pied de page, averti en cas de mauvaise configuration, etc. </p>



<p>Ponctuellement, Javascript collecte quelques informations auprès du serveur comme la liste des volumes existants pour les proposer à la sélection. Il n&rsquo;en demeure pas moins que l&rsquo;intégralité des calculs, de la construction de la page et de son rendu sont réalisés côté client. Au moment où j&rsquo;écris cet article, la console est basée sur Angular. Cela tombe bien, car nous utiliserons le même cadriciel dans ce cours.</p>



<h4>Le style</h4>



<p>Le moteur de rendu du navigateur prend en charge les polices, les couleurs, les fonds colorés ou texturés, les dégradés, les marges internes et externes, les bordures et leurs coins arrondis, le positionnement du texte et tant d&rsquo;autres éléments de style.</p>



<p>Imaginez un bloc sur fond jaune à bordure marron, dont le texte est centré et les coins sont arrondis. Avec CSS, seulement quatre petites règles sont requises. Mais combien de lignes de code vous faudrait-il pour produire le même résultat en manipulant directement un tableau 2D de pixels ?</p>



<style>
.my-rounded-block {
  background-color: #ffecb8;
  border: 1px solid #795548;
  border-radius: 3px;
  text-align: center;
}
</style>

<p class="my-rounded-block">Example of paragraph with background and rounded border.</p>



<div class="wp-block-columns">
<div class="wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="CSS" data-shcb-language-slug="css"><div><code class="hljs language-css"><span class="hljs-selector-class">.my-rounded-block</span> {
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffecb8</span>;
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#795548</span>;
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;
  <span class="hljs-attribute">text-align</span>: center;
}</code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">CSS</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">css</span><span class="shcb-language__paren">)</span></small></pre></div>



<div class="wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-rounded-block"</span>&gt;</span>
  Example of paragraph with background and rounded border.
<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre></div>
</div>



<h4>Les animations</h4>



<p>Créer une animation à partir de zéro est difficile. Il faut poser des formules mathématiques décrivant la transformation de la cible en fonction du temps. Ensuite, il faut calculer chacune des images tout en visant un débit stable de 60 images par seconde. Cela implique beaucoup d&rsquo;optimisations, d&rsquo;autant plus que les animations peuvent coexister.</p>



<p>Heureusement, CSS3 vient encore une fois à la rescousse. Il suffira de lui décrire les états initiaux et finaux de l&rsquo;élément à animer. Le navigateur s&rsquo;occupe du reste, notamment du choix du matériel le plus adapté (comme un accélérateur graphique si disponible) et des éventuelles concessions pour maintenir un débit d&rsquo;images satisfaisant.</p>



<p>Les animations donnent un retour à l&rsquo;utilisateur, lui procurant le sentiment que l&rsquo;interface est réactive et prête à accepter de nouvelles instructions.</p>



<ul><li>Le changement de couleur d&rsquo;un bouton au survol de la souris invite l&rsquo;utilisateur à interagir avec.</li><li>Une animation de chargement l&rsquo;avertit que l&rsquo;application travaille normalement, même si le résultat est un peu long à obtenir.</li></ul>



<p>Finalement, cet exemple d&rsquo;application illustre parfaitement l&rsquo;efficacité du couple HTML/CSS pour la construction d&rsquo;interfaces graphiques. Rien à voir, donc, avec des dinosaures 🦖 comme swing de Java !</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/">3. À quelle point cette interface est-elle élaborée ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>2. Pourquoi les technologies web sont-elles si populaires ?</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Wed, 17 Feb 2021 07:29:03 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[Développement web côté client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1863</guid>

					<description><![CDATA[<p>Elles sont portables d’un OS à l’autre. L’utilisateur final a juste besoin d’un navigateur. Les technologies web front-end ont avant tout été conçues pour les navigateurs. Ces derniers fonctionnent sur presque n&#8217;importe quel système d&#8217;exploitation. C&#8217;est aussi bien valable pour les PC (Windows, MacOS, GNU/Linux&#8230;) que les téléphones (iOS, Android&#8230;). Du moment que l&#8217;utilisateur final &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Pourquoi les technologies web sont-elles si populaires ?</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/">2. Pourquoi les technologies web sont-elles si populaires ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Elles sont portables d’un OS à l’autre. L’utilisateur final a juste besoin d’un navigateur.</h4>



<p>Les technologies web front-end ont avant tout été conçues pour les navigateurs. Ces derniers fonctionnent sur presque n&rsquo;importe quel système d&rsquo;exploitation. C&rsquo;est aussi bien valable pour les PC (Windows, MacOS, GNU/Linux&#8230;) que les téléphones (iOS, Android&#8230;).</p>



<p>Du moment que l&rsquo;utilisateur final emploie un navigateur à jour, il acquière immédiatement l&rsquo;accès à toutes les applications publiées sur Internet sous la forme de sites web.</p>



<h4> Elles sont maîtrisées, matures et continuent d’évoluer.</h4>



<p>Internet n&rsquo;est pas né hier. Ses acteurs ont appris de leurs expériences et ont capitalisé sur les technologies et les outils.</p>



<p>Aujourd&rsquo;hui, le web est plutôt régit par des standards (au moins pour les briques fondamentales).  Si votre application respecte elle-même strictement ces standards, alors il est certain qu&rsquo;elle fonctionnera encore dans des décénies.</p>



<p>Prenez pour exemple <a href="http://info.cern.ch/" target="_blank" rel="noreferrer noopener">le premier site jamais construit</a> et publié sur internet. Il est toujours en ligne et parfaitement fonctionnel parce qu&rsquo;il s&rsquo;appuyait sur des standards.</p>



<p>Bien sûr, ces technologies continuent d&rsquo;évoluer pour répondre aux nouveaux besoins. Il suffit de comparer n&rsquo;importe quel site moderne au premier du CERN pour s&rsquo;en convaincre.</p>



<h4>La création de riches interfaces est facile</h4>



<p>Historiquement, la principale mission d&rsquo;un navigateur est de procéder au rendu de pages web. C&rsquo;est une tâche à laquelle ils excellent.</p>



<p>En tant que développeur, il vous suffit de construire la structure et son contenu en HTML. Quelques centaines de règles CSS permettent ensuite d&rsquo;appliquer un style et une disposition. Toute la complexité du rendu est ensuite prise en charge par de navigateur.</p>



<h4>Javascript rend cette interface dynamique et interactive</h4>



<p>Au début du web, le HTML et le CSS étaient produits par les serveurs. Javascript n&rsquo;avait pour objectif que d&rsquo;ajouter un peu de dynamisme côté client. Il servait principalement à :</p>



<ul><li>animer des éléments (maintenant de la responsabilité de CSS) ;</li><li>réagir à des événements et modifier ponctuellement la page (par exemple afficher ou cacher un bloc quand l&rsquo;utilisateur clique sur un bouton).</li></ul>



<p>Cette dernière décennie, le langage et son écosystème ont mûri. Beaucoup de cadriciels et de bibliothèques aident les développeurs à construire l&rsquo;intégralité de leurs applications clientes en JS. Celles-ci sont alors responsables de produire contenus et styles, en plus de gérer la navigation. Lorsque l&rsquo;utilisateur clique sur un lien interne, Javascript capture l&rsquo;événement, puis génère et remplace la page actuelle.</p>



<blockquote class="wp-block-quote"><p>On les appelle des « <em>Single Page Application »</em>.</p></blockquote>



<p>Si tout le processus de construction et de rendu des pages se fait côté client, y-a-t-il encore besoin de serveurs ? Cela dépendra des besoins de l&rsquo;application. Certaines tâches, comme l&rsquo;authentification et l&rsquo;autorisation des accès, sont réservés à des environnements de confiance. D&rsquo;autres routines peuvent nécessiter une infrastructure pour la persistance et la diffusion de données. </p>



<h4>L&rsquo;écosystème est riche en outils</h4>



<p>Les outils améliorent la productivité, le confort ou la qualité. C&rsquo;est pourquoi tant d&rsquo;efforts et d&rsquo;énergies sont dépensés à les maintenir. Ils sont particulièrement abondant en développement web.</p>



<p>Vous découvrirez naturellement certains d&rsquo;entres-eux au cours du module. En particulier, l&rsquo;inspecteur de DOM, de réseau, de mémoire ou le débogueur Javascript intégrés à votre navigateur vous seront d&rsquo;une grande aide. Vous apprendrez aussi à importer et gérer du code tiers grâce aux gestionnaires de dépendances. Et bien plus encore !</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/">2. Pourquoi les technologies web sont-elles si populaires ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>1. Introduction et prérequis</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/introduction-2/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 16 Feb 2021 06:46:28 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[Développement web côté client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1831</guid>

					<description><![CDATA[<p>Ce cours enseigne comment créer des applications web côté client en utilisant les technologies modernes. Objectifs pédagogiques Construire des interfaces web modernes de type Single Page Application, en utilisant Angular comme cadriciel. Comprendre le paradigme de programmation orientée événement (Event Driven Development). Gérer votre code source et collaborer en équipe grâce à git et à &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/introduction-2/" class="more-link">Continuer la lecture de <span class="screen-reader-text">1. Introduction et prérequis</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/introduction-2/">1. Introduction et prérequis</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Ce cours enseigne comment créer des applications web côté client en utilisant les technologies modernes.</p>



<h4>Objectifs pédagogiques</h4>



<ul><li>Construire des interfaces web modernes de type <code>Single Page Application</code>, en utilisant Angular comme cadriciel.</li><li>Comprendre le paradigme de programmation orientée événement (Event Driven Development).</li><li>Gérer votre code source et collaborer en équipe grâce à git et à un workflow comme Git Flow.</li><li>Gérer les dépendances de votre projet avec npm.</li><li>Écrire du code source de qualité (bonnes pratiques, modularité, typage statique avec TS&#8230;).</li><li>Découvrir le riche écosystème des applications web (usages, outils, avantages et inconvénients).</li></ul>



<h4>Compétences</h4>



<p>Cet enseignement a été construit en supposant que vous connaissiez les bases de HTML et CSS, en plus d&rsquo;avoir l&rsquo;expérience de l&rsquo;algorithmique et de la programmation. Si ce n&rsquo;est pas le cas, faites un tour sur ces ressources (rapides et faciles) :</p>



<ul><li><a href="https://developer.mozilla.org/fr/docs/Apprendre/HTML/Introduction_%C3%A0_HTML/Getting_started" target="_blank" rel="noreferrer noopener">Commencer avec le HTML</a></li><li><a href="https://developer.mozilla.org/fr/docs/Learn/CSS/First_steps/How_CSS_works" target="_blank" rel="noreferrer noopener">CSS, comment ça marche ?</a></li></ul>



<h4>Outils</h4>



<p>Les utilisateurs finaux n&rsquo;ont besoin que d&rsquo;un navigateur récent pour exécuter les applications web clientes (front-end).  Le choix de tel ou tel système d&rsquo;exploitation n&rsquo;a plus tant d&rsquo;importance dans ce contexte.</p>



<p>Dans une moindre mesure, c&rsquo;est aussi vrai pour les développeurs. La plupart (mais pas tous) des outils fonctionnent sur les principaux OS. Toutefois, l&rsquo;expérience de développement peut beaucoup varier d&rsquo;un OS à l&rsquo;autre et certaines tâches seront parfois plus compliquées.</p>



<p>Pour ce module, vous êtes libre d&rsquo;utiliser Windows, MacOS ou Linux. Si vous utilisez Windows, vous pourriez rencontrer des difficultés à installer Docker (utilisé pour les TP).</p>



<p>Mes démonstrations seront réalisées sur Ubuntu, une distribution Linux. En cas de difficultés à mettre en place votre environnement de travail, vous pourriez installer Linux dans une machine virtuelle. Il sera alors plus simple de le mettre en place.</p>



<p><strong>Pour le premier cours, veuillez s&rsquo;il vous plait :</strong></p>



<ul><li>apporter systématiquement votre ordinateur.</li><li>installer <a href="https://nodejs.org/fr/" target="_blank" rel="noreferrer noopener">Node.js</a>, indispensable pour la construction et l&#8217;empaquetage d&rsquo;application web. Sous Linux, préférez l&rsquo;installation avec <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer noopener">nvm</a>.</li><li>installer un éditeur ou un IDE adapté au développement web, comme VSCode ou WebStorm.</li></ul>



<p>Pendant les travaux pratiques, vous installerez encore beaucoup d&rsquo;autres outils. Afin de gagner du temps et en confort, j&rsquo;ai empaqueté la plupart de ces outils et des ressources pédagogiques avec Docker.</p>


<a href=https://docs.google.com/presentation/d/1cjTmJwYxGxT5aW4noNiNxUYFBbvRMG_i9r1tHBjxlFY/edit?usp=sharing target="_blank">
  <div style="display: flex; align-items: center; padding: 1em; border-radius: 3px; border: 1px solid #f5ba16; background: #f7f7f7">
    <div style="margin-right: 0.5em"><img src="/wp-content/uploads/2021/01/google_slide.svg" /></div>
    <div>Ouvrir le support de présentation</div>
  </div>
</a>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/introduction-2/">1. Introduction et prérequis</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>3. La ligne de commande et les entrées / sorties</title>
		<link>https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/3-la-ligne-de-commande-et-les-entrees-sorties/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 12 Feb 2021 18:30:05 +0000</pubDate>
				<category><![CDATA[Chapitre 2. Les interfaces utilisateur]]></category>
		<category><![CDATA[Théorie des systèmes d’exploitation et pratique de GNU/Linux]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=696</guid>

					<description><![CDATA[<p>Rappels Lors des précédentes séances, nous avons abordé : bash, un interpréteur de ligne de commande et un langage de script. coreutils, un ensemble de programmes en lignes de commande du projet GNU. apt, pour installer des logiciels, en ligne de commande à nouveau. L&#8217;interpréteur de ligne de commande Bash est l’interpréteur le plus populaire &#8230; <a href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/3-la-ligne-de-commande-et-les-entrees-sorties/" class="more-link">Continuer la lecture de <span class="screen-reader-text">3. La ligne de commande et les entrées / sorties</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/3-la-ligne-de-commande-et-les-entrees-sorties/">3. La ligne de commande et les entrées / sorties</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Rappels</h4>



<p>Lors des précédentes séances, nous avons abordé :</p>



<ul><li>bash, un interpréteur de ligne de commande et un langage de script.</li><li>coreutils, un ensemble de programmes en lignes de commande du projet GNU.</li><li>apt, pour installer des logiciels, en ligne de commande à nouveau.</li></ul>



<h4>L&rsquo;interpréteur de ligne de commande</h4>



<p>Bash est l’interpréteur le plus populaire sur les systèmes Unix et Unix-like. Il est installé et utilisé par défaut sur GNU/Linux, MacOS, etc.</p>



<p>Pour simplifier, on peut décrire bash en mode interactif comme un environnement où l&rsquo;utilisateur pose une question (commande) et reçoit une réponse (message texte).</p>



<p>Plus précisément, quand l&rsquo;utilisateur exécute une commande :</p>



<ol><li>L&rsquo;utilisateur saisit une commande et appuie sur la touche « entrée ».</li><li>Bash analyse la commande, qui suit une syntaxe précise.</li><li>Bash lance le programme désigné avec des arguments.</li><li>Le programme s&rsquo;exécute, produit une réponse (notamment un texte) et quitte.</li><li>Bash affiche la réponse à l&rsquo;utilisateur, puis attend une nouvelle commande.</li></ol>



<figure class="wp-block-image size-large"><img loading="lazy" width="768" height="553" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/ls-lhsa-etc.png" alt="" class="wp-image-698" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/ls-lhsa-etc.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/01/ls-lhsa-etc-300x216.png 300w" sizes="(max-width: 768px) 100vw, 768px" /><figcaption>Exécution de la commande « ls -lhsa /etc » et affichage de la réponse du programme « ls ». Ce logiciel permet de lister le contenu d&rsquo;un répertoire et d&rsquo;afficher des propriétés des fichiers (nom, taille, propriétaire, permissions&#8230;).</figcaption></figure>



<h4>Structure d’une commande basique</h4>



<p class="exercice">Considérons la commande suivante : <span style="color:#3d85c6" class="has-inline-color">ls</span> <span style="color:#741b47" class="has-inline-color">-lhsa</span> <span style="color:#bf9000" class="has-inline-color">/etc</span></p>



<p><strong><span style="color:#3d85c6" class="has-inline-color">Le nom de la commande.</span></strong> En règle générale, une commande est en réalité un programme. Grâce à son nom, bash le retrouve dans les répertoires standards. Par exemple, cette commande lancera le programme dont le binaire se situe à l’emplacement /bin/ls. Ce logiciel permet de lister le contenu d&rsquo;un répertoire et d&rsquo;afficher des propriétés des fichiers (nom, taille, propriétaire, permissions&#8230;).</p>



<p><strong><span style="color:#741b47" class="has-inline-color">Les options</span></strong> permettent de personnaliser le comportement. Pour ls, d’après le manuel:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># extrait de "man ls", commande qui permet d'accéder à la documentation de "ls"</span>
-l	use a long listing format
-s	<span class="hljs-built_in">print</span> the allocated size of each file, <span class="hljs-keyword">in</span> blocks
-a	<span class="hljs-keyword">do</span> not ignore entries starting with .
-h 	with -l and -s, <span class="hljs-built_in">print</span> sizes like 1K 234M 2G etc.</code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong><span style="color:#bf9000" class="has-inline-color">Les arguments</span></strong> permettent généralement de spécifier la cible du traitement. Par exemple, ls attend optionnellement une liste de chemins de dossiers et de fichiers à examiner.</p>



<h4>Les entrées d&rsquo;un processus</h4>



<p>Un processus accepte des <strong>entrées</strong> (qui contiennent un problème à résoudre). Il effectue ensuite des traitements, qui aboutissent à un résultat. Ce résultat étant communiqué, il s&rsquo;agit d&rsquo;une <strong>sortie</strong>. Enfin, le traitement peut échouer, auquel cas le processus remonte l&rsquo;erreur. C&rsquo;est aussi une <strong>sortie</strong>, bien qu&rsquo;on s&rsquo;en serait passé 😱 !</p>



<p class="exercice">Reprenons notre précédente commande : <span style="color:#3d85c6" class="has-inline-color">ls</span><span class="has-inline-color has-purple-color"> </span><span class="has-inline-color has-medium-pink-color">-lhsa /etc</span></p>



<p>Cette commande aboutit à lancer un processus <code>ls</code>. Ce processus a diverses entrées :</p>



<ul><li>Le contenu passé sur la ligne de commande après le nom du programme sera transmis au processus lors de son initialisation. Ainsi, l&rsquo;expression « <span class="has-inline-color has-medium-pink-color">-lhsa /etc</span> » a du sens pour le programme <code>ls</code> et formalise le problème à résoudre (cf. section précédente). On appelle ces contenus des « paramètres » et il s&rsquo;agit d&rsquo;une entrée pour le processus. À noter que cette entrée est immuable pour toute la vie du processus.</li></ul>



<ul><li>Diverses informations contextuelles. Par exemple, le processus connait le chemin du répertoire courant (répertoire depuis lequel l&rsquo;utilisateur a lancé le processus). Il connait aussi l&rsquo;identité de l&rsquo;utilisateur, etc. </li></ul>



<ul><li>D&rsquo;autres données peuvent arriver durant le cycle de vie du programme. Par exemple, un processus peut poser une question et laisser l&rsquo;utilisateur y répondre. Le processus reçoit chaque caractère saisi dans un flux. Ce flux venant du clavier s&rsquo;appelle l&rsquo;entrée standard.</li></ul>



<ul><li>Bien sûr, d&rsquo;autres flux d&rsquo;entrée peuvent être initiés par le processus : typiquement une connexion réseau ou une lecture de fichier.</li></ul>



<h4>Les sorties d&rsquo;un processus</h4>



<p>Toujours dans notre exemple <code>ls -lhsa /etc</code>, le résultat du processus est un texte. On regardera au passage que ce format autorise une mise en page en colonne ou un rendu de couleurs.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-8" data-shcb-language-name="Shell Session" data-shcb-language-slug="shell"><div><code class="hljs language-shell">thomas@thinkpad-laptop:~$ ls -lhsa /etc
total 1,3M
 12K drwxr-xr-x 156 root root    12K janv. 18 19:06 .
4,0K drwxr-xr-x  20 root root   4,0K mai   31  2020 ..
4,0K drwxr-xr-x   3 root root   4,0K avril 23  2020 acpi
4,0K -rw-r--r--   1 root root   3,0K avril 23  2020 adduser.conf
4,0K drwxr-xr-x   3 root root   4,0K avril 23  2020 alsa
 12K drwxr-xr-x   2 root root    12K janv. 18 19:12 alternatives
4,0K -rw-r--r--   1 root root    401 juil. 16  2019 anacrontab
4,0K -rw-r--r--   1 root root    244 oct.   7 10:42 antidote.conf
4,0K drwxr-xr-x   3 root root   4,0K oct.  23 10:19 apache2
4,0K -rw-r--r--   1 root root    433 oct.   2  2017 apg.conf
[...] sortie tronquée</code></div><small class="shcb-language" id="shcb-language-8"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Shell Session</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">shell</span><span class="shcb-language__paren">)</span></small></pre>


<p>D&rsquo;ailleurs, la sortie console d&rsquo;un processus est un flux. La commande <code>ls</code> laisse penser qu&rsquo;il faut attendre la complétion de l&rsquo;exécution du programme pour avoir le résultat. C&rsquo;est faux, et une commande que <code>htop</code> le démontre. Un processus peut envoyer des messages par intermittence.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="734" height="524" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/htop-actualise-sa-sortie-par-intermittence.gif" alt="" class="wp-image-863"/><figcaption>htop, un gestionnaire de tâches en ligne de commande, actualise son contenu par intermittence. Il prouve aussi qu&rsquo;un programme sans interface graphique peut utiliser des mises en formes évoluées et des couleurs. </figcaption></figure>



<p>D&rsquo;autres productions de sorties auraient été envisageables : écriture d&rsquo;un fichier sur le disque, envoi d&rsquo;un message sur une connexion, etc.</p>



<h4>Les flux standards d&rsquo;entrée/sortie</h4>



<p>Sous Linux en particulier, les programmes en lignes de commande ont recours à 3 flux standards. Ils permettent au processus de communiquer avec l&rsquo;utilisateur ou d&rsquo;autres processus.</p>



<ul><li>Le flux d&rsquo;<strong>entrée standard</strong>, nommé <strong>STDIN</strong> et indexé comme le flux numéro 0. Par exemple, quand bash est en attente d&rsquo;une commande, chaque caractère saisi par l&rsquo;utilisateur est envoyé à bash via son flux d&rsquo;entrée.</li></ul>



<ul><li>Le flux de <strong>sortie standard</strong> (<strong>STDOUT</strong>, n°1). Un processus peut utiliser ce flux pour afficher une réponse à l&rsquo;utilisateur. Par exemple, <code>ls</code> affiche la liste des répertoires sous la forme d&rsquo;un texte. Vous avez aussi rencontré <code>htop</code>, qui écrit à intervalle de temps réguliers dans ce flux.</li></ul>



<ul><li>Le flux de <strong>sortie d&rsquo;erreur standard </strong>(<strong>STDERR</strong>, n°2). De la même manière que le processus envoie un résultat valide sur STDOUT, il peut envoyer un message d&rsquo;erreur sur STDERR. <code>ls</code> utilise par exemple ce flux s&rsquo;il ne parvient pas à ouvrir un répertoire. Il s&rsquo;agit dans les 2 cas d&rsquo;un résultat produit par le processus, mais les différencier par le canal permet de les traiter séparément (notamment dans des scripts).</li></ul>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="605" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/Stdstreams-notitle.svg-1024x605.png" alt="" class="wp-image-847" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/Stdstreams-notitle.svg-1024x605.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Stdstreams-notitle.svg-300x177.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Stdstreams-notitle.svg-768x454.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Stdstreams-notitle.svg-1536x908.png 1536w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Stdstreams-notitle.svg.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>Les flux standard sous Linux : entrée, sortie, erreur. Source <a href="https://fr.wikipedia.org/wiki/Flux_standard" target="_blank" rel="noreferrer noopener">Wikipédia</a></figcaption></figure>



<p>Cette façon de gérer les flux standard sous Linux fait partie de la norme POSIX.</p>



<h4>Redirection du flux vers un fichier</h4>



<p>Vous avez ci-dessous une démonstration de redirection de flux.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1125" height="697" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-redirection-de-flux.gif" alt="" class="wp-image-868"/><figcaption>Démonstration d&rsquo;une redirection de flux vers un fichier.</figcaption></figure>



<ol><li>D&rsquo;abord, je saisis la commande <code>ls -lhsa</code>. La sortie est affichée en console. Un seul fichier <code>fichier.txt</code> existe dans le répertoire courant. Un explorateur graphique de fichiers est ouvert en arrière-plan dans le même répertoire.</li><li>Ensuite, j&rsquo;adapte cette commande pour rediriger la sortie vers un fichier. Cette commande adaptée est <code>ls -lhsa &gt; sortie_redirigee.txt</code>.</li><li>Aucune sortie n&rsquo;est affichée en console. Un fichier est créé dans le répertoire courant. Je l&rsquo;ouvre et on y retrouve le contenu de notre première commande.</li></ol>



<p>Dans cette démonstration, nous avons seulement redirigé le flux STDOUT vers le fichier. On peut faire bien plus avec les redirections.</p>



<h4>Redirection de STDOUT et STDERR en détails</h4>



<p>Ces deux exemples sont équivalents. Ils redirigent STDOUT (flux n°1) vers un fichier. En cas d&rsquo;erreur sur STDERR, les messages s&rsquo;affichent toujours en console.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-9" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">ls -lhsa &gt; sortie_redirigee.txt
ls -lhsa 1&gt; sortie_redirigee.txt</code></div><small class="shcb-language" id="shcb-language-9"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>Il est aussi possible de rediriger le flux STDERR (flux n°2) avec cette syntaxe.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-10" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">ls -lhsa 2&gt; sortie_erreur_redirigee.txt</code></div><small class="shcb-language" id="shcb-language-10"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>On peut rediriger séparément STDOUT et STDERR vers deux fichiers différents.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-11" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">ls -lhsa 1&gt; sortie_redirigee.txt 2&gt; sortie_erreur_redirigee.txt</code></div><small class="shcb-language" id="shcb-language-11"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>Une syntaxe permet de rediriger STDERR vers STDOUT. Dans le cas présent, STDOUT restant affiché en console, toute la sortie du programme est en console.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-12" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">ls -lhsa 2&amp;&gt;1</code></div><small class="shcb-language" id="shcb-language-12"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>On peut chaîner la redirection STDERR vers STDOUT, puis STDOUT vers un fichier.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-13" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">ls -lhsa 2&amp;&gt;1 &gt; sortie_fusionnee_redirigee.txt</code></div><small class="shcb-language" id="shcb-language-13"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>Les redirections avec un simple &lsquo;>&rsquo; détruisent le fichier existant. À l&rsquo;inverse, la syntaxe avec deux chevrons permet d&rsquo;ajouter le contenu en fin de fichier.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-14" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">ls -lhsa &gt;&gt; sortie_redirigee.txt</code></div><small class="shcb-language" id="shcb-language-14"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Envoyer un fichier vers STDIN</h4>



<p>S&rsquo;il est possible de rediriger les flux de sortie STDOUT et STDERR vers un fichier, attendez-vous à ce que rediriger un fichier vers STDIN le soit aussi 😋.</p>



<p>Seul le sens du chevron change. Ainsi, la commande <code>wc -l &lt; fichier.txt</code> lance la commande <code>cat</code> et lui passe le contenu de <code>fichier.txt</code> en entrée (sur STDIN).</p>



<p>La commande <code>wc -l</code> compte le nombre de lignes lues depuis l&rsquo;entrée standard jusqu&rsquo;à ce que le flux soit fermé. Elle me servira à illustrer la redirection d&rsquo;un flux du fichier vers le STDIN d&rsquo;un processus.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="739" height="519" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-wc.gif" alt="" class="wp-image-1774"/><figcaption>Démonstration de wc -l qui compte le nombre de lignes envoyées sur STDIN. La combinaison Ctrl + D met fin à la lecture et affiche « 6 ».</figcaption></figure>



<p>Maintenant que le comportement de <code>wc -l</code> est clair, voyons comment lui passer le contenu de <code>fichier.txt</code> en entrée, ce sorte qu&rsquo;il en compte le nombre de lignes.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="739" height="519" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-wc-avec-redirection-de-flux.gif" alt="" class="wp-image-1775"/></figure>



<ol><li>Tout d&rsquo;abord, je crée un nouveau fichier sobrement nommé <code>fichier.txt</code>. Il contient l&rsquo;introduction de cette séance.</li><li>Ensuite, je lance <code>wc -l</code> en redirigeant le contenu du fichier vers STDIN. Et le tour est joué. Simple, n&rsquo;est-ce pas ?</li></ol>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/3-la-ligne-de-commande-et-les-entrees-sorties/">3. La ligne de commande et les entrées / sorties</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>11. JavaScript: practical activity n°2</title>
		<link>https://thomas-veillard.fr/front-end-web-development/languages/javascript-practical-activity-n2/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:47 +0000</pubDate>
				<category><![CDATA[02. Languages]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2958</guid>

					<description><![CDATA[<p>Learning outcomes Manage dependencies with npm (install, check updates, find vulnerabilities&#8230;) ; Run cli optionally shipped with your dependencies with npx ; Split your application into multiple ES modules ; Merge those ES-modules into a single bundle and run it into your browser ; Use modern syntax while targeting older browsers using code transpilation ; &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-practical-activity-n2/" class="more-link">Continuer la lecture de <span class="screen-reader-text">11. JavaScript: practical activity n°2</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-practical-activity-n2/">11. JavaScript: practical activity n°2</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Manage dependencies with npm (install, check updates, find vulnerabilities&#8230;) ;</li><li>Run cli optionally shipped with your dependencies with npx ;</li><li>Split your application into multiple ES modules ;</li><li>Merge those ES-modules into a single bundle and run it into your browser ;</li><li>Use modern syntax while targeting older browsers using code transpilation ;</li><li>Use modern features while targeting older browsers using polyfills ;</li><li>Catch bugs and formatting issues using a linter ;</li><li>Introduce JSDoc comments (generate docs, improve IDE suggestion, catch bugs) ;</li><li>Build your application for production (optimisations, source maps&#8230;).</li></ul>



<h4>Download the source code</h4>



<p>I provide you a simple frontend application that renders a few stock price tables and charts. This small project is a specially crafted as a playground for this tutorial.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-download" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  <a href="https://thomas-veillard.fr/wp-content/uploads/2021/08/basic-rate-graph.zip">Download the learning material (source code)</a>
</div>
</div>



<h4>Run the unbundled sources</h4>



<p>Look at the sources under the <code>src</code> folder. The <code>index.js</code> is the entry point (the only script imported inside <code>index-es6-modules.html</code>). It imports the other files it needs via the <code>import ... from ...</code> statement. Each imported file is called a module.</p>



<p>Any module can import and/or export references. Those references could be variables, functions, classes, symbols, etc. For more information, both about the concept and the syntax, I recommend <a href="https://www.sitepoint.com/understanding-es6-modules/" target="_blank" rel="noreferrer noopener">this post about ES6-modules</a>.</p>



<p class="exercice"><strong>Exercise 1:</strong> Open <code>index-es6-modules.html</code> in your browser from the file browser (using « open with Chrome / Firefox / Edge » contextual menu). What is the error revealed inside the browser console?</p>



<div class="exercice"><p><strong>Excercise 2</strong>: Launch a local HTTP server (seen <a href="https://thomas-veillard.fr/front-end-web-development/languages/8-fast-tour-of-javascript-setup/">in the lecture</a>) and run the application from it. Then, inspect the HTTP traffic and record some statistics:</p><ul style="margin-left: 1em; margin-bottom: 0"><li>How many JS files were loaded ?</li><li>How long does it take on average to load one ES6-module ?</li><li>What is the total completion time to load all JS files ?</li><li>Did the browser load JS files sequentially or in parallel ?</li></ul></div><br>



<p><strong>Tips</strong>: your development tools record traffic network only when opened. You may refresh your tab with development tools opened to capture the whole network activity.</p>



<p class="exercice"><strong>Excercise 3</strong>: Discuss the performance penalty of serving ES6-modules as independent files to the browser. How to mitigate this performance issue?</p>



<h4>Getting familiar with npm features</h4>



<p>npm stands for « Node Package Manager ». This utility is shipped with the node.js installer and is a foundation of modern JavaScript ecosystem.</p>



<p>The primary goal of a package manager is making the installation of dependencies easy. Those dependencies may be libraries, frameworks, command line software, etc.</p>



<ul><li>A library can be imported like any ES6-module in your code.</li><li>A command line software is run from the terminal as a standalone software.</li><li>A framework is generally a set of multiple libraries, cli scripts and guidelines, that comes with strong opinions on how to use it.</li></ul>



<p class="has-text-align-center">***</p>



<p>First of all, npm is tightly coupled to the <code>package.json</code> file, which is both a manifest of the project and a configuration file for npm. Both your project using npm, and any dependency you install this way have it. A sample is included into the historical rates explorer app.</p>



<p>Any <code>package.json</code> contains basic information about the project, such as its <code>name</code>, <code>version</code> (which should follow <a href="https://semver.org/" target="_blank" rel="noreferrer noopener">semantic versioning</a> standard), <code>author</code> and <code>license</code>. Such a basic <code>package.json</code> can be created with the command <code>npm init</code>.</p>



<p>Then, you may specify dependencies (each one is identified with a name and an assertion about accepted versions). Just with that information, npm can pull dependencies from the <a href="https://www.npmjs.com/" target="_blank" rel="noreferrer noopener">public registry</a>.</p>



<p>The <code>package.json</code> of the sample app contains 2 groups of dependencies:</p>



<ul><li>those under the <code>dependencies</code> key, that are used by your code at runtime ;</li><li>those under the <code>devDependencies</code> key, that are part of the developer experience (for building your app, check code quality, execute automated testing, etc.).</li></ul>



<p>Depending on the npm&rsquo;s command you use, you can install each or all groups.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-15" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># Installs all dependencies from package.json (dependencies and devDependencies)</span>
npm install

<span class="hljs-comment"># Installs only production dependencies from package.json (ignores devDependencies)</span>
npm install --prod

<span class="hljs-comment"># Installs a new package (called webpack-cli) and appends it to package.json (inside devDependencies)</span>
npm install webpack-cli --save-dev</code></div><small class="shcb-language" id="shcb-language-15"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Excercise 4</strong>: Install dependencies using the <code>npm install</code> command. Dependencies are locally stored inside the <code>node_modules</code> folder. Why is there far more many modules into <code>node_modules</code> that those declared in <code>package.json</code> ?</p>



<p class="has-text-align-center">***</p>



<p>Because dependencies and versions are listed in a single place and installable through a single command, you can ensure every replica of the installation use consistent dependencies.</p>



<p>Another great benefit is automated tasks and analysis you can run on it:</p>



<ul><li>track updates and install them easily (using <code>npm outdated</code>) ;</li><li>be alerted in case of security advice about one of your dependencies (find the command yourself).</li></ul>



<p class="exercice"><strong>Excercise 5</strong>: The rate history app is potentially vulnerable to a high-level security issue through one of its dependencies. Using npm, find all vulnerable packages and associated version.  In which release those bug have been fixed?</p>



<p><strong>Tips</strong>: Before npm exists, developers frequently used CDN (Content Delivery Network) to include libraries. A CDN hosts a JS script you may include just before your own script (ex. by appending <code>&lt;script src="https://CDN_HOST/jquery.min.js" /&gt;</code> to the HTML source). As a result, the library exposes its functions by populating the global scope. Using CDN generally leads to outdated and inconsistent dependency versions across the project, and finally to security issues and technical dept. The bundler (kind of tool we discuss later) cannot optimise your app. For those and various other reasons, <strong>prefer npm over CDN</strong>.</p>



<p class="has-text-align-center">***</p>



<p>Did you notice the <code>scripts</code> key in my <code>package</code>.json? It points to an object whose keys are user-defined names and values are the bash commands to execute. The value can make reference to cli software installed inside <code>node_modules</code>.</p>



<p>For example, running <code>npm run serve-es6-sources</code> will start a local http server (using the <code>http-server</code> package).</p>



<p>Very common script&rsquo;s names are:</p>



<ul><li><code>build</code>: to produce a distributable bundle, sometime with many transformations ;</li><li><code>watch</code>: mostly the same than <code>build</code>, but efficiently re-emits bundle on change ;</li><li><code>test</code>: to execute a suite of automated tests you wrote yourself.</li></ul>



<p>The <code>build</code> script can target both the production (by generating more optimised bundles) and development (by preferring fastly emitted bundles and easier debugging in the browser). The <code>watch</code> script is intended for development, of course.</p>



<h4>Bundle the sources using webpack</h4>



<p class="exercice"><strong>Excercise 6</strong>: Look at the webpack documentation (both <a href="https://webpack.js.org/" target="_blank" rel="noreferrer noopener">home page</a> and the <a href="https://webpack.js.org/concepts/" target="_blank" rel="noreferrer noopener">concepts</a>). What is its primary purpose and how does it fix our performance issue previously encountered with ES6-modules?</p>



<p class="exercice"><strong>Excercise 7</strong>: The <code>webpack.config.js</code> file is ready to build the aggregated bundle in development mode. The entry point is <code>src/index.js</code>. Bundle should be output at <code>dist/index.js</code>. You can run webpack using <code>npm run build</code>.</p>



<p><strong>Tips</strong>: look at the emitted <code>dist/index.js</code> and be sure to understand what webpack did. Remember to question the teacher when necessary.</p>



<p class="exercice"><strong>Exercise 8</strong>: Open <code>index-bundled.html</code> in your browser (could be from the disc or from HTTP server). Does it actually fix the ES-module fetching performance issue ? Please provide some evidence in your answer.</p>



<p class="exercice"><strong>Excercise 9</strong>: Compare webpack&rsquo;s output in development and in production mode.</p>



<h4>The browser compatibility issue</h4>



<p>The 2 major kinds of compatibility issues are <strong>unsupported syntax</strong> and <strong>missing features</strong>.</p>



<ul><li>Fixing an <strong>unsupported syntax</strong> error imply transforming your code not to use that syntax anymore. For example, you could write classes without the <code>class</code> keyword.</li></ul>


<pre class="wp-block-code" aria-describedby="shcb-language-16" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// ES6 code (using the class keyword)</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{
  <span class="hljs-keyword">constructor</span> (id, firstName, lastName) {
    <span class="hljs-keyword">this</span>.id = id
    <span class="hljs-keyword">this</span>.firstName = firstName
    <span class="hljs-keyword">this</span>.lastName = lastName
  }
  
  getName () {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName.toUpperCase() 
  }
}</code></div><small class="shcb-language" id="shcb-language-16"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>

<pre class="wp-block-code" aria-describedby="shcb-language-17" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// Isofunctional ES5 code (defining the same class without using the `class` keyword)</span>

<span class="hljs-keyword">var</span> User = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">User</span>(<span class="hljs-params">id, firstName, lastName</span>) </span>{
        <span class="hljs-keyword">this</span>.id = id
        <span class="hljs-keyword">this</span>.firstName = firstName
        <span class="hljs-keyword">this</span>.lastName = lastName
    }

    User.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName.toUpperCase()
    }

    <span class="hljs-keyword">return</span> User
}())</code></div><small class="shcb-language" id="shcb-language-17"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>But instead of writing old, verbose, ugly and potentially buggy code, it is common to <strong>transpile</strong> from recent syntax to older one. That the purpose of <a href="https://babeljs.io/" target="_blank" rel="noreferrer noopener">babeljs</a>, which can work as a plugin for webpack. This will be one of your next job 🤗.</p>



<ul><li>Fixing a <strong>missing feature</strong> issue is more complicated depending on your use case. You cannot implement yourself the support of NFC hardware if the browser does not have this feature. But you can implement yourself some utility methods introduced recently.</li></ul>



<p>Let&rsquo;s suppose your code uses the <code>array.includes(item)</code> methods, which returns <code>true</code> if <code>item</code> is in <code>array</code>. This method has been introduced in ES7 (released in 2016).</p>



<p>That method can easily be implemented with a one-liner snippet. Then, you can add it to the Array&rsquo;s prototype and make it callable on any array instance.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-18" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// ⛔️ you CANNOT use [1, 2, 3].includes(2) on old browser</span>

<span class="hljs-built_in">Array</span>.prototype.includes = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">search</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.indexOf(search) !== <span class="hljs-number">-1</span>
}

<span class="hljs-comment">// 🚀 you CAN use [1, 2, 3].includes(2) (if array.indexOf() is supported)</span></code></div><small class="shcb-language" id="shcb-language-18"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Tips</strong>: Extending prototypes is generally a bad practice as it leads to conflicts with someone else&rsquo;s code using the same name. Nevertheless, it is allowed to backport missing standard methods (as long as it strictly behaves the same way). Those backported methods are called <strong>polyfills</strong>. Also, the community shares npm package with ready to import polyfills, like the popular <a href="https://github.com/zloirock/core-js" target="_blank" rel="noreferrer noopener">core-js</a>.</p>



<p class="has-text-align-center">***</p>



<p>For the next questions, you need an obsolete browser. More exactly, we will use Internet Explorer 11. If not available on your system, you can:</p>



<ol><li>run a free IE 11 instance on the cloud with <a href="https://www.browserling.com/" target="_blank" rel="noreferrer noopener">browserling.com</a> ;</li><li>forward your local HTTP server with <a href="https://ngrok.com/" target="_blank" rel="noreferrer noopener">ngrok.com</a>.</li></ol>



<p><strong>Tips</strong>: If you need to set up browserling + ngrok combo before the teacher demonstrated their usage, notify him!</p>



<p class="has-text-align-center">***</p>



<p class="exercice"><strong>Exercise 10</strong>: Try the bundled app with Internet Explorer 11. Why IE does it fail to run the bundled app?</p>



<p class="exercice"><strong>Exercice 11</strong>: The following webpack&rsquo;s configuration sends every <code>.js</code> to <code>babel-loader</code>. Babel transforms any syntax not supported by IE 11. Is it enough to ensure compatibility with IE? Why?</p>


<pre class="wp-block-code" aria-describedby="shcb-language-19" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// updated webpack.config.js that integrates babel to assets pipeline.</span>
<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)

<span class="hljs-built_in">module</span>.exports = {
  <span class="hljs-attr">entry</span>: <span class="hljs-string">'./src/index.js'</span>,
  <span class="hljs-attr">mode</span>: <span class="hljs-string">'development'</span>,
  <span class="hljs-attr">target</span>: [<span class="hljs-string">'web'</span>, <span class="hljs-string">'es5'</span>],
  <span class="hljs-attr">output</span>: {
    <span class="hljs-attr">path</span>: path.resolve(__dirname, <span class="hljs-string">'dist'</span>),
    <span class="hljs-attr">filename</span>: <span class="hljs-string">'index.js'</span>
  },
  <span class="hljs-attr">module</span>: {
    <span class="hljs-attr">rules</span>: [
      {
        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.m?js$/</span>,
        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,
        <span class="hljs-attr">use</span>: {
          <span class="hljs-attr">loader</span>: <span class="hljs-string">'babel-loader'</span>,
          <span class="hljs-attr">options</span>: {
            <span class="hljs-attr">targets</span>: <span class="hljs-string">'ie &gt;= 11'</span>,
            <span class="hljs-attr">presets</span>: [<span class="hljs-string">'@babel/preset-env'</span>]
          }
        }
      }
    ]
  }
}</code></div><small class="shcb-language" id="shcb-language-19"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>You also need in import the babel utilties (transformed code uses them):</p>


<pre class="wp-block-code" aria-describedby="shcb-language-20" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// add this at the beginning of index.js</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'regenerator-runtime/runtime'</span></code></div><small class="shcb-language" id="shcb-language-20"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercice 12</strong>: Import the required polyfills from <a href="https://github.com/zloirock/core-js" target="_blank" rel="noreferrer noopener">core-js</a> and <a href="https://github.com/github/fetch" target="_blank" rel="noreferrer noopener">whatwg-fetch</a> in <code>index.js</code>. Now, the app should work on IE 11.</p>



<p class="exercice"><strong>Exercise 13</strong>: List at least 2 issues of transpiling the code and adding polyfills like we did. Try to mention a mitigation or a solution for each issue.</p>



<h4>Hey! Still alive?</h4>



<p>Congratulations for going so far! Despite there is still a lot uncovered learning outcomes, you have completed the mandatory part. The rest of the topics will be explained by the teacher at the end of the activity.</p>



<p>In case you are ahead of time, feel free to reach yourself the above goals:</p>



<ol><li>Catch some code smells and improved code formatting with <a href="https://standardjs.com/" target="_blank" rel="noreferrer noopener">standard.js</a>.</li><li>Generate documentation using JSDoc.</li><li>Test the quality of autocomplete with vscode, intellisense and JSDoc.</li><li>Catch errors using types described in JSDoc comments with the typescript compiler in JS-compatible mode.</li><li>Improve debugging experience for transformed code with source-maps.</li></ol>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-practical-activity-n2/">11. JavaScript: practical activity n°2</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>10. JavaScript: classes</title>
		<link>https://thomas-veillard.fr/front-end-web-development/languages/javascript-classes/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:46 +0000</pubDate>
				<category><![CDATA[02. Languages]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2849</guid>

					<description><![CDATA[<p>The class keyword was introduced in ES6 (2015 revision of the ESMAScript Standard). It is a syntactical sugar to easily create classes. Despite JavaScript is an Object-Oriented language from the beginning, the old way to declare a class is a bit tricky. That the reason this guide focuses on ES6+. We will discuss the older &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-classes/" class="more-link">Continuer la lecture de <span class="screen-reader-text">10. JavaScript: classes</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-classes/">10. JavaScript: classes</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>The <code>class</code> keyword was introduced in ES6 (2015 revision of the ESMAScript Standard). It is a syntactical sugar to easily create classes.</p>



<p>Despite JavaScript is an <strong>Object-Oriented</strong> language from the beginning, the old way to declare a class is a bit tricky. That the reason this guide focuses on ES6+. We will discuss the older browser compatibility in a future lesson.</p>



<p>As expressed in the <a href="https://thomas-veillard.fr/front-end-web-development/introduction/introduction/">Introduction&rsquo;s Prerequires</a>, I assume you are familiar with the object-oriented paradigm and will focus on the implementation details for JavaScript.</p>



<h4>Class constructor</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-21" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
    <span class="hljs-keyword">constructor</span>(id, startDate, endDate, title) {
        <span class="hljs-keyword">this</span>.id = id
        <span class="hljs-keyword">this</span>.startDate = startDate
        <span class="hljs-keyword">this</span>.endDate = endDate
        <span class="hljs-keyword">this</span>.title = title
    }
}

<span class="hljs-keyword">const</span> start = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T08:00:00'</span>)
<span class="hljs-keyword">const</span> end = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T09:30:00'</span>)
<span class="hljs-keyword">const</span> calendarEvent = <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-number">1</span>, start, end, <span class="hljs-string">'Prepare lessons'</span>)</code></div><small class="shcb-language" id="shcb-language-21"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>The constructor is a special function called <code>constructor</code> inside the class definition. It is unique and optional.</p>



<p>It is called every time a new instance (ex.  <code>calendarEvent</code>) is created via the <code>new</code> operator. Its responsibility is to initialise the instance (ex. here, it sets <code>id</code>, <code>startDate</code>, <code>endDate</code> and <code>title</code> instance properties).</p>



<h4>Instance properties</h4>



<p>In the previous example, a few properties are initialised in the constructor. Those properties are publicly accessible using the same syntax as literal objects.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-22" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> calendarEvent = <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-number">1</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'Prepare lessons'</span>)

<span class="hljs-comment">// assignation to an instance property</span>
calendarEvent.startDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T08:00:00'</span>)

<span class="hljs-comment">// both accesses `startDate` and assigns `endDate`</span>
calendarEvent.endDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(calendarEvent.startDate.getTime() + <span class="hljs-number">1</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>)

<span class="hljs-comment">// dynamically access a property by name</span>
<span class="hljs-keyword">const</span> propertyName = <span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.5</span> ? <span class="hljs-string">'startDate'</span> : <span class="hljs-string">'endDate'</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Event <span class="hljs-subst">${propertyName}</span> is <span class="hljs-subst">${calendarEvent[propertyName].toISOString()}</span>`</span>)</code></div><small class="shcb-language" id="shcb-language-22"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Due to the dynamic nature of JavaScript, the instance&rsquo;s property list is not frozen. You can add or delete any keys at any moment.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-23" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> calendarEvent = <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-number">1</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'Prepare lessons'</span>)

<span class="hljs-comment">// notYetExistingAttribute property is created on demand</span>
calendarEvent.notYetExistingAttribute = <span class="hljs-string">'now, it exists'</span>

<span class="hljs-comment">// non existing attributes are just evaluated as `undefined`</span>
<span class="hljs-built_in">console</span>.log(calendarEvent.stillNotYetExists)

<span class="hljs-comment">// this makes JavaScript prone to typo-errors and may lead to silent bugs</span>
<span class="hljs-built_in">console</span>.log(calendarEvent.tiitle) <span class="hljs-comment">// `undefined`, yes it is...</span>

<span class="hljs-comment">// this delete a key</span>
<span class="hljs-keyword">delete</span> calendarEvent.notYetExistingAttribute</code></div><small class="shcb-language" id="shcb-language-23"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Tips</strong>: typo errors are difficult to detect. If your IDE implements static code analysis (such as Intellisense for VSCode), it may provide powerful autocompletion. That reduces the risk of a typo error at the time of writing the code.</p>



<p><strong>Opinion</strong>: I switched all my projects from JavaScript to <strong>TypeScript</strong> to early catch those bugs. TypeScript is a superset of JavaScript with static type checks and a powerful compiler. The TypeScript ecosystem is a great foundation for writing <strong>maintainable</strong> JavaScript. Of course, learning curse from JavaScript to TypeScript is smooth. 🎉 Also, I grant bonus points for students using it. 🎉</p>



<h4>Instance methods</h4>



<p>Methods are functions declared inside the class and are executed in the context of an instance. The instance on which the method is currently called is referenced as <code>this</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-24" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
    <span class="hljs-keyword">constructor</span>(id, startDate, endDate, title) {
        <span class="hljs-keyword">this</span>.id = id
        <span class="hljs-keyword">this</span>.startDate = startDate
        <span class="hljs-keyword">this</span>.endDate = endDate
        <span class="hljs-keyword">this</span>.title = title
    }

    getDuration(unit) {
        <span class="hljs-keyword">const</span> durationMs = <span class="hljs-keyword">this</span>.endDate.getTime() - <span class="hljs-keyword">this</span>.startDate.getTime()

        <span class="hljs-keyword">switch</span> (unit) {
            <span class="hljs-keyword">case</span> <span class="hljs-string">'ms'</span>: <span class="hljs-keyword">return</span> durationMs
            <span class="hljs-keyword">case</span> <span class="hljs-string">'s'</span>: <span class="hljs-keyword">return</span> durationMs / <span class="hljs-number">1000</span>
            <span class="hljs-keyword">case</span> <span class="hljs-string">'min'</span>: <span class="hljs-keyword">return</span> durationMs / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>
            <span class="hljs-keyword">case</span> <span class="hljs-string">'h'</span>: <span class="hljs-keyword">return</span> durationMs / <span class="hljs-number">1000</span> / <span class="hljs-number">3600</span>
            <span class="hljs-attr">default</span>: <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`Unsupported unit <span class="hljs-subst">${unit}</span>`</span>)
        }
    }
}

<span class="hljs-keyword">const</span> start = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T08:00:00'</span>)
<span class="hljs-keyword">const</span> end = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T09:30:00'</span>)
<span class="hljs-keyword">const</span> calendarEvent = <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-number">1</span>, start, end, <span class="hljs-string">'Prepare lessons'</span>)
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Event's duration in hours:"</span>, calendarEvent.getDuration(<span class="hljs-string">'h'</span>))</code></div><small class="shcb-language" id="shcb-language-24"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Static properties</h4>



<p>An instance property is accessible on the instance itself. At the opposite, a class property is accessible from the class.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-25" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// accesses the instance attribute</span>
<span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-comment">/* ... */</span>).instanceAttribute

<span class="hljs-comment">// accesses the class attribute</span>
CalendarEvent.classAttribute</code></div><small class="shcb-language" id="shcb-language-25"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Tips: </strong>I recommend to initialise class attributes immediately after the class definition.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-26" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{ <span class="hljs-comment">/* */</span> }
CalendarEvent.lastGeneratedId = <span class="hljs-number">0</span></code></div><small class="shcb-language" id="shcb-language-26"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Despite the fact that functions are accessible and callable before the declaration, class declaration must be run before being referenced anywhere.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-27" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// Throws Uncaught ReferenceError: CalendarEvent is not defined</span>
CalendarEvent.lastGeneratedId = <span class="hljs-number">0</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{ <span class="hljs-comment">/* */</span> }</code></div><small class="shcb-language" id="shcb-language-27"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Static methods</h4>



<p>Static methods are called against the class instead an instance. They are declared with the <code>static</code> modifier.</p>



<p>Inside the static method&rsquo;s body, the current class is referenced as <code>this</code>. Use it to call another static method from that class or even the constructor.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-28" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-keyword">constructor</span> (id, startDate, endDate, title) {
    <span class="hljs-keyword">this</span>.id = id
    <span class="hljs-keyword">this</span>.startDate = startDate
    <span class="hljs-keyword">this</span>.endDate = endDate
    <span class="hljs-keyword">this</span>.title = title
  }

  <span class="hljs-comment">/**
   * Parses the ical VEVENT definition and returns a new instance.
   * For now, it returns a mock CalendarEvent instance for demonstration purpose.
   */</span>
  <span class="hljs-keyword">static</span> fromIcalEvent (ical) {
    <span class="hljs-comment">// In the context of a static method, `this` references the class itself.</span>
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span> === CalendarEvent) <span class="hljs-comment">// true</span>

    <span class="hljs-comment">// `this` can be used as constructor here</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">this</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)
  }
}

<span class="hljs-keyword">const</span> icalText = <span class="hljs-string">`
BEGIN:VEVENT
DTSTAMP:19960704T120000Z
UID:uid1@example.com
ORGANIZER:mailto:jsmith@example.com
DTSTART:19960918T143000Z
DTEND:19960920T220000Z
STATUS:CONFIRMED
SUMMARY:Prepare teaching
DESCRIPTION:Write lessons and publish them online.
END:VEVENT
`</span>.trim()

<span class="hljs-keyword">const</span> calendarEvent = CalendarEvent.fromIcalEvent(icalText)</code></div><small class="shcb-language" id="shcb-language-28"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Side note:</strong> in JavaScript, a static method is like a static attribute of type &lsquo;function&rsquo;. Even the <code>this</code> behaviour is the same.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-29" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// alternative way to declare a static method</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{ <span class="hljs-comment">/** **/</span> }
CalendarEvent.fromIcalEvent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ical</span>) </span>{
  <span class="hljs-comment">// In the context of a static method, `this` references the class itself.</span>
  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span> === CalendarEvent) <span class="hljs-comment">// true</span>

  <span class="hljs-comment">// `this` can be used as constructor here</span>
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">this</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)
}

<span class="hljs-built_in">console</span>.log(CalendarEvent.fromIcalEvent(<span class="hljs-string">''</span>))</code></div><small class="shcb-language" id="shcb-language-29"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Inheritance</h4>



<p>Let&rsquo;s build a special kind of <code>CalendarEvent</code> I will call <code>TeachingEvent</code>. This one will represent a teaching lesson with a potential graduation and additional teaching resources (ex. lecture slides).</p>


<pre class="wp-block-code" aria-describedby="shcb-language-30" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-keyword">constructor</span> (id, startDate, endDate, title) {
    <span class="hljs-keyword">this</span>.id = id
    <span class="hljs-keyword">this</span>.startDate = startDate
    <span class="hljs-keyword">this</span>.endDate = endDate
    <span class="hljs-keyword">this</span>.title = title
  }

  <span class="hljs-keyword">static</span> fromIcalEvent (ical) {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> <span class="hljs-comment">// body cleared in example for readability</span>
  }

  getDurationInHours () {
    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.endDate.getTime() - <span class="hljs-keyword">this</span>.startDate.getTime()) / <span class="hljs-number">1000</span> / <span class="hljs-number">3600</span>
  }
}

<span class="hljs-comment">/**
* TeachingEvent represents a teaching lesson.
* It extends CalendarEvent (has a id, startDate, endDate and title).
* In addition, it may be graduated (hasAssessment = true) or not (hasAssessment = false).
* Additional resources may be available online on Moodle (moddleUrl = 'https://.../').
*/</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeachingEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-keyword">constructor</span> (id, startDate, endDate, title, hasAssessment, moodleUrl) {
    <span class="hljs-comment">// call the parent constructor. super() call must be the first instruction.</span>
    <span class="hljs-keyword">super</span>(id, startDate, endDate, title)

    <span class="hljs-comment">// assigns the new attributes not handled in parent class</span>
    <span class="hljs-keyword">this</span>.hasAssessment = hasAssessment
    <span class="hljs-keyword">this</span>.moodleUrl = moodleUrl
  }
}</code></div><small class="shcb-language" id="shcb-language-30"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Let&rsquo;s analyse the previous code snippet:</p>



<ul><li>You just need the <code>extends</code> keyword inside child class declaration.</li><li>Parent&rsquo;s constructor and methods are available through the <code>super</code> keyword.</li><li>The child constructor must pass arguments to the parent one (too verbose ?).</li></ul>



<p>Now, let&rsquo;s see what has been inherited:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-31" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> start = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T08:00:00'</span>)
<span class="hljs-keyword">const</span> end = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T09:30:00'</span>)
<span class="hljs-keyword">const</span> teachingEvent = <span class="hljs-keyword">new</span> TeachingEvent(<span class="hljs-number">1</span>, start, end, <span class="hljs-string">'How JS classes works'</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>)

<span class="hljs-comment">// instance properties are inherited</span>
<span class="hljs-built_in">console</span>.log(teachingEvent.id)

<span class="hljs-comment">// instance methods are inherited</span>
<span class="hljs-built_in">console</span>.log(teachingEvent.getDurationInHours())

<span class="hljs-comment">// static methods are inherited as well.</span>
<span class="hljs-comment">// `this` in method's body references the class used to invoke it.</span>
TeachingEvent.fromIcalEvent(<span class="hljs-string">''</span>) <span class="hljs-comment">// outputs TeachingEvent</span>
CalendarEvent.fromIcalEvent(<span class="hljs-string">''</span>) <span class="hljs-comment">// outputs CalendarEvent</span></code></div><small class="shcb-language" id="shcb-language-31"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Tips: </strong> constructors with a lot of arguments may become difficult to invoke or extend. You run at risk of missing a parameter, confusing the order, etc. In such cases, literal objects and object destructuring are profitable. That is particalry true if many properties are nullable, optional or with default values.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-32" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-keyword">constructor</span> ({ id, startDate, endDate, title }) {
    <span class="hljs-keyword">this</span>.id = id
    <span class="hljs-keyword">this</span>.startDate = startDate
    <span class="hljs-keyword">this</span>.endDate = endDate
    <span class="hljs-keyword">this</span>.title = title || <span class="hljs-literal">null</span>
  }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeachingEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-keyword">constructor</span> (params) {
    <span class="hljs-keyword">super</span>(params)
    <span class="hljs-keyword">this</span>.hasAssessment = params.hasAssessment ?? <span class="hljs-literal">false</span>
    <span class="hljs-keyword">this</span>.moodleUrl = params.moodleUrl || <span class="hljs-literal">null</span>
  }
}

<span class="hljs-keyword">const</span> startDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T08:00:00'</span>)
<span class="hljs-keyword">const</span> endDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T09:30:00'</span>)

<span class="hljs-comment">// title, hasAssessment, moodleUrl have default values, so may be omitted.</span>
<span class="hljs-comment">// Properties are well named, so there is no risk of ordering issues.</span>
<span class="hljs-comment">// Later, it is simpler to drop or add a parameter to the constructor.</span>
<span class="hljs-keyword">const</span> teachingEvent = <span class="hljs-keyword">new</span> TeachingEvent({ <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, startDate, endDate })</code></div><small class="shcb-language" id="shcb-language-32"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Ascessors (getters &amp; setters)</h4>



<h5>Please, do not write Java-style ascessors 🙏</h5>



<p>The previous year, some students systematically added <code>getX</code> and <code>setX</code> methods to every class they built. It may make sense in other languages, such as Java, but not in JavaScript. Getters and setters are defined another way&#8230;</p>


<pre class="wp-block-code" aria-describedby="shcb-language-33" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// DON'T: those are Java-style ascessors</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-comment">/** ... */</span>

  getId () {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.id
  }

  setId (id) {
    <span class="hljs-keyword">this</span>.id = id
  }

  getStartDate () {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.startDate
  }

  setStateDate (startDate) {
    <span class="hljs-keyword">this</span>.startDate = startDate
  }
}</code></div><small class="shcb-language" id="shcb-language-33"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Now, let&rsquo;s see why this is not adapted to JavaScript:</p>



<ol><li>JavaScript has a special syntax for writing assessors.</li><li>Outside the class, those assessors looks like normal properties. So, you can replace a property by a read-only getter without syntaxically break the code.</li><li>It unnecessary makes your code more verbose, which imply performance issues. Remember you code should be downloaded and executed by the browser everytime a page is loaded.</li><li>(<em>This assertion will become obselete in future version of JS</em>). Until very recently, there were no concept of <code>private</code> properties. So, the caller was always able to access and mutate the underlying attributes, making the class-encapsulation principal hardly applicable.</li></ol>



<h5>Ascessors example in JavaScript</h5>



<p>Using ascessors, I changed the <code>CalendarEvent</code> class, so:</p>



<ul><li>The property <code>id</code> is initialised in the constructor and is publicly readable but not writable. </li><li>A virtual <code>duration</code> property is both publicly writable and writable. In fact, the getter computes duration in milliseconds as <code>endDate</code> &#8211; <code>startDate</code>. The setter mutates <code>endDate</code>.</li></ul>


<pre class="wp-block-code" aria-describedby="shcb-language-34" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-keyword">constructor</span> ({ id, startDate, endDate }) {
    <span class="hljs-comment">// By convention, JS developers know fields with '_' are internal.</span>
    <span class="hljs-comment">// Starting from ES2021, using a '#' as prefix will really make it private.</span>
    <span class="hljs-comment">// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields</span>
    <span class="hljs-keyword">this</span>._id = id
    <span class="hljs-keyword">this</span>.startDate = startDate
    <span class="hljs-keyword">this</span>.endDate = endDate
  }

  <span class="hljs-keyword">get</span> id () {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>._id
  }

  <span class="hljs-comment">/**
   * Without a setter, calling `calendarEvent.id = 1`  does nothing:
   * - no change to the instance's properties;
   * - no warning or error emitted.
   * 
   * Not that a getter can be defined without the corresponding setter, and vis-versa.
   */</span>
  <span class="hljs-keyword">set</span> id (_) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Cannot set id for CalendarEvent'</span>)
  }

  <span class="hljs-keyword">get</span> duration () {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.endDate.getTime() - <span class="hljs-keyword">this</span>.startDate.getTime()
  }

  <span class="hljs-keyword">set</span> duration (duration) {
    <span class="hljs-keyword">this</span>.endDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-keyword">this</span>.startDate.getTime() + duration)
  }
}</code></div><small class="shcb-language" id="shcb-language-34"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Then, you can use <code>id</code> and <code>duration</code> virtual attributes with a convenient syntax.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-35" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> startDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T08:00:00'</span>)
<span class="hljs-keyword">const</span> endDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T09:30:00'</span>)
<span class="hljs-keyword">const</span> calendarEvent = <span class="hljs-keyword">new</span> CalendarEvent({ <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, startDate, endDate })

<span class="hljs-built_in">console</span>.log(calendarEvent.id) <span class="hljs-comment">// prints 1</span>
calendarEvent.id = <span class="hljs-number">2</span> <span class="hljs-comment">// throws "Cannot set id for CalendarEvent"</span>

<span class="hljs-built_in">console</span>.log(calendarEvent.duration) <span class="hljs-comment">// prints 5400000 ms (1.5h * 3600 s/h * 1000ms/s)</span>
calendarEvent.duration -= <span class="hljs-number">30</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> <span class="hljs-comment">// substract 30 minutes to duration.</span>
<span class="hljs-built_in">console</span>.log(calendarEvent.endDate) <span class="hljs-comment">// prints '2021-07-31T09:00:00'</span>

calendarEvent._id = <span class="hljs-number">2</span> <span class="hljs-comment">// still possible, but a JS developer knows it is ugly</span></code></div><small class="shcb-language" id="shcb-language-35"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Bonus: any function is also a class&#8230;</h4>



<p>For your personal information, classes were added to the language in 2015 (revision ES6, aka ES2015). But JavaScript is an Object-Oriented language from the beginning&#8230; That is strange, isn&rsquo;t it ?</p>



<p>Without going deeply into that topic, just look at the following example:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-36" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// My function name starts with a capital letter only</span>
<span class="hljs-comment">// because it is semantically a class. More exactly,</span>
<span class="hljs-comment">// it is the constructor of the class.</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CalendarEvent</span> (<span class="hljs-params">id</span>) </span>{
  <span class="hljs-keyword">this</span>.id = id
}

<span class="hljs-keyword">const</span> calendarEvent = <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-number">1</span>)
<span class="hljs-built_in">console</span>.log(calendarEvent.id) <span class="hljs-comment">// prints 1</span></code></div><small class="shcb-language" id="shcb-language-36"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>For the rest, please refer yourself to that post: <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes" target="_blank" rel="noreferrer noopener">JS, a prototype-based language?</a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-classes/">10. JavaScript: classes</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
