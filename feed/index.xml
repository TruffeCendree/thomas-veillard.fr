<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/</link>
	<description>Mes cours et supports p√©dagogiques pour l&#039;enseignement de l&#039;ing√©nierie informatique.</description>
	<lastBuildDate>Sun, 18 Jul 2021 12:10:10 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<item>
		<title>5. Que peut faire le web aujourd&#8217;hui ?</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 20 Feb 2021 10:43:49 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[D√©veloppement web c√¥t√© client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1973</guid>

					<description><![CDATA[<p>Lorsqu&#8217;on fait r√©f√©rence √† HTML5, on pense d&#8217;abord √† une certaine version du langage de balise utilis√© pour structurer les contenus. Toutefois, ce nom d√©signe aussi l&#8217;ensemble des HTML5 API. Vous trouverez un aper√ßu de ces nombreuses fonctionnalit√©s sur le site¬†https://whatwebcando.today./ Vous pourriez d√©couvrir par exemple que votre application peut d√©l√©guer le processus de paiement &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/" class="more-link">Continuer la lecture de <span class="screen-reader-text">5. Que peut faire le web aujourd&#8217;hui ?</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/">5. Que peut faire le web aujourd&rsquo;hui ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Lorsqu&rsquo;on fait r√©f√©rence √† HTML5, on pense d&rsquo;abord √† une certaine version du langage de balise utilis√© pour structurer les contenus. Toutefois, ce nom d√©signe aussi l&rsquo;ensemble des <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5" target="_blank" rel="noreferrer noopener">HTML5 API</a>. </p>



<p>Vous trouverez un aper√ßu de ces nombreuses fonctionnalit√©s sur le site¬†<a href="https://whatwebcando.today/" target="_blank" rel="noreferrer noopener">https://whatwebcando.today/</a>. Vous pourriez d√©couvrir par exemple que votre application peut d√©l√©guer le processus de paiement √† votre navigateur !</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="658" height="515" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Your-browser-can-process-payments.png" alt="" class="wp-image-1790" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/02/Your-browser-can-process-payments.png 658w, https://thomas-veillard.fr/wp-content/uploads/2021/02/Your-browser-can-process-payments-300x235.png 300w" sizes="(max-width: 658px) 100vw, 658px" /><figcaption>D√©monstration de la <a href="https://whatwebcando.today/payments.html" target="_blank" rel="noreferrer noopener">Payments API</a>, qui permet au site web de d√©l√©guer tout le processus de commande et de paiement en ligne. Cela inclut l&rsquo;affichage du d√©tail des prix, l&rsquo;enregistrement des cartes bancaires et le traitement du paiement.</figcaption></figure>



<h4>Exemple d&rsquo;APIs exploitant le r√©seau</h4>



<p>De nos jours, les applications web peuvent √©mettre et recevoir en temps r√©el des messages du serveur. En fonction de vos besoins, vous pourriez utiliser :</p>



<ul><li>Les <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" target="_blank" rel="noreferrer noopener">WebSockets</a> pour une communication √† double sens ;</li><li>Les <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events" target="_blank" rel="noreferrer noopener">server-sent events</a> pour recevoir des notifications depuis le serveur (unidirectionnel et l&rsquo;infrastructure est plus simple que les websockets).</li></ul>



<h4>Exemples d&rsquo;API pour le multim√©dia</h4>



<p>Votre navigateur supporte √† coup s√ªr la visioconf√©rence gr√¢ce √† l&rsquo;API <a href="https://developer.mozilla.org/fr/docs/WebRTC" target="_blank" rel="noreferrer noopener">WebRTC</a>. Celle-ci permet la r√©ception et diffusion de flux en temps r√©el et tire avantage des codecs et enregistrements de flux expos√©s par d&rsquo;autres API (cam√©ra, microphone, voire partage d&rsquo;√©cran).</p>



<p>Toujours sur le plan des traitements multim√©dias, le navigateur sait proc√©der √† des rendus 2D et 3D acc√©l√©r√©s par carte graphique gr√¢ce √† la <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="noreferrer noopener">Canvas API</a> et la <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API" target="_blank" rel="noreferrer noopener">WebGL API</a>.</p>



<h4>Votre navigateur est un v√©ritable moteur de bases de donn√©es</h4>



<p>Il y a plusieurs fa√ßons de sauvegarder des donn√©es c√¥t√© client. Entre autres :</p>



<ul><li>Les <a href="https://developer.mozilla.org/fr/docs/Web/HTTP/Cookies" target="_blank" rel="noreferrer noopener">cookies</a> sont de petits fichiers textes que le serveur d√©pose dans le navigateur. Celui-ci les renvoie syst√©matiquement lors de futures requ√™tes HTTP(s) vers les domaines autoris√©s.</li><li>Les <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer noopener">localStorage</a> et <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage" target="_blank" rel="noreferrer noopener">sessionStorage</a> sont des bases de donn√©es cl√©s/valeurs destin√©es √† conserver de petits volumes de donn√©es. Des objets plus complexes peuvent √™tre enregistr√©s s&rsquo;ils sont s√©rialis√©s avec <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/JSON/stringify" target="_blank" rel="noreferrer noopener">JSON.stringify</a> par exemple.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noreferrer noopener">IndexedDB</a> est une base de donn√©es relationnelle et transactionnelle dans laquelle vous pouvez sauvegarder plusieurs gigaoctets de donn√©es ü§©. √Ä partir d&rsquo;un certain volume (d√©pendant du navigateur), l&rsquo;application devra demander le consentement de l&rsquo;utilisateur.</li></ul>



<h4>En conclusion</h4>



<p>Le navigateur est un environnement d&rsquo;ex√©cution tr√®s riche en fonctionnalit√©s. Chacune d&rsquo;elles est impl√©ment√©e dans le respect de standards, dont notamment les HTML5 API Standards.</p>



<p>Malheureusement, votre base d&rsquo;utilisateur est h√©t√©rog√®ne. Avant d&#8217;employer toute solution, vous devriez v√©rifier son taux d&rsquo;adoption par le march√©. Le r√©f√©rentiel <a href="https://caniuse.com/" target="_blank" rel="noreferrer noopener">https://caniuse.com/</a> vous y aidera. Il agr√®ge les parts de march√© de chaque navigateur, version par version.</p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/">5. Que peut faire le web aujourd&rsquo;hui ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>4. Utiliser les technologies web pour construire autre chose qu&#8217;un site.</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 20 Feb 2021 09:22:35 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[D√©veloppement web c√¥t√© client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1944</guid>

					<description><![CDATA[<p>Pour les ordinateurs de bureau et les t√©l√©phones Puisque les technologies du web front-end sont si pratiques pour la construction d&#8217;interfaces, les d√©veloppeurs ont mis au point des stratag√®mes afin de les utiliser dans d&#8217;autres contextes. En particulier, ils souhaitent en user pour leurs applications sur PC, tablettes et t√©l√©phones. Peu importe la plateforme, l&#8217;id√©e &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/" class="more-link">Continuer la lecture de <span class="screen-reader-text">4. Utiliser les technologies web pour construire autre chose qu&#8217;un site.</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/">4. Utiliser les technologies web pour construire autre chose qu&rsquo;un site.</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Pour les ordinateurs de bureau et les t√©l√©phones</h4>



<p>Puisque les technologies du web front-end sont si pratiques pour la construction d&rsquo;interfaces, les d√©veloppeurs ont mis au point des stratag√®mes afin de les utiliser dans d&rsquo;autres contextes. En particulier, ils souhaitent en user pour leurs applications sur PC, tablettes et t√©l√©phones. </p>



<p>Peu importe la plateforme, l&rsquo;id√©e est souvent la m√™me. Il s&rsquo;agit d&rsquo;√©crire une application en HTML/CSS/JS et de l&#8217;empaqueter dans une webview. Tous les √©l√©ments relatifs √† l&rsquo;interface d&rsquo;un navigateur classique sont masqu√©s (pas de barre d&rsquo;adresse, de bouton de retour, etc.). L&rsquo;int√©gration avec le syst√®me est aussi renforc√©e gr√¢ce √† de nouvelles APIs.</p>



<p>Une fois empaquet√©e, l&rsquo;application propose une exp√©rience similaire aux autres logiciels. Elle peut fournir un programme d&rsquo;installation autonome (sous Windows ou MacOS), un paquet (.deb sous Debian, .rpm sous RHEL) ou une diffusion sur les boutiques (Google Play, App Store).</p>



<blockquote class="wp-block-quote"><p>Write once, run everywhere. üéâ</p><cite>Il s&rsquo;agit √† l&rsquo;origine du <a href="https://en.wikipedia.org/wiki/Write_once,_run_anywhere" target="_blank" rel="noreferrer noopener">slogan de Java</a>.</cite></blockquote>



<p>Cette citation r√©sume un autre b√©n√©fice de mutualiser la base de code entre plusieurs impl√©mentations (ex. un site web, une application PC et t√©l√©phone). Vous n&rsquo;avez alors qu&rsquo;une seule base de code et plusieurs cibles de construction. En cons√©quence, toute nouveaut√© ou correction est imm√©diatement disponible sur ces plateformes. Toutefois, rien ne vous emp√™che d&rsquo;activer conditionnellement certaines fonctionnalit√©s en fonction de la plateforme.</p>



<p>Les utilisateurs pourraient exiger davantage de fonctionnalit√©s d&rsquo;une application install√©e en comparaison √† sa version site. Electron et Cordova vous offrent cette possibilit√© via une plus forte int√©gration avec le syst√®me et des API suppl√©mentaires. Ce n&rsquo;est envisageable uniquement car Cordova et Electron font confiance √† votre code, contrairement √† un navigateur qui doit s&rsquo;en prot√©ger.</p>



<p>En effet, le navigateur fait face √† des enjeux de s√©curit√©. Il consid√®re chaque site comme un programme non fiable, voire potentiellement malveillant. Les m√©canismes de protection sont nombreux : sandbox, demande de permissions, API restreintes, etc. C&rsquo;est typiquement pour cette raison que le syst√®me de fichier n&rsquo;est pas expos√© √† un site web, mais pleinement accessible dans le contexte d&rsquo;Electron.</p>



<h4>Pour le terminal (ligne de commande) et les serveurs</h4>



<p>De nos jours, Javascript peut s&rsquo;ex√©cuter en dehors d&rsquo;un navigateur. Node.js est l&rsquo;environnement de r√©f√©rence. Il est bas√© sur le moteur V8 de Chromium qu&rsquo;il √©tend avec de nouvelles API. De nombreux outils en ligne de commandes et serveurs HTTP s&rsquo;en servent.</p>



<p>Pour les d√©veloppeurs, utiliser le m√™me langage entre le front-end et back-end am√©liore nettement la productivit√©. C&rsquo;est aussi un chemin rapide pour devenir ¬´¬†full-stack¬†¬ª.</p>



<ul><li>Il n&rsquo;y a qu&rsquo;un seul √† langage et √©cosyst√®me √† ma√Ætriser (donc plus de temps pour approfondir le sujet).</li><li>La stack technique est consistante et des briques (code, d√©pendances&#8230;) peuvent √™tre mutualis√©es entre le front-end et le back-end.</li></ul>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/">4. Utiliser les technologies web pour construire autre chose qu&rsquo;un site.</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>3. √Ä quelle point cette interface est-elle √©labor√©e ?</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 20 Feb 2021 07:09:08 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[D√©veloppement web c√¥t√© client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1896</guid>

					<description><![CDATA[<p>La disposition et mise en page (layout) La disposition et la mise en page consistent √† dimensionner et positionner les blocs. La page de commande d&#8217;un nouveau serveur est compos√©e de 4 principaux blocs : l&#8217;ent√™te accueille l&#8217;identit√© du service (logo), le centre de notifications et la navigation vers les autres portails ; le menu &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/" class="more-link">Continuer la lecture de <span class="screen-reader-text">3. √Ä quelle point cette interface est-elle √©labor√©e ?</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/">3. √Ä quelle point cette interface est-elle √©labor√©e ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-image size-large"><img loading="lazy" width="1058" height="692" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/How-rich-can-be-a-web-ui-.gif" alt="" class="wp-image-1406"/><figcaption>L&rsquo;interface de gestion d&rsquo;Hetzner Cloud est un bel exemple de Single Page Application.</figcaption></figure>



<h4>La disposition et mise en page (layout)</h4>



<p>La disposition et la mise en page consistent √† dimensionner et positionner les blocs. La page de commande d&rsquo;un nouveau serveur est compos√©e de 4 principaux blocs :</p>



<ul><li>l&rsquo;ent√™te accueille l&rsquo;identit√© du service (logo), le centre de notifications et la navigation vers les autres portails ;</li><li>le menu de gauche permet de naviguer dans l&rsquo;interface de gestion du projet ;</li><li>le corps de la page (espace qui centralise l&rsquo;attention de l&rsquo;utilisateur) contient le formulaire ;</li><li>le pied de page flottant r√©sume l&rsquo;√©tat actuel de la commande.</li></ul>



<h4>Le formulaire dynamique</h4>



<p>Le formulaire lui-m√™me est hautement interactif. Les actions disponibles √† une √©tape d√©pendent d&rsquo;une combinaison de choix ant√©rieurs. Il ouvre des sous-formulaires dans des fen√™tres contextuelles, calcule et affiche le prix dans le pied de page, averti en cas de mauvaise configuration, etc. </p>



<p>Ponctuellement, Javascript collecte quelques informations aupr√®s du serveur comme la liste des volumes existants pour les proposer √† la s√©lection. Il n&rsquo;en demeure pas moins que l&rsquo;int√©gralit√© des calculs, de la construction de la page et de son rendu sont r√©alis√©s c√¥t√© client. Au moment o√π j&rsquo;√©cris cet article, la console est bas√©e sur Angular. Cela tombe bien, car nous utiliserons le m√™me cadriciel dans ce cours.</p>



<h4>Le style</h4>



<p>Le moteur de rendu du navigateur prend en charge les polices, les couleurs, les fonds color√©s ou textur√©s, les d√©grad√©s, les marges internes et externes, les bordures et leurs coins arrondis, le positionnement du texte et tant d&rsquo;autres √©l√©ments de style.</p>



<p>Imaginez un bloc sur fond jaune √† bordure marron, dont le texte est centr√© et les coins sont arrondis. Avec CSS, seulement quatre petites r√®gles sont requises. Mais combien de lignes de code vous faudrait-il pour produire le m√™me r√©sultat en manipulant directement un tableau 2D de pixels ?</p>



<style>
.my-rounded-block {
  background-color: #ffecb8;
  border: 1px solid #795548;
  border-radius: 3px;
  text-align: center;
}
</style>

<p class="my-rounded-block">Example of paragraph with background and rounded border.</p>



<div class="wp-block-columns">
<div class="wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="CSS" data-shcb-language-slug="css"><div><code class="hljs language-css"><span class="hljs-selector-class">.my-rounded-block</span> {
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffecb8</span>;
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#795548</span>;
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;
  <span class="hljs-attribute">text-align</span>: center;
}</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">CSS</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">css</span><span class="shcb-language__paren">)</span></small></pre></div>



<div class="wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-rounded-block"</span>&gt;</span>
  Example of paragraph with background and rounded border.
<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre></div>
</div>



<h4>Les animations</h4>



<p>Cr√©er une animation √† partir de z√©ro est difficile. Il faut poser des formules math√©matiques d√©crivant la transformation de la cible en fonction du temps. Ensuite, il faut calculer chacune des images tout en visant un d√©bit stable de 60 images par seconde. Cela implique beaucoup d&rsquo;optimisations, d&rsquo;autant plus que les animations peuvent coexister.</p>



<p>Heureusement, CSS3 vient encore une fois √† la rescousse. Il suffira de lui d√©crire les √©tats initiaux et finaux de l&rsquo;√©l√©ment √† animer. Le navigateur s&rsquo;occupe du reste, notamment du choix du mat√©riel le plus adapt√© (comme un acc√©l√©rateur graphique si disponible) et des √©ventuelles concessions pour maintenir un d√©bit d&rsquo;images satisfaisant.</p>



<p>Les animations donnent un retour √† l&rsquo;utilisateur, lui procurant le sentiment que l&rsquo;interface est r√©active et pr√™te √† accepter de nouvelles instructions.</p>



<ul><li>Le changement de couleur d&rsquo;un bouton au survol de la souris invite l&rsquo;utilisateur √† interagir avec.</li><li>Une animation de chargement l&rsquo;avertit que l&rsquo;application travaille normalement, m√™me si le r√©sultat est un peu long √† obtenir.</li></ul>



<p>Finalement, cet exemple d&rsquo;application illustre parfaitement l&rsquo;efficacit√© du couple HTML/CSS pour la construction d&rsquo;interfaces graphiques. Rien √† voir, donc, avec des dinosaures ü¶ñ comme swing de Java !</p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/">3. √Ä quelle point cette interface est-elle √©labor√©e ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>2. Pourquoi les technologies web sont-elles si populaires ?</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Wed, 17 Feb 2021 07:29:03 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[D√©veloppement web c√¥t√© client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1863</guid>

					<description><![CDATA[<p>Elles sont portables d‚Äôun OS √† l‚Äôautre. L‚Äôutilisateur final a juste besoin d‚Äôun navigateur. Les technologies web front-end ont avant tout √©t√© con√ßues pour les navigateurs. Ces derniers fonctionnent sur presque n&#8217;importe quel syst√®me d&#8217;exploitation. C&#8217;est aussi bien valable pour les PC (Windows, MacOS, GNU/Linux&#8230;) que les t√©l√©phones (iOS, Android&#8230;). Du moment que l&#8217;utilisateur final &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Pourquoi les technologies web sont-elles si populaires ?</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/">2. Pourquoi les technologies web sont-elles si populaires ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Elles sont portables d‚Äôun OS √† l‚Äôautre. L‚Äôutilisateur final a juste besoin d‚Äôun navigateur.</h4>



<p>Les technologies web front-end ont avant tout √©t√© con√ßues pour les navigateurs. Ces derniers fonctionnent sur presque n&rsquo;importe quel syst√®me d&rsquo;exploitation. C&rsquo;est aussi bien valable pour les PC (Windows, MacOS, GNU/Linux&#8230;) que les t√©l√©phones (iOS, Android&#8230;).</p>



<p>Du moment que l&rsquo;utilisateur final emploie un navigateur √† jour, il acqui√®re imm√©diatement l&rsquo;acc√®s √† toutes les applications publi√©es sur Internet sous la forme de sites web.</p>



<h4> Elles sont ma√Ætris√©es, matures et continuent d‚Äô√©voluer.</h4>



<p>Internet n&rsquo;est pas n√© hier. Ses acteurs ont appris de leurs exp√©riences et ont capitalis√© sur les technologies et les outils.</p>



<p>Aujourd&rsquo;hui, le web est plut√¥t r√©git par des standards (au moins pour les briques fondamentales).  Si votre application respecte elle-m√™me strictement ces standards, alors il est certain qu&rsquo;elle fonctionnera encore dans des d√©c√©nies.</p>



<p>Prenez pour exemple <a href="http://info.cern.ch/" target="_blank" rel="noreferrer noopener">le premier site jamais construit</a> et publi√© sur internet. Il est toujours en ligne et parfaitement fonctionnel parce qu&rsquo;il s&rsquo;appuyait sur des standards.</p>



<p>Bien s√ªr, ces technologies continuent d&rsquo;√©voluer pour r√©pondre aux nouveaux besoins. Il suffit de comparer n&rsquo;importe quel site moderne au premier du CERN pour s&rsquo;en convaincre.</p>



<h4>La cr√©ation de riches interfaces est facile</h4>



<p>Historiquement, la principale mission d&rsquo;un navigateur est de proc√©der au rendu de pages web. C&rsquo;est une t√¢che √† laquelle ils excellent.</p>



<p>En tant que d√©veloppeur, il vous suffit de construire la structure et son contenu en HTML. Quelques centaines de r√®gles CSS permettent ensuite d&rsquo;appliquer un style et une disposition. Toute la complexit√© du rendu est ensuite prise en charge par de navigateur.</p>



<h4>Javascript rend cette interface dynamique et interactive</h4>



<p>Au d√©but du web, le HTML et le CSS √©taient produits par les serveurs. Javascript n&rsquo;avait pour objectif que d&rsquo;ajouter un peu de dynamisme c√¥t√© client. Il servait principalement √† :</p>



<ul><li>animer des √©l√©ments (maintenant de la responsabilit√© de CSS) ;</li><li>r√©agir √† des √©v√©nements et modifier ponctuellement la page (par exemple afficher ou cacher un bloc quand l&rsquo;utilisateur clique sur un bouton).</li></ul>



<p>Cette derni√®re d√©cennie, le langage et son √©cosyst√®me ont m√ªri. Beaucoup de cadriciels et de biblioth√®ques aident les d√©veloppeurs √† construire l&rsquo;int√©gralit√© de leurs applications clientes en JS. Celles-ci sont alors responsables de produire contenus et styles, en plus de g√©rer la navigation. Lorsque l&rsquo;utilisateur clique sur un lien interne, Javascript capture l&rsquo;√©v√©nement, puis g√©n√®re et remplace la page actuelle.</p>



<blockquote class="wp-block-quote"><p>On les appelle des ¬´¬†<em>Single Page Application¬†¬ª</em>.</p></blockquote>



<p>Si tout le processus de construction et de rendu des pages se fait c√¥t√© client, y-a-t-il encore besoin de serveurs ? Cela d√©pendra des besoins de l&rsquo;application. Certaines t√¢ches, comme l&rsquo;authentification et l&rsquo;autorisation des acc√®s, sont r√©serv√©s √† des environnements de confiance. D&rsquo;autres routines peuvent n√©cessiter une infrastructure pour la persistance et la diffusion de donn√©es. </p>



<h4>L&rsquo;√©cosyst√®me est riche en outils</h4>



<p>Les outils am√©liorent la productivit√©, le confort ou la qualit√©. C&rsquo;est pourquoi tant d&rsquo;efforts et d&rsquo;√©nergies sont d√©pens√©s √† les maintenir. Ils sont particuli√®rement abondant en d√©veloppement web.</p>



<p>Vous d√©couvrirez naturellement certains d&rsquo;entres-eux au cours du module. En particulier, l&rsquo;inspecteur de DOM, de r√©seau, de m√©moire ou le d√©bogueur Javascript int√©gr√©s √† votre navigateur vous seront d&rsquo;une grande aide. Vous apprendrez aussi √† importer et g√©rer du code tiers gr√¢ce aux gestionnaires de d√©pendances. Et bien plus encore !</p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/">2. Pourquoi les technologies web sont-elles si populaires ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>1. Introduction et pr√©requis</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/introduction-2/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 16 Feb 2021 06:46:28 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[D√©veloppement web c√¥t√© client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1831</guid>

					<description><![CDATA[<p>Ce cours enseigne comment cr√©er des applications web c√¥t√© client en utilisant les technologies modernes. Objectifs p√©dagogiques Construire des interfaces web modernes de type Single Page Application, en utilisant Angular comme cadriciel. Comprendre le paradigme de programmation orient√©e √©v√©nement (Event Driven Development). G√©rer votre code source et collaborer en √©quipe gr√¢ce √† git et √† &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/introduction-2/" class="more-link">Continuer la lecture de <span class="screen-reader-text">1. Introduction et pr√©requis</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/introduction-2/">1. Introduction et pr√©requis</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Ce cours enseigne comment cr√©er des applications web c√¥t√© client en utilisant les technologies modernes.</p>



<h4>Objectifs p√©dagogiques</h4>



<ul><li>Construire des interfaces web modernes de type <code>Single Page Application</code>, en utilisant Angular comme cadriciel.</li><li>Comprendre le paradigme de programmation orient√©e √©v√©nement (Event Driven Development).</li><li>G√©rer votre code source et collaborer en √©quipe gr√¢ce √† git et √† un workflow comme Git Flow.</li><li>G√©rer les d√©pendances de votre projet avec npm.</li><li>√âcrire du code source de qualit√© (bonnes pratiques, modularit√©, typage statique avec TS&#8230;).</li><li>D√©couvrir le riche √©cosyst√®me des applications web (usages, outils, avantages et inconv√©nients).</li></ul>



<h4>Comp√©tences</h4>



<p>Cet enseignement a √©t√© construit en supposant que vous connaissiez les bases de HTML et CSS, en plus d&rsquo;avoir l&rsquo;exp√©rience de l&rsquo;algorithmique et de la programmation. Si ce n&rsquo;est pas le cas, faites un tour sur ces ressources (rapides et faciles) :</p>



<ul><li><a href="https://developer.mozilla.org/fr/docs/Apprendre/HTML/Introduction_%C3%A0_HTML/Getting_started" target="_blank" rel="noreferrer noopener">Commencer avec le HTML</a></li><li><a href="https://developer.mozilla.org/fr/docs/Learn/CSS/First_steps/How_CSS_works" target="_blank" rel="noreferrer noopener">CSS, comment √ßa marche ?</a></li></ul>



<h4>Outils</h4>



<p>Les utilisateurs finaux n&rsquo;ont besoin que d&rsquo;un navigateur r√©cent pour ex√©cuter les applications web clientes (front-end).  Le choix de tel ou tel syst√®me d&rsquo;exploitation n&rsquo;a plus tant d&rsquo;importance dans ce contexte.</p>



<p>Dans une moindre mesure, c&rsquo;est aussi vrai pour les d√©veloppeurs. La plupart (mais pas tous) des outils fonctionnent sur les principaux OS. Toutefois, l&rsquo;exp√©rience de d√©veloppement peut beaucoup varier d&rsquo;un OS √† l&rsquo;autre et certaines t√¢ches seront parfois plus compliqu√©es.</p>



<p>Pour ce module, vous √™tes libre d&rsquo;utiliser Windows, MacOS ou Linux. Si vous utilisez Windows, vous pourriez rencontrer des difficult√©s √† installer Docker (utilis√© pour les TP).</p>



<p>Mes d√©monstrations seront r√©alis√©es sur Ubuntu, une distribution Linux. En cas de difficult√©s √† mettre en place votre environnement de travail, vous pourriez installer Linux dans une machine virtuelle. Il sera alors plus simple de le mettre en place.</p>



<p><strong>Pour le premier cours, veuillez s&rsquo;il vous plait :</strong></p>



<ul><li>apporter syst√©matiquement votre ordinateur.</li><li>installer <a href="https://nodejs.org/fr/" target="_blank" rel="noreferrer noopener">Node.js</a>, indispensable pour la construction et l&#8217;empaquetage d&rsquo;application web. Sous Linux, pr√©f√©rez l&rsquo;installation avec <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer noopener">nvm</a>.</li><li>installer un √©diteur ou un IDE adapt√© au d√©veloppement web, comme VSCode ou WebStorm.</li></ul>



<p>Pendant les travaux pratiques, vous installerez encore beaucoup d&rsquo;autres outils. Afin de gagner du temps et en confort, j&rsquo;ai empaquet√© la plupart de ces outils et des ressources p√©dagogiques avec Docker.</p>


<a href=https://docs.google.com/presentation/d/1cjTmJwYxGxT5aW4noNiNxUYFBbvRMG_i9r1tHBjxlFY/edit?usp=sharing target="_blank">
  <div style="display: flex; align-items: center; padding: 1em; border-radius: 3px; border: 1px solid #f5ba16; background: #f7f7f7">
    <div style="margin-right: 0.5em"><img src="/wp-content/uploads/2021/01/google_slide.svg" /></div>
    <div>Ouvrir le support de pr√©sentation</div>
  </div>
</a>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/introduction-2/">1. Introduction et pr√©requis</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>3. La ligne de commande et les entr√©es / sorties</title>
		<link>https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/3-la-ligne-de-commande-et-les-entrees-sorties/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 12 Feb 2021 18:30:05 +0000</pubDate>
				<category><![CDATA[Chapitre 2. Les interfaces utilisateur]]></category>
		<category><![CDATA[Th√©orie des syst√®mes d‚Äôexploitation et pratique de GNU/Linux]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=696</guid>

					<description><![CDATA[<p>Rappels Lors des pr√©c√©dentes s√©ances, nous avons abord√© : bash, un interpr√©teur de ligne de commande et un langage de script. coreutils, un ensemble de programmes en lignes de commande du projet GNU. apt, pour installer des logiciels, en ligne de commande √† nouveau. L&#8217;interpr√©teur de ligne de commande Bash est l‚Äôinterpr√©teur le plus populaire &#8230; <a href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/3-la-ligne-de-commande-et-les-entrees-sorties/" class="more-link">Continuer la lecture de <span class="screen-reader-text">3. La ligne de commande et les entr√©es / sorties</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/3-la-ligne-de-commande-et-les-entrees-sorties/">3. La ligne de commande et les entr√©es / sorties</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Rappels</h4>



<p>Lors des pr√©c√©dentes s√©ances, nous avons abord√© :</p>



<ul><li>bash, un interpr√©teur de ligne de commande et un langage de script.</li><li>coreutils, un ensemble de programmes en lignes de commande du projet GNU.</li><li>apt, pour installer des logiciels, en ligne de commande √† nouveau.</li></ul>



<h4>L&rsquo;interpr√©teur de ligne de commande</h4>



<p>Bash est l‚Äôinterpr√©teur le plus populaire sur les syst√®mes Unix et Unix-like. Il est install√© et utilis√© par d√©faut sur GNU/Linux, MacOS, etc.</p>



<p>Pour simplifier, on peut d√©crire bash en mode interactif comme un environnement o√π l&rsquo;utilisateur pose une question (commande) et re√ßoit une r√©ponse (message texte).</p>



<p>Plus pr√©cis√©ment, quand l&rsquo;utilisateur ex√©cute une commande :</p>



<ol><li>L&rsquo;utilisateur saisit une commande et appuie sur la touche ¬´¬†entr√©e¬†¬ª.</li><li>Bash analyse la commande, qui suit une syntaxe pr√©cise.</li><li>Bash lance le programme d√©sign√© avec des arguments.</li><li>Le programme s&rsquo;ex√©cute, produit une r√©ponse (notamment un texte) et quitte.</li><li>Bash affiche la r√©ponse √† l&rsquo;utilisateur, puis attend une nouvelle commande.</li></ol>



<figure class="wp-block-image size-large"><img loading="lazy" width="768" height="553" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/ls-lhsa-etc.png" alt="" class="wp-image-698" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/ls-lhsa-etc.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/01/ls-lhsa-etc-300x216.png 300w" sizes="(max-width: 768px) 100vw, 768px" /><figcaption>Ex√©cution de la commande ¬´¬†ls -lhsa /etc¬†¬ª et affichage de la r√©ponse du programme ¬´¬†ls¬†¬ª. Ce logiciel permet de lister le contenu d&rsquo;un r√©pertoire et d&rsquo;afficher des propri√©t√©s des fichiers (nom, taille, propri√©taire, permissions&#8230;).</figcaption></figure>



<h4>Structure d‚Äôune commande basique</h4>



<p class="exercice">Consid√©rons la commande suivante : <span style="color:#3d85c6" class="has-inline-color">ls</span> <span style="color:#741b47" class="has-inline-color">-lhsa</span> <span style="color:#bf9000" class="has-inline-color">/etc</span></p>



<p><strong><span style="color:#3d85c6" class="has-inline-color">Le nom de la commande.</span></strong> En r√®gle g√©n√©rale, une commande est en r√©alit√© un programme. Gr√¢ce √† son nom, bash le retrouve dans les r√©pertoires standards. Par exemple, cette commande lancera le programme dont le binaire se situe √† l‚Äôemplacement /bin/ls. Ce logiciel permet de lister le contenu d&rsquo;un r√©pertoire et d&rsquo;afficher des propri√©t√©s des fichiers (nom, taille, propri√©taire, permissions&#8230;).</p>



<p><strong><span style="color:#741b47" class="has-inline-color">Les options</span></strong> permettent de personnaliser le comportement. Pour ls, d‚Äôapr√®s le manuel:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># extrait de "man ls", commande qui permet d'acc√©der √† la documentation de "ls"</span>
-l	use a long listing format
-s	<span class="hljs-built_in">print</span> the allocated size of each file, <span class="hljs-keyword">in</span> blocks
-a	<span class="hljs-keyword">do</span> not ignore entries starting with .
-h 	with -l and -s, <span class="hljs-built_in">print</span> sizes like 1K 234M 2G etc.</code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong><span style="color:#bf9000" class="has-inline-color">Les arguments</span></strong> permettent g√©n√©ralement de sp√©cifier la cible du traitement. Par exemple, ls attend optionnellement une liste de chemins de dossiers et de fichiers √† examiner.</p>



<h4>Les entr√©es d&rsquo;un processus</h4>



<p>Un processus accepte des <strong>entr√©es</strong> (qui contiennent un probl√®me √† r√©soudre). Il effectue ensuite des traitements, qui aboutissent √† un r√©sultat. Ce r√©sultat √©tant communiqu√©, il s&rsquo;agit d&rsquo;une <strong>sortie</strong>. Enfin, le traitement peut √©chouer, auquel cas le processus remonte l&rsquo;erreur. C&rsquo;est aussi une <strong>sortie</strong>, bien qu&rsquo;on s&rsquo;en serait pass√© üò± !</p>



<p class="exercice">Reprenons notre pr√©c√©dente commande : <span style="color:#3d85c6" class="has-inline-color">ls</span><span class="has-inline-color has-purple-color"> </span><span class="has-inline-color has-medium-pink-color">-lhsa /etc</span></p>



<p>Cette commande aboutit √† lancer un processus <code>ls</code>. Ce processus a diverses entr√©es :</p>



<ul><li>Le contenu pass√© sur la ligne de commande apr√®s le nom du programme sera transmis au processus lors de son initialisation. Ainsi, l&rsquo;expression ¬´¬†<span class="has-inline-color has-medium-pink-color">-lhsa /etc</span>¬†¬ª a du sens pour le programme <code>ls</code> et formalise le probl√®me √† r√©soudre (cf. section pr√©c√©dente). On appelle ces contenus des ¬´¬†param√®tres¬†¬ª et il s&rsquo;agit d&rsquo;une entr√©e pour le processus. √Ä noter que cette entr√©e est immuable pour toute la vie du processus.</li></ul>



<ul><li>Diverses informations contextuelles. Par exemple, le processus connait le chemin du r√©pertoire courant (r√©pertoire depuis lequel l&rsquo;utilisateur a lanc√© le processus). Il connait aussi l&rsquo;identit√© de l&rsquo;utilisateur, etc. </li></ul>



<ul><li>D&rsquo;autres donn√©es peuvent arriver durant le cycle de vie du programme. Par exemple, un processus peut poser une question et laisser l&rsquo;utilisateur y r√©pondre. Le processus re√ßoit chaque caract√®re saisi dans un flux. Ce flux venant du clavier s&rsquo;appelle l&rsquo;entr√©e standard.</li></ul>



<ul><li>Bien s√ªr, d&rsquo;autres flux d&rsquo;entr√©e peuvent √™tre initi√©s par le processus : typiquement une connexion r√©seau ou une lecture de fichier.</li></ul>



<h4>Les sorties d&rsquo;un processus</h4>



<p>Toujours dans notre exemple <code>ls -lhsa /etc</code>, le r√©sultat du processus est un texte. On regardera au passage que ce format autorise une mise en page en colonne ou un rendu de couleurs.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="Shell Session" data-shcb-language-slug="shell"><div><code class="hljs language-shell">thomas@thinkpad-laptop:~$ ls -lhsa /etc
total 1,3M
 12K drwxr-xr-x 156 root root    12K janv. 18 19:06 .
4,0K drwxr-xr-x  20 root root   4,0K mai   31  2020 ..
4,0K drwxr-xr-x   3 root root   4,0K avril 23  2020 acpi
4,0K -rw-r--r--   1 root root   3,0K avril 23  2020 adduser.conf
4,0K drwxr-xr-x   3 root root   4,0K avril 23  2020 alsa
 12K drwxr-xr-x   2 root root    12K janv. 18 19:12 alternatives
4,0K -rw-r--r--   1 root root    401 juil. 16  2019 anacrontab
4,0K -rw-r--r--   1 root root    244 oct.   7 10:42 antidote.conf
4,0K drwxr-xr-x   3 root root   4,0K oct.  23 10:19 apache2
4,0K -rw-r--r--   1 root root    433 oct.   2  2017 apg.conf
[...] sortie tronqu√©e</code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Shell Session</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">shell</span><span class="shcb-language__paren">)</span></small></pre>


<p>D&rsquo;ailleurs, la sortie console d&rsquo;un processus est un flux. La commande <code>ls</code> laisse penser qu&rsquo;il faut attendre la compl√©tion de l&rsquo;ex√©cution du programme pour avoir le r√©sultat. C&rsquo;est faux, et une commande que <code>htop</code> le d√©montre. Un processus peut envoyer des messages par intermittence.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="734" height="524" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/htop-actualise-sa-sortie-par-intermittence.gif" alt="" class="wp-image-863"/><figcaption>htop, un gestionnaire de t√¢ches en ligne de commande, actualise son contenu par intermittence. Il prouve aussi qu&rsquo;un programme sans interface graphique peut utiliser des mises en formes √©volu√©es et des couleurs. </figcaption></figure>



<p>D&rsquo;autres productions de sorties auraient √©t√© envisageables : √©criture d&rsquo;un fichier sur le disque, envoi d&rsquo;un message sur une connexion, etc.</p>



<h4>Les flux standards d&rsquo;entr√©e/sortie</h4>



<p>Sous Linux en particulier, les programmes en lignes de commande ont recours √† 3 flux standards. Ils permettent au processus de communiquer avec l&rsquo;utilisateur ou d&rsquo;autres processus.</p>



<ul><li>Le flux d&rsquo;<strong>entr√©e standard</strong>, nomm√© <strong>STDIN</strong> et index√© comme le flux num√©ro 0. Par exemple, quand bash est en attente d&rsquo;une commande, chaque caract√®re saisi par l&rsquo;utilisateur est envoy√© √† bash via son flux d&rsquo;entr√©e.</li></ul>



<ul><li>Le flux de <strong>sortie standard</strong> (<strong>STDOUT</strong>, n¬∞1). Un processus peut utiliser ce flux pour afficher une r√©ponse √† l&rsquo;utilisateur. Par exemple, <code>ls</code> affiche la liste des r√©pertoires sous la forme d&rsquo;un texte. Vous avez aussi rencontr√© <code>htop</code>, qui √©crit √† intervalle de temps r√©guliers dans ce flux.</li></ul>



<ul><li>Le flux de <strong>sortie d&rsquo;erreur standard </strong>(<strong>STDERR</strong>, n¬∞2). De la m√™me mani√®re que le processus envoie un r√©sultat valide sur STDOUT, il peut envoyer un message d&rsquo;erreur sur STDERR. <code>ls</code> utilise par exemple ce flux s&rsquo;il ne parvient pas √† ouvrir un r√©pertoire. Il s&rsquo;agit dans les 2 cas d&rsquo;un r√©sultat produit par le processus, mais les diff√©rencier par le canal permet de les traiter s√©par√©ment (notamment dans des scripts).</li></ul>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="605" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/Stdstreams-notitle.svg-1024x605.png" alt="" class="wp-image-847" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/Stdstreams-notitle.svg-1024x605.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Stdstreams-notitle.svg-300x177.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Stdstreams-notitle.svg-768x454.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Stdstreams-notitle.svg-1536x908.png 1536w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Stdstreams-notitle.svg.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>Les flux standard sous Linux : entr√©e, sortie, erreur. Source <a href="https://fr.wikipedia.org/wiki/Flux_standard" target="_blank" rel="noreferrer noopener">Wikip√©dia</a></figcaption></figure>



<p>Cette fa√ßon de g√©rer les flux standard sous Linux fait partie de la norme POSIX.</p>



<h4>Redirection du flux vers un fichier</h4>



<p>Vous avez ci-dessous une d√©monstration de redirection de flux.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1125" height="697" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-redirection-de-flux.gif" alt="" class="wp-image-868"/><figcaption>D√©monstration d&rsquo;une redirection de flux vers un fichier.</figcaption></figure>



<ol><li>D&rsquo;abord, je saisis la commande <code>ls -lhsa</code>. La sortie est affich√©e en console. Un seul fichier <code>fichier.txt</code> existe dans le r√©pertoire courant. Un explorateur graphique de fichiers est ouvert en arri√®re-plan dans le m√™me r√©pertoire.</li><li>Ensuite, j&rsquo;adapte cette commande pour rediriger la sortie vers un fichier. Cette commande adapt√©e est <code>ls -lhsa &gt; sortie_redirigee.txt</code>.</li><li>Aucune sortie n&rsquo;est affich√©e en console. Un fichier est cr√©√© dans le r√©pertoire courant. Je l&rsquo;ouvre et on y retrouve le contenu de notre premi√®re commande.</li></ol>



<p>Dans cette d√©monstration, nous avons seulement redirig√© le flux STDOUT vers le fichier. On peut faire bien plus avec les redirections.</p>



<h4>Redirection de STDOUT et STDERR en d√©tails</h4>



<p>Ces deux exemples sont √©quivalents. Ils redirigent STDOUT (flux n¬∞1) vers un fichier. En cas d&rsquo;erreur sur STDERR, les messages s&rsquo;affichent toujours en console.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">ls -lhsa &gt; sortie_redirigee.txt
ls -lhsa 1&gt; sortie_redirigee.txt</code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>Il est aussi possible de rediriger le flux STDERR (flux n¬∞2) avec cette syntaxe.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">ls -lhsa 2&gt; sortie_erreur_redirigee.txt</code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>On peut rediriger s√©par√©ment STDOUT et STDERR vers deux fichiers diff√©rents.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">ls -lhsa 1&gt; sortie_redirigee.txt 2&gt; sortie_erreur_redirigee.txt</code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>Une syntaxe permet de rediriger STDERR vers STDOUT. Dans le cas pr√©sent, STDOUT restant affich√© en console, toute la sortie du programme est en console.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-8" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">ls -lhsa 2&amp;&gt;1</code></div><small class="shcb-language" id="shcb-language-8"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>On peut cha√Æner la redirection STDERR vers STDOUT, puis STDOUT vers un fichier.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-9" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">ls -lhsa 2&amp;&gt;1 &gt; sortie_fusionnee_redirigee.txt</code></div><small class="shcb-language" id="shcb-language-9"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>Les redirections avec un simple &lsquo;>&rsquo; d√©truisent le fichier existant. √Ä l&rsquo;inverse, la syntaxe avec deux chevrons permet d&rsquo;ajouter le contenu en fin de fichier.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-10" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">ls -lhsa &gt;&gt; sortie_redirigee.txt</code></div><small class="shcb-language" id="shcb-language-10"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Envoyer un fichier vers STDIN</h4>



<p>S&rsquo;il est possible de rediriger les flux de sortie STDOUT et STDERR vers un fichier, attendez-vous √† ce que rediriger un fichier vers STDIN le soit aussi üòã.</p>



<p>Seul le sens du chevron change. Ainsi, la commande <code>wc -l &lt; fichier.txt</code> lance la commande <code>cat</code> et lui passe le contenu de <code>fichier.txt</code> en entr√©e (sur STDIN).</p>



<p>La commande <code>wc -l</code> compte le nombre de lignes lues depuis l&rsquo;entr√©e standard jusqu&rsquo;√† ce que le flux soit ferm√©. Elle me servira √† illustrer la redirection d&rsquo;un flux du fichier vers le STDIN d&rsquo;un processus.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="739" height="519" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-wc.gif" alt="" class="wp-image-1774"/><figcaption>D√©monstration de wc -l qui compte le nombre de lignes envoy√©es sur STDIN. La combinaison Ctrl + D met fin √† la lecture et affiche ¬´¬†6¬†¬ª.</figcaption></figure>



<p>Maintenant que le comportement de <code>wc -l</code> est clair, voyons comment lui passer le contenu de <code>fichier.txt</code> en entr√©e, ce sorte qu&rsquo;il en compte le nombre de lignes.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="739" height="519" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-wc-avec-redirection-de-flux.gif" alt="" class="wp-image-1775"/></figure>



<ol><li>Tout d&rsquo;abord, je cr√©e un nouveau fichier sobrement nomm√© <code>fichier.txt</code>. Il contient l&rsquo;introduction de cette s√©ance.</li><li>Ensuite, je lance <code>wc -l</code> en redirigeant le contenu du fichier vers STDIN. Et le tour est jou√©. Simple, n&rsquo;est-ce pas ?</li></ol>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/3-la-ligne-de-commande-et-les-entrees-sorties/">3. La ligne de commande et les entr√©es / sorties</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>3. The booking experience</title>
		<link>https://thomas-veillard.fr/front-end-web-development/practical-works/the-booking-experience/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 09 Feb 2021 09:00:02 +0000</pubDate>
				<category><![CDATA[03. Angular tutorials (archived, need improvments)]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2008</guid>

					<description><![CDATA[<p>Learning objectives &#38; expected results During this practical activity, you will build the booking experience and take care of business logic. That is the opportunity to: practice reverse engineering ; be more autonomous than during the last practical work ; build more complex forms than previous login component ; use @Input() and @Output() data bindings &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/the-booking-experience/" class="more-link">Continuer la lecture de <span class="screen-reader-text">3. The booking experience</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/the-booking-experience/">3. The booking experience</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning objectives &amp; expected results</h4>



<p>During this practical activity, you will build the booking experience and take care of business logic.</p>



<p>That is the opportunity to:</p>



<ul><li>practice reverse engineering ;</li><li>be more autonomous than during the last practical work ;</li><li>build more complex forms than previous login component ;</li><li>use <code>@Input()</code> and <code>@Output()</code> data bindings on component boundaries ;</li><li>manage the state of the application and persistence across form steps ;</li><li>train yourself with async http requests and angular services ;</li><li>think about your UI and UX, so it is convenient for customers ;</li><li>use directives such as <code>*ngIf</code> and <code>*ngFor</code>, template variables, etc.</li></ul>



<p>Your booking experience must satisfy the following requirements:</p>



<ol><li>The customer initiates the booking from the home page. It provides the location of the delivery (postal code or city name). This user input is validated against Openstreetmap API and geocoded.</li><li>Geocoded postal address (latitude and longitude) is sent to the server. If zone is covered, the customer goes on next step. Else, an explanation is displayed.</li><li>The customer provides basic information describing the service (start date and time, duration).</li><li>All collected data are sent to the server, which revolves available employees. The user selects one proposal.</li><li>At that time, it may be unauthenticated or unregistered. The user logs in or creates a new customer account. Then it confirms the booking.</li></ol>



<h4>Reverse engineering</h4>



<p>I publicly host a sample frontend at <a href="https://backend.thomas-veillard.fr/" target="_blank" rel="noreferrer noopener">https://backend.thomas-veillard.fr/</a> to help you understanding the booking process and expected result. Your goal is to mimic its behaviour. That said, you will first analyse it (only the booking part). </p>



<p>Please pay attention to changes occurring in the browser URL and to HTTP calls. For example, analysing the home page would give you something like:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-11" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-number">1.</span> Customer types <span class="hljs-string">"Villejuif"</span> in input[placeholder=<span class="hljs-string">"Enter your city"</span>].

<span class="hljs-number">2.</span> Starting XHR GET https:<span class="hljs-comment">//nominatim.openstreetmap.org/search?format=json&amp;featuretype=city&amp;countrycodes=fr&amp;q=Villejuif.</span>
   Response contains coordinates of Villejuif (lat: <span class="hljs-string">"48.7921098"</span>, lon: <span class="hljs-string">"2.3633048"</span>).

<span class="hljs-number">3.</span> Customer selects geocoded Villejuif in the autocomplete field.

<span class="hljs-number">4.</span> Starting XHR POST https:<span class="hljs-comment">//backend.thomas-veillard.fr/api/bookings/coverage</span>
   Query body is { latitude: <span class="hljs-number">48.7921098</span>, longitude: <span class="hljs-number">2.3633048</span> }.
   Response is { covered: <span class="hljs-keyword">true</span> }.

<span class="hljs-number">5.</span> The user clicks the <span class="hljs-string">'Book now'</span> button.

<span class="hljs-number">6.</span> Navigation occurs <span class="hljs-keyword">and</span> customer is redirected.
   Old path was /.
   <span class="hljs-keyword">New</span> path is /bookings/<span class="hljs-keyword">new</span>/step1/<span class="hljs-number">48.7921098</span>/<span class="hljs-number">2.3633048</span>.

<span class="hljs-number">7.</span> Etc...</code></div><small class="shcb-language" id="shcb-language-11"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 1</strong>: Analyse the <strong>full</strong> booking process on demonstration frontend like explained above, starting from the home page to the booking process completion. You will need the <code>Network</code> tab of browser developer tools to track XHR calls. Optionally, you may also track component state changes using Augury browser extension.</p>



<h4>Let&rsquo;s write code !</h4>



<p class="exercice"><strong>Exercise 2</strong>: Start a new feature branch and call it <code>booking-experience</code>.</p>



<p class="exercice"><strong>Exercise 3</strong>: You know more components will be created&#8230; Take a few minutes to reorganise your project, so it looks like the following tree.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-12" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">src
 ‚Ü≥ app
    ‚Ü≥ decorators         <span class="hljs-comment">#¬†empty for now. Will contain typescript decorators.</span>
    ‚Ü≥ guards             <span class="hljs-comment"># contains guards for @angular/router.</span>
    ‚Ü≥ routes             <span class="hljs-comment"># contains components respecting the same tree structure as URL paths.</span>
       ‚Ü≥ home
       ‚Ü≥ login
       ‚Ü≥ profile
    ‚Ü≥ services           <span class="hljs-comment">#¬†contains angular services.</span>
    ‚Ü≥ shared             <span class="hljs-comment"># empty for now. Will contain shared and reusable components.</span></code></div><small class="shcb-language" id="shcb-language-12"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>

<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/24f0d2ac3d0754605b25769e5ec33d98698163f9/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/24f0d2ac3d0754605b25769e5ec33d98698163f9" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>Home page</h4>



<figure class="wp-block-image size-large"><img loading="lazy" width="1242" height="498" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-input-with-geocoding.gif" alt="" class="wp-image-2038"/><figcaption>The customer enters a city, postal code or postal address, which is geocoded using nominatim API.</figcaption></figure>



<p>I give you some pieces of code that you may reuse. First of all, the <code>GeocodeService</code> can query the <code>nominatim</code> API to search places.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-13" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// src/app/services/geocode.service.ts</span>
<span class="hljs-keyword">import</span> { HttpClient } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/common/http'</span>;
<span class="hljs-keyword">import</span> { Injectable } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> NominatimResult {
  display_name: <span class="hljs-built_in">string</span>
  importance: <span class="hljs-built_in">number</span>  
  lat: <span class="hljs-built_in">string</span>
  lon: <span class="hljs-built_in">string</span>
}

<span class="hljs-meta">@Injectable</span>({
  providedIn: <span class="hljs-string">'root'</span>
})
<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> GeocodeService {
  <span class="hljs-keyword">constructor</span> (<span class="hljs-params"><span class="hljs-keyword">private</span> httpClient: HttpClient</span>) {}

  geocodeCity (postalAddress: <span class="hljs-built_in">string</span>, country = <span class="hljs-string">'fr'</span>): NominatimResult[] {
    <span class="hljs-comment">// no API call if input is too short</span>
    <span class="hljs-keyword">if</span> (postalAddress.length &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> [];

    <span class="hljs-comment">// find OpenStreetMap nominatim API documention at https://nominatim.org/release-docs/latest/api/Search/</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.httpClient.get(<span class="hljs-string">`https://nominatim.openstreetmap.org/search?format=json&amp;featuretype=city&amp;countrycodes=<span class="hljs-subst">${country}</span>&amp;q=<span class="hljs-subst">${postalAddress}</span>`</span>).toPromise() <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>;
  }
}
</code></div><small class="shcb-language" id="shcb-language-13"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Also, you <strong>must</strong> debounce HTTP calls to OpenStreetMap API. In other words, do not call the geocoding API until the customer stopped writing for 1 second. I provide you ready to use typescript decorator, usable on your callback component method.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-14" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// src/app/decorators/debounce.decorator.ts</span>
<span class="hljs-comment">/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was invoked.
 * 
 * See https://blog.bitsrc.io/3-ways-to-debounce-http-requests-in-angular-c407eb165ada
 * 
 * Usage:
 * @Debounce(750)
 * static methodToDebound (args: any) {}
 */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Debounce</span> (<span class="hljs-params">ms: <span class="hljs-built_in">number</span></span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target: <span class="hljs-built_in">any</span>, key: <span class="hljs-built_in">any</span>, descriptor: <span class="hljs-built_in">any</span></span>) </span>{
    <span class="hljs-keyword">const</span> oldFunc = descriptor.value
    <span class="hljs-keyword">const</span> newFunc = debounce(oldFunc, ms)
    descriptor.value = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
      <span class="hljs-keyword">return</span> newFunc.apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>)
    }
  }
}

<span class="hljs-comment">/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was invoked.
 * See more at https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore.
 */</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>&lt;<span class="hljs-title">F</span> <span class="hljs-title">extends</span> <span class="hljs-title">Function</span>&gt;(<span class="hljs-params">func: F, wait: <span class="hljs-built_in">number</span>, immediate = <span class="hljs-literal">false</span></span>): <span class="hljs-title">F</span> </span>{
  <span class="hljs-keyword">let</span> timeout: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span>;

  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-comment">// @ts-ignore</span>
    <span class="hljs-keyword">let</span> context = <span class="hljs-keyword">this</span>, args = <span class="hljs-built_in">arguments</span>;

    <span class="hljs-keyword">if</span> (timeout) clearTimeout(timeout);
    timeout = <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
      timeout = <span class="hljs-literal">null</span>;
      <span class="hljs-keyword">if</span> (!immediate) func.apply(context, args);
    }, wait);

    <span class="hljs-keyword">if</span> (immediate &amp;&amp; !timeout) func.apply(context, args);
  } <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>
}</code></div><small class="shcb-language" id="shcb-language-14"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Here an example how to use the decorator.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-15" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">class</span> PostalAddressInputComponent {
  <span class="hljs-meta">@Debounce</span>(<span class="hljs-number">1000</span>)
  <span class="hljs-keyword">async</span> searchAddress (rawPostalAddress: <span class="hljs-built_in">string</span>) {
    <span class="hljs-comment">// trigerred 1 time per second max.</span>
    <span class="hljs-comment">// delayed until the method has not been call for 1 second.</span>
  }
}</code></div><small class="shcb-language" id="shcb-language-15"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Note <code>@angular/material</code> provides ready to use <a href="https://material.angular.io/components/autocomplete/overview" target="_blank" rel="noreferrer noopener">autocomplete field</a> you may import.</p>



<p class="exercice"><strong>Exercise 4</strong>: Build such autocomplete input (as a reusable component) and use it on the home page. You <strong>must</strong> debounce API calls. Also take a few minutes, so your home page looks more friendly.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/cb4425eb3f2f655548c71609d4ac51c47bc0feec/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/cb4425eb3f2f655548c71609d4ac51c47bc0feec" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<figure class="wp-block-image size-large"><img loading="lazy" width="1231" height="489" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/demo-coverage-check.gif" alt="" class="wp-image-2123"/><figcaption>The home page checks if zone is covered before continuing the booking process. </figcaption></figure>



<p class="exercice"><strong>Exercise 5</strong>: Using the <code>POST /api/bookings/coverage</code> endpoint, check if the customer-entered zone is covered. You should handle at least &lsquo;check in progress&rsquo; and &lsquo;uncovered&rsquo; states.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/83ceb34c503bdc8b3d63c01435e2f910a10f172f/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/83ceb34c503bdc8b3d63c01435e2f910a10f172f" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 6</strong>: When user clicks the &lsquo;Book now!&rsquo; button of the home page, it should be redirected to <code>/bookings/new/step1/:latitude/:longitude</code>. The <code>@angular/router</code> should then load <code>BookingNewStep1Component</code>.</p>



<p>Tips: for your further developments, you could directly access the step2 URL with valid parameters, instead of restarting your tests from the home page. This URL already serialises all parameters you need.</p>



<p>Once the software has acquired delivery city and checked the coverage, the customer goes to the first step of booking form. Inside <code>BookingNewStep1Component</code>, the customer answers some questions:</p>



<ul><li>What would be the date of the intervention?</li><li>For what duration of cleaning?</li><li>From which hour ?</li></ul>



<figure class="wp-block-image size-large"><img loading="lazy" width="995" height="732" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/Demo-step-1-booking.gif" alt="" class="wp-image-2167"/><figcaption>Expected result for BookingNewStep1Component. The customer selects a start date, start time and duration.</figcaption></figure>



<p class="exercice"><strong>Exercise 7</strong>: Implement the <code>BookingNewStep1Component</code> component. Note that I used undocumented <code>mat-calendar</code> for the date picker. On your side, you may simply use <a href="https://material.angular.io/components/datepicker/overview" target="_blank" rel="noreferrer noopener">mat-datepicker</a>.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/bbe39c6fbef58874dd81c71fd0664a8d71f571f2/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/bbe39c6fbef58874dd81c71fd0664a8d71f571f2" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p>Now, you will implement the submit logic and error handler of this step:</p>



<ul><li>The button <code>Find employees</code> should only be visible if the form is fully completed. Else, a message is displayed (e.g. Please select a start date).</li><li>On submit, check at least one employee is available.<ul><li>If not, display an error which stays until the customer touched the form again. The API will always return <code>unavailable</code> for Sunday.</li><li>If any, redirect to the second step.</li></ul></li></ul>



<p>The second step path could be something like:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-16" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># pattern of the second step route</span>
/bookings/<span class="hljs-keyword">new</span>/step2/:latitude/:longitude/at/:startDate/:startHour/duration/:duration

<span class="hljs-comment"># example of path instance</span>
/bookings/<span class="hljs-keyword">new</span>/step2/<span class="hljs-number">48.7921098</span>/<span class="hljs-number">48.7921098</span>/at/<span class="hljs-number">2021</span><span class="hljs-number">-03</span><span class="hljs-number">-27</span>/<span class="hljs-number">8</span>/duration/<span class="hljs-number">2</span>

<span class="hljs-comment">#¬†tips: new Date('2021-03-27').toISOString().split('T')[0] === '2021-03-27'</span></code></div><small class="shcb-language" id="shcb-language-16"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="1058" height="734" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/Demo-step-1-booking-submit.gif" alt="" class="wp-image-2202"/><figcaption>Expected behaviour for the submit method of step 1. It checks if any employee is available before redirecting to the second step. Else, it prints errors.</figcaption></figure>



<p class="exercice"><strong>Exercise 8</strong>: Implement the submit method of step 1 component.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/55bf37d0a3d8219d16268c91f79d73105dab55ed/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/55bf37d0a3d8219d16268c91f79d73105dab55ed" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/the-booking-experience/">3. The booking experience</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>2. Managing authentication &#038; routing</title>
		<link>https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 09 Feb 2021 09:00:01 +0000</pubDate>
				<category><![CDATA[03. Angular tutorials (archived, need improvments)]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1125</guid>

					<description><![CDATA[<p>You will build a basic navigation experience, with login capabilities and authenticated area. This is the opportunity to: create your first feature branch on git ; review the code of someone else pull request ; build components, forms and navigation ; write routing configuration with authorisation guards ; work with async processing and error handlers &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Managing authentication &#038; routing</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/">2. Managing authentication &#038; routing</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>You will build a basic navigation experience, with login capabilities and authenticated area. This is the opportunity to:</p>



<ul><li>create your first feature branch on git ;</li><li>review the code of someone else pull request ;</li><li>build components, forms and navigation ;</li><li>write routing configuration with authorisation guards ;</li><li>work with async processing and error handlers ;</li><li>discover some angular&rsquo;s internals (text interpolation, dependency injection&#8230;).</li></ul>



<h2>Start a feature branch</h2>



<p>In our git workflow, a feature branch contains new code that is still under construction or need a peer review. Once that code seems mature (feature complete and code reviewed), it is merged into the develop branch. Finally, when develop has been well tested, you can create a release and push it to the production.</p>



<p>Of course, the notion of ¬´¬†production¬†¬ª is not applicable to this practical work. But it is appropriate for the project.</p>



<p class="exercice"><strong>Exercise 1</strong>: Start a new feature branch and call it <code>authentication-and-routing</code>. On Github, you should see a branch called <code>feature/authentication-and-routing</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-17" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># ensure you are on develop branch.</span>
git checkout develop

<span class="hljs-comment"># create a new local branch, which is even with develop</span>
git checkout -b feature/authentication-<span class="hljs-keyword">and</span>-routing

<span class="hljs-comment">#¬†push it to remote repository</span>
git push --set-upstream origin feature/authentication-<span class="hljs-keyword">and</span>-routing</code></div><small class="shcb-language" id="shcb-language-17"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>I encourage you to commit regulary your changes (for example, at the end of each question). You may also reset your workspace to last commit when things go wrong.</p>



<h2>Basic navigation</h2>



<p class="exercice"><strong>Exercise 2</strong>: For this question, find your path using the angular-material <a href="https://material.angular.io/guide/getting-started" target="_blank" rel="noreferrer noopener">getting started guide</a>. Then, import and use the <a href="https://material.angular.io/components/toolbar/overview" target="_blank" rel="noreferrer noopener">mat-toolbar</a> component to display a menu with 3 navigation items (without link). At this step, you can put your code in <code>app.component.html</code>.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="703" height="317" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/image.png" alt="" class="wp-image-1151" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/02/image.png 703w, https://thomas-veillard.fr/wp-content/uploads/2021/02/image-300x135.png 300w" sizes="(max-width: 703px) 100vw, 703px" /><figcaption>The expected result. There is no link yet on &lsquo;home&rsquo;, &lsquo;login&rsquo;&#8230; The item &lsquo;profile&rsquo; is rendered even if the user is not logged. That will change once authentication is ready.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/2520313f41d90c53ca90e510b27b8a0d78679fdf/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/2520313f41d90c53ca90e510b27b8a0d78679fdf" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 3</strong>: Explain the pro and cons of moving the navigation to its own component.</p>



<p>The <code>@angular/cli</code> is able to generate some pieces of code, like a component.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-18" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment">#¬†generate a new component called 'navigation' and reference it in app.module.ts.</span>
$ ng generate component navigation
CREATE src/app/navigation/navigation.component.css (<span class="hljs-number">0</span> bytes)
CREATE src/app/navigation/navigation.component.html (<span class="hljs-number">25</span> bytes)
CREATE src/app/navigation/navigation.component.ts (<span class="hljs-number">291</span> bytes)
UPDATE src/app/app.module.ts (<span class="hljs-number">684</span> bytes)</code></div><small class="shcb-language" id="shcb-language-18"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 4</strong>: Commit any existing change on git, then generate a new component called <code>navigation</code>. Examine changes made by <code>@angular/cli</code> (you can use git and the output of <code>ng generate</code> command). Finally, move the mat-toolbar into <code>navigation.component</code>. Visually, the result should be identical.</p>


<div class="wp-block-image" style="text-align: center;">
<figure class="size-large"><img loading="lazy" class="wp-image-1162" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/image-1.png" alt="" width="311" height="154"><figcaption>The new component tree with NavigationComponent. Captured with <a href="https://augury.rangle.io/" target="_blank" rel="noreferrer noopener">Augury</a>.</figcaption></figure>
</div>

<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/f9d1bd55c3069418a8d25c28c628c5e7d95112bf/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/f9d1bd55c3069418a8d25c28c628c5e7d95112bf" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 5</strong>: Generate 3 more components using the cli: <code>home</code>, <code>login</code> and <code>profile</code>. Those components do not have to be included in <code>app.component.html</code> yet. Later, we will let <code>@angular/router</code> dynamically include the right component depending on the current path.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/04f07d3630867a0e483288b2bae1a6e12882c8e0/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/04f07d3630867a0e483288b2bae1a6e12882c8e0" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<div class="exercice" style="padding-bottom: 0; margin-bottom: 1em">
<p><strong>Exercise 6</strong>: Implement 3 routes with <code>@angular/router</code>. Each route will render the eponym component.</p>

<ul style="margin-left: 1em;">
<li><code>/</code> will render <code>home.component</code></li>
<li><code>/login</code> will render <code>login.component</code></li>
<li><code>/profile</code> will render <code>profile.component</code></li>
</ul>

<p>You can use this <a href="https://angular.io/guide/router" target="_blank" rel="noopener">guide</a>. Remember that your project was previously generated with routing enabled. You just have to set up routes and use <code>router-outlet</code> in <code>app.component.html</code>.</p>
</div>



<figure class="wp-block-image size-large"><img loading="lazy" width="919" height="381" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-angular-routes-home-login-and-profile.gif" alt="" class="wp-image-1186"/><figcaption>Expected result. The component is dynamically rendered depending on the route.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/d87a674fddbf150030130be8939f2da71a409d08/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/d87a674fddbf150030130be8939f2da71a409d08" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 7</strong>: Add links to your menu items.</p>



<p class="exercice"><strong>Exercise 8</strong>: Did you use <code>&lt;a href="PATH_OR_URL"&gt;&lt;/a&gt;</code> for your links ? Instead of the <code>href</code> HTML attribute, you must use the <code>routerLink</code> directive. Both ways will technically work, but there are major differences. What are they ?</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="919" height="381" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/routerLink-directive-in-action.gif" alt="" class="wp-image-1196"/><figcaption>Expected result. The user can click links in menu to navigate across views.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/419ccbb35fafeecc33a24e403830700c6521cc54/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/419ccbb35fafeecc33a24e403830700c6521cc54" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Login form</h2>



<p>Forms are a major part of most applications. In angular, you have 2 approaches available: template-driven and reactive. I will use template-driven form in my correction, because they are simple and strong-typable. You have an <a href="https://angular.io/guide/forms" target="_blank" rel="noreferrer noopener">example of template-driven forms</a> in the angular documentation.</p>



<p class="exercice"><strong>Exercise 9</strong>: Add a simple login form. When the user clicks on <code>submit</code> button, open a modal with content of inputs (see <a href="https://developer.mozilla.org/fr/docs/Web/API/Window/alert" target="_blank" rel="noreferrer noopener">window.alert</a>). Email and password fields are required to submit the form. If they are missing, the submit button is disabled.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="938" height="371" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-login-form-template.gif" alt="" class="wp-image-1212"/><figcaption>The login form as expected at this step.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/584e834ba044ac2c88b81c8df6f36edeb7eab798/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/584e834ba044ac2c88b81c8df6f36edeb7eab798" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p>Although this is not a design course, we can probably make this form more beautiful. For this we will use some components from <code>angular-material</code> like we did for the toolbar.</p>



<p class="exercice"><strong>Exercise 10</strong>: Improve the look and feel of the login page. Using <code>angular-material</code> is recommended.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="947" height="512" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-login-form-material-design.gif" alt="" class="wp-image-1219"/><figcaption>The result once I used material components and a bit of CSS.</figcaption></figure>



<p>To achieve this look and feel, I used the following modules:</p>



<ul><li><a href="https://material.angular.io/components/card/overview" target="_blank" rel="noreferrer noopener">MatCardModule</a></li><li><a href="https://material.angular.io/components/form-field/overview" target="_blank" rel="noreferrer noopener">MatFormFieldModule</a> &amp; <a href="https://material.angular.io/components/input/overview" target="_blank" rel="noreferrer noopener">MatInputModule</a> (both works together)</li><li><a href="https://material.angular.io/components/button/overview" target="_blank" rel="noreferrer noopener">MatButtonModule</a></li></ul>



<p>Of course, you are free to layout the page and design the UI like you wish. That is just an example.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="947" height="804" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/login-form-responsive.gif" alt="" class="wp-image-1222"/><figcaption>Bonus: use <a href="https://css-tricks.com/css-media-queries/" target="_blank" rel="noreferrer noopener">CSS media queries</a> to make your form responsive. Your browser includes developers tools simulating phones and pads. They are useful to test your media queries.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/3ad2dcdb56ac6c87d48081cd9bb73f88513a07f7/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/3ad2dcdb56ac6c87d48081cd9bb73f88513a07f7" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p>The same way we prefer <code>routerLink</code> over <code>href</code> because it does not reload the <code>Single Page Application</code>, you should use the <code>@angular/router</code> from your typescript controller (ex. from your submit method in <code>LoginComponent</code>). Here an example:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-19" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;
<span class="hljs-keyword">import</span> { Router } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/router'</span>;

<span class="hljs-meta">@Component</span>({
  selector: <span class="hljs-string">'app-login'</span>,
  templateUrl: <span class="hljs-string">'./login.component.html'</span>,
  styleUrls: [<span class="hljs-string">'./login.component.css'</span>]
})
<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> LoginComponent {
  <span class="hljs-keyword">constructor</span> (<span class="hljs-params"><span class="hljs-keyword">private</span> router: Router</span>) {}

  <span class="hljs-keyword">async</span> submit () {
    <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.router.navigateByUrl(<span class="hljs-string">'/profile'</span>);
  }
}</code></div><small class="shcb-language" id="shcb-language-19"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>

<div class="exercice" style="margin-bottom: 1em;">
<p><strong>Exercise 11</strong>: This example is rich of typescript and angular features. Let&rsquo;s analyse it.</p>
<ul style="margin-left: 1em; margin-bottom: 0;">
<li>How many instance attributes has the <code>LoginComponent</code> class ?</li>
<li>Why is the visibility of <code>router</code> attribute restricted to <code>private</code> ?</li>
<li>Angular detects the class constructor requires an instance of <code>Router</code>. When it instantiates the <code>LoginComponent</code>, it will provide an instance of <code>Router</code>. Take a look at <a href="https://angular.io/guide/dependency-injection" target="_blank" rel="noopener">Angular&rsquo;s dependency injection</a>.</li>
<li><code>@Component</code> is a <a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noopener">decorator</a>. Although it is still a typescript experimental feature, Angular heavily relies on it.</li>
</ul>
</div>


<p>On submit, the form should send credentials to the server (using built-in <code>HttpService</code>). Then, your <code>submit</code> method will deal with the server&rsquo;s response. On success, the user will be redirected to <code>/profile</code>. Finally, he should be notified for any error that occurred.</p>



<p>Remember you have the documentation and playground of API. Also do not forget that calling the server is an <code>async</code> task.</p>



<p class="exercice"><strong>Exercise 12</strong>: Implement the submit method as specified above. For the first iteration, use <code>window.alert</code> to report errors.</p>



<p class="exercice"><strong>Exercise 13</strong>: Take a tour at <a href="https://angular.io/guide/template-syntax" target="_blank" rel="noreferrer noopener">template syntax guide</a>. For this question, you will need <code>text interpolation</code> and <code>*ngIf</code>. Then, report errors in the template itself.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="939" height="518" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/submit-error-handler-in-tempalte.gif" alt="" class="wp-image-1267"/><figcaption>Demonstration of error handler (errors are printed in the template using text interpolation and *ngIf directive).</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/9f6645b9cf8ca31cdd4996e439ab68d27ef87074/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/9f6645b9cf8ca31cdd4996e439ab68d27ef87074" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Using backend type definitions</h2>



<p>Front-end and back-end share some technologies, including the Typescript language. The front-end can benefit from back-end type definition exported by the compiler. You can <a href="https://backend.thomas-veillard.fr/assets/typings.zip" target="_blank" rel="noreferrer noopener">download latest definitions</a> from the backend server.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-20" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># content of the typings.zip archive.</span>

<span class="hljs-comment">#¬†these files contain type definitions of parameters and results of API routes</span>
./dist-typings/routes/auth/post.login.interfaces.d.ts
./dist-typings/routes/api/bookings/post.coverage.interfaces.d.ts
./dist-typings/routes/api/bookings/post.proposals.interfaces.d.ts

<span class="hljs-comment"># these files describe the models</span>
./dist-typings/models/delivery.d.ts
./dist-typings/models/user.d.ts
./dist-typings/models/booking.d.ts
./dist-typings/models/employee-information.d.ts</code></div><small class="shcb-language" id="shcb-language-20"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>Here a simple example of type definition for <code>POST /auth/login</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-21" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">/* ./dist-typings/routes/auth/post.login.interfaces.d.ts */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> Auth$LoginParams {
    email: <span class="hljs-built_in">string</span>;
    password: <span class="hljs-built_in">string</span>;
}</code></div><small class="shcb-language" id="shcb-language-21"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Those definitions are up to date with the back-end implementation, since they are derived from it. If any change in the backend is incompatible with the front-end usage, the typescript compiler catches it.</p>



<p>To use those definitions with angular, please unzip the archive under the <code>src</code> folder.</p>



<p> </p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1273" height="767" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/Demo-typings.gif" alt="" class="wp-image-2152"/><figcaption>How to use my back-end type definitions in Angular to add strong types on HTTP calls.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/0e5a4c0075f266ecc3f74016038887fa01c5cd21/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/0e5a4c0075f266ecc3f74016038887fa01c5cd21" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Using services</h2>



<p>Because of the single responsibility principle, components should not fetch data or query the server themselves. That is the responsibility of <a href="https://angular.io/tutorial/toh-pt4" target="_blank" rel="noreferrer noopener">services</a>. This allows testing the behaviour of components by mocking the services it uses.</p>



<p>Services are singleton that persists until the end of the navigation. On their side, components are destroyed as soon as they are detached from the component tree (aka. not used anymore). You can store some state inside the component as long you do not need them outside. Else, you should use services.</p>



<p class="exercice"><strong>Exercise 14</strong>: Using the <code>@angular/cli</code>, generate <code>me.service.ts</code> and implement <code>resolve</code>, <code>login</code> and <code>logout</code> methods. Finally, update accordly the <code>LoginComponent</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-22" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { Auth$LoginParams } <span class="hljs-keyword">from</span> <span class="hljs-string">'src/dist-typings/routes/auth/post.login.interfaces'</span>;
<span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">'src/dist-typings/models/user'</span>;

<span class="hljs-keyword">interface</span> IMeService {
  me: User

  <span class="hljs-comment">/**
   * On first call, retrieve the current user identity on /api/users/me.
   * On following calls, use a cached reference (this.me).
   * Returns Promise&lt;User&gt; if logged.
   * Returns Promise&lt;null&gt; otherwise.
   */</span>
  resolve: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;User | <span class="hljs-literal">null</span>&gt;

  <span class="hljs-comment">/**
   * Sends credentials against /auth/login.
   * Throws HttpErrorResponse in case of failure.
   * Returns Promise&lt;void&gt; if success.
   */</span>
  login: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-params">credentials</span>: <span class="hljs-params">Auth</span>$<span class="hljs-params">LoginParams</span></span>) =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt;

  <span class="hljs-comment">/**
   * Sends credentials against /auth/logout.
   * Throws HttpErrorResponse in case of failure.
   * Returns Promise&lt;void&gt; if success.
   */</span>
  logout: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt;
}</code></div><small class="shcb-language" id="shcb-language-22"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>

<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/a3803b0dcef7fd9884ab7eb667db81f32f986e17/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/a3803b0dcef7fd9884ab7eb667db81f32f986e17" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Routing &amp; authentication</h2>



<p>At this step, the application suffers a major bug. It is not aware of the current user session.</p>



<ul><li>The login and profile links are always visible.</li><li>The login form is always available, even for logged users.</li><li>The profile page is accessible without session.</li></ul>



<p>This is because the <code>LoginComponent</code> state is destroyed when the user is redirected. We need to store current user identity somewhere it will persist during navigation. That is the purpose of <a href="https://angular.io/tutorial/toh-pt4" target="_blank" rel="noreferrer noopener">Angular Services</a> (among other things like fetching data). Also, this identity should be retrieved from the server via XHR request on browser page reload.</p>



<h4>The login and profile links are always visible</h4>



<p>Let&rsquo;s start by fixing the first issue. <code>@angular/router</code> can resolve async data from a service when a route is triggered. These data are provided to components by injecting the <code>ActivatedRoute</code> service. Here <a href="https://angular.io/api/router/Resolve" target="_blank" rel="noreferrer noopener">an example</a>.</p>



<p>Hopefully, the <code>MeService</code> on which you will rely is ready. It implements an async method <code>resolve()</code> that returns the current user identity. So it is a valid resolver for <code>@angular.router</code>.</p>



<p>You have to change your routes, so they look like:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-23" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript">  { path: <span class="hljs-string">''</span>, component: HomeComponent, resolve: { me: MeService } },
  { path: <span class="hljs-string">'login'</span>, component: LoginComponent, resolve: { me: MeService } },
  { path: <span class="hljs-string">'profile'</span>, component: ProfileComponent, resolve: { me: MeService } }</code></div><small class="shcb-language" id="shcb-language-23"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Now, components scoped inside the <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>  can access the <code>me</code> property through <code>ActivatedRoute</code> service injection.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-24" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> NavigationComponent {
  <span class="hljs-comment">// once initialized, you can use it to dynamically adapt the navigation template.</span>
  me: User;

  <span class="hljs-keyword">constructor</span> (<span class="hljs-params">activatedRoute: ActivatedRoute</span>) {
    <span class="hljs-comment">// When the NavigationComponent is mounted, the MeService has already been resolved.</span>
    <span class="hljs-keyword">this</span>.me = activatedRoute.snapshot.data.me;
  }
}</code></div><small class="shcb-language" id="shcb-language-24"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>For some reason, <code>ActivatedRoute</code> injection behaves properly only inside the <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>. At this step, you include <code>app-navigation</code> in <code>app.component.html</code>. You must move it to <code>home-component</code>, <code>login-component</code>&#8230;</p>



<p class="exercice"><strong>Exercise 15</strong>: Use  <code>MeService</code> to resolve current user identity on all routes like explained above. Then,  conditionally show or hide the login and profile links depending on resolved (or unresolved) session.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="927" height="502" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-dynamic-navigation-items.gif" alt="" class="wp-image-1640"/><figcaption>Expected result: the ¬´¬†login¬†¬ª link is visible until the user logs in. Then, the profile link should be displayed.</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="927" height="502" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-dynamic-navigation-items-on-reload.gif" alt="" class="wp-image-1642"/><figcaption>The user identity is fetched using MeService when a route is triggered. So, it should retrieve current session even after a browser reload.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/9d5075597a424d82a3e81363bab1445243369adb/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/9d5075597a424d82a3e81363bab1445243369adb" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>The login form is always available, even for logged users.</h4>



<p><a href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/" target="_blank" rel="noreferrer noopener">Angular Guards</a> execute codes when a route is triggered. You already experienced resolvers that are useful to mount components once they fetched data from the API. This time, you need a <code>CanActivate</code> guard.</p>


<pre class="wp-block-code"><div><code class="hljs">ng generate guard unauthenticated
? Which interfaces would you like to implement? CanActivate
CREATE src/app/unauthenticated.guard.spec.ts (386 bytes)
CREATE src/app/unauthenticated.guard.ts (468 bytes)</code></div></pre>


<p class="exercice"><strong>Exercise 16</strong>: Implement <code>UnauthenticatedGuard#canActivate()</code> method. It returns a <code>UrlTree</code> redirecting to <code>/profile</code> if user is already logged. Else, it allows activation of <code>/login</code>.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/5460e9ffa5eaeb2c6ac470ffbd2916d0fef6b3ee/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/5460e9ffa5eaeb2c6ac470ffbd2916d0fef6b3ee" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>The profile page is accessible without session.</h4>



<p class="exercice"><strong>Exercise 17</strong>: Implement <code>AuthenticatedGuard#canActivate()</code> method for <code>/profile</code>.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/bf79236edb6480168294c9fedc9816d08fc810e8/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/bf79236edb6480168294c9fedc9816d08fc810e8" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>The final touch</h2>



<p class="exercice"><strong>Exercise 18</strong>: A logout button would be great. Add it to the navigation. Optionally, you may import an icon library like <a href="https://fontawesome.com/" target="_blank" rel="noreferrer noopener">FontAwesome</a> (see <a href="https://www.npmjs.com/package/@fortawesome/angular-fontawesome" target="_blank" rel="noreferrer noopener">package for angular</a>).</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="934" height="511" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-logout-button-with-fontawesome-and-mattooltip.gif" alt="" class="wp-image-1750"/><figcaption>A simple logout button using <a href="https://www.npmjs.com/package/@fortawesome/angular-fontawesome" target="_blank" rel="noreferrer noopener">FontAwesome</a>, <a href="https://material.angular.io/components/button/overview" target="_blank" rel="noreferrer noopener">MatButton</a> and <a href="https://material.angular.io/components/tooltip/overview" target="_blank" rel="noreferrer noopener">MatTooltip</a>.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/da4ce36840a24c86d5cfb79d6ab0844e9471e9c8/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/da4ce36840a24c86d5cfb79d6ab0844e9471e9c8" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Pull Request &amp; code review</h2>



<p>Each of you will add another student as a collaborator of your git repository.</p>



<p>Then, create a Pull Request for merging <code>feature/authentication-and-routing</code> into <code>develop</code>. Your pair reviews the pull request and let comments.</p>



<p>Once the code is reviewed, merge your pull request on Github and return to develop branch.</p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/">2. Managing authentication &#038; routing</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>1. Setup your practical environment</title>
		<link>https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 09 Feb 2021 09:00:00 +0000</pubDate>
				<category><![CDATA[03. Angular tutorials (archived, need improvments)]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=897</guid>

					<description><![CDATA[<p>At the end of this practical works series, you will have built the front-end of a cleaning booking service. The back-end is provided. During this first seance, you will: install the necessary tools (git, node&#8230;) ; setup, build and run your angular application ; access to the back-end API documentation and interact manually with it &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/" class="more-link">Continuer la lecture de <span class="screen-reader-text">1. Setup your practical environment</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/">1. Setup your practical environment</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>At the end of this practical works series, you will have built the front-end of a cleaning booking service. The back-end is provided.</p>



<p>During this first seance, you will:</p>



<ul><li>install the necessary tools (git, node&#8230;) ;</li><li>setup, build and run your angular application ;</li><li>access to the back-end API documentation and interact manually with it ;</li><li>commit that angular project on git and push it to Github ;</li><li>push your code to Cloudflare Page.</li></ul>



<h3>Required software installation</h3>



<h4>Git</h4>



<p><a href="https://git-scm.com/" target="_blank" rel="noreferrer noopener">Git</a> is a decentralised source version manager. A git repository stores the source code of a project and any of its changes. Typically, a contributor writes some code on its side. Once it has completed its task, it commits the changes (with a message) and push it to the remote repositories. Other contributors can update their base. Nowadays, teams centralise repositories hosting on SaaS platforms like Github and Gitlab.</p>



<p>During the lecture, I expressed you follow the <a href="https://datasift.github.io/gitflow/IntroducingGitFlow.html" target="_blank" rel="noreferrer noopener">gitflow</a> workflow. Take the time to understand it. In substance:</p>



<ul><li>All the code on master is designed for production.</li><li>The code for next release is on develop.</li><li>When your start a feature, you should open a feature branch.</li></ul>



<p>Of course, you also need a Github (or Gitlab) account.</p>



<p class="exercice"><strong>Exercise 1</strong> : Install git on your machine. You should at least have the git command working. Test it with <code>git --version</code> for example.</p>



<h4>Node.js &amp; npm</h4>



<p><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer noopener">Node.js</a> is a platform that runs Javascript code outside the browser. It makes possible to write server applications in Javascript, allowing developers to use the same technologies for front and back. The back-end you will interface with is running on node.js.</p>



<p>But here we are in front-end module. We are interested in node.js because it powers most tools we will use. Some of them are even shipped with the node installer. Node Package Manager (npm) is one of them. It manages dependencies of your project and installs cli softwares written for node.</p>



<p class="exercice"><strong>Exercise 2</strong> : Install node.js. If installation successed, both commands <code>node --version</code> and <code>npm --version</code> should work. It is recommended you use the <code>Node Command Prompt</code>.</p>



<h4>Angular</h4>



<p><a href="https://angular.io/" target="_blank" rel="noreferrer noopener">Angular</a> is a full-featured framework you will use for building your front application. Most actions, such as generating projects or components have been automatised in the ¬´¬†cli¬†¬ª tool.</p>



<p>A single command written in a terminal (Powershell or Node Command Prompt for Windows) do the job. Ensure node is installed first. We also install <a href="https://eslint.org/" target="_blank" rel="noreferrer noopener">eslint</a>, which ensure coding conventions are applied across codebase.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-25" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># the following command install angular cli and required dependencies globally. They provide the ng command.</span>
npm i -g @angular/cli @angular-devkit/core @angular-devkit/schematics @angular-eslint/schematics</code></div><small class="shcb-language" id="shcb-language-25"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 3</strong> : Install <code>@angular/cli</code> according to the previous procedure. Then test it works with <code>ng version</code>. For everything related <code>node</code>, <code>npm</code> and <code>ng</code>, I recommend you use the <code>Node command prompt</code>.</p>



<h3>Setup the angular project</h3>



<p>At the end of this step, your workspace should match the following folder hierarchy. </p>


<pre class="wp-block-code" aria-describedby="shcb-language-26" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">frontend                       <span class="hljs-comment"># angular projet (generated using @angular/cli)</span>
 ‚Ü≥ dist                        <span class="hljs-comment">#¬†the folder containing your bundled app. Only exists after running `ng build` command.</span>
 ‚Ü≥ node_modules                <span class="hljs-comment">#¬†the folder containing local dependencies. See package.json file and npm command for more info.</span>
 ‚Ü≥ src                         <span class="hljs-comment">#¬†source code (HTML, CSS, TS). It includes components, services, etc.</span>
 ‚Ü≥ angular.json                <span class="hljs-comment">#¬†@angular/cli configuration</span>
 ‚Ü≥ package.json                <span class="hljs-comment">#¬†npm configuration, primary used for installing dependencies</span>
 ‚Ü≥ tsconfig.json               <span class="hljs-comment">#¬†typescript configuration, where are defined target, enabled syntax and type checking features.</span>
 ‚Ü≥ .eslintrc.json              <span class="hljs-comment"># eslint configuration, where you set linter rules.</span></code></div><small class="shcb-language" id="shcb-language-26"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>Angular project&rsquo;s structure is standard (thanks to @angular/cli). For more information about it, please refer to <a href="https://angular.io/guide/file-structure" target="_blank" rel="noreferrer noopener">official documentation</a>.</p>



<h4>Generate the angular project</h4>



<p class="exercice"><strong>Exercise 4</strong> : Generating such project is easy. Just run the following command in a <code>Node Command Prompt</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-27" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># creates a new project with angular router enabled</span>
ng new --routing --strict --collection=@angular-eslint/schematics frontend

<span class="hljs-comment"># enter the 'frontend' folder</span>
<span class="hljs-built_in">cd</span> frontend</code></div><small class="shcb-language" id="shcb-language-27"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>The previous commands enabled the<code>:</code></p>



<ul><li><code>angular/router</code>, with argument <code>--routing</code> that lets our angular app overriding and intercepting the browser URLs through the <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" target="_blank" rel="noreferrer noopener">HTML5 History API</a>.</li><li>the strict mode of typescript with <code>--strict</code> argument. Among other things, Typescript will expect to know the type of each variable, so it can enforce safety checks. See <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noreferrer noopener">typescript reference</a> for more info.</li><li><code>eslint</code> support, with rules recommended by the angular community. Linter&rsquo;s objectives is to ensure codebase consistency across the team and collaborator turnover. It sets guidelines, detects some bad coding patterns, etc.</li></ul>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/5444790f18c5e943fd9e6202c677b0db943e8ce0/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/5444790f18c5e943fd9e6202c677b0db943e8ce0" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>Configure your editor</h4>



<p>If you are using VSCode, you will probably appreciate those extensions:</p>



<ul><li>Angular Language Service (type inference in template)</li><li>Eslint checks that conventions are correctly applied</li><li>Gitlens (optional) for better git experience</li></ul>



<h4>Run your app</h4>



<p>Once your project is generated, it is time to run it. <code>ng serve</code> incrementaly compile your project and reload on source change. It also starts an HTTP server on port 4200.</p>



<p class="exercice"><strong>Exercise 5</strong> : Serve your app and open it in your favourite browser.</p>



<p>Tips: always start your browser development tool and keep track of the console tab. If there is an error at runtime, that is the place to check.</p>



<p class="exercice"><strong>Exercise 6</strong> : Document yourself on the differences between <code>ng serve</code> and <code>ng build</code>.</p>



<h4>Compare built application with various targets</h4>



<p>The following commands build your app. Many other parameters are available to customise the build process. This is just an overview of more useful.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-28" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">ng build          <span class="hljs-comment"># build the app for development, easy to debug in the browser and heavy bundle size.</span>
ng build --prod   <span class="hljs-comment">#¬†build the app for production. A lot of optimisations are processed, reducing bundle size.</span>
ng build --watch  <span class="hljs-comment">#¬†incrementally rebuild the app on each source code change (faster subsequent builds).</span></code></div><small class="shcb-language" id="shcb-language-28"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>I provided a sample output of the <code>ng build</code> command. It emitted its output under <code>dist/frontend</code> folder. Let&rsquo;s analyse it!</p>


<pre class="wp-block-code" aria-describedby="shcb-language-29" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">$ ng build <span class="hljs-comment">#¬†must be run in frontend folder                                                        </span>
‚úî Browser application bundle generation complete.
‚úî Copying assets complete.
‚úî Index html generation complete.

Initial Chunk Files | Names         |      Size
vendor.js           | vendor        |   <span class="hljs-number">2.70</span> MB
polyfills.js        | polyfills     | <span class="hljs-number">127.61</span> kB
main.js             | main          |  <span class="hljs-number">20.85</span> kB
runtime.js          | runtime       |   <span class="hljs-number">6.15</span> kB
styles.css          | styles        | <span class="hljs-number">119</span> bytes

                    | Initial Total |   <span class="hljs-number">2.85</span> MB

Build at: <span class="hljs-number">2021</span><span class="hljs-number">-01</span><span class="hljs-number">-30</span>T08:<span class="hljs-number">46</span>:<span class="hljs-number">07.013</span>Z - Hash: <span class="hljs-number">2</span>b7174e3c646073c60a9 - Time: <span class="hljs-number">6285</span>ms</code></div><small class="shcb-language" id="shcb-language-29"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 7</strong> : What is a bundle ? How does it differ from the source code?</p>



<p class="exercice"><strong>Exercise 8</strong> : <code>.map.js</code> files have been emitted. What is the purpose of these map files?</p>



<p class="exercice"><strong>Exercise 9</strong> : Can you spot some differences between <code>ng build</code> and <code>ng build --prod</code>?</p>



<p class="exercice"><strong>Exercise 10</strong> : What is a javascript polyfill?</p>



<h4>Commit your code and push it to Github</h4>



<p class="exercice"><strong>Exercise 11</strong> : Register yourself on Github. Then create a private git repository (for simplicity, <strong>do not create any file such as <code>README.md</code></strong> while initialising the github repository). Finally push all your changes to Github. </p>



<p>The <code>ng new</code> command already initialised a local git repository. If you have any pending change, you have to <code>commit</code> them. A commit validates and stores a list of changes (files created, updates&#8230;) and a message describing those changes. </p>


<pre class="wp-block-code" aria-describedby="shcb-language-30" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment">#¬†list all changes currently not committed. Check if you see some "untracked files" that need to be persisted.</span>
git status

<span class="hljs-comment"># you probably want to commit new files in your repository.</span>
<span class="hljs-comment"># git add accepts a list of files or folder.</span>
<span class="hljs-comment"># '.' designates the current directory.</span>
git add .

<span class="hljs-comment">#¬†commit every pending change with a message</span>
git commit -a -m <span class="hljs-string">"configure linter and typescript"</span>

<span class="hljs-comment">#¬†commands extracted from the Github guide to push commits to remote</span>
<span class="hljs-comment">#¬†for the first time (do not forget to replace {UNDER BRACKETS} variables).</span>
git remote add origin https:<span class="hljs-comment">//github.com/{GITHUB_USERNAME}/{REPOSITORY_NAME}.git</span>
git branch -M master
git push -u origin master</code></div><small class="shcb-language" id="shcb-language-30"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="905" height="637" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-github-repository-exploration.gif" alt="" class="wp-image-1074"/><figcaption>At this step, your code is on Github. You can explore tracked files, show commit history, list changes in a particular commit, and so much more !</figcaption></figure>



<h4>Gitflow workflow</h4>



<p>All the code is currently committed on master branch. In the GitFlow workflow, the master branch is dedicated to the production code only.</p>



<p>This TPs series will use feature branches, develop and master. Each time you start a new feature (ex. adding authentification), you will start a feature branch. Once you completed your changes, open a pull request on github and merge the code to develop. When the code on develop is well tested, it can be merged on master.</p>



<p class="exercice"><strong>Exercise 12</strong> : Create a develop branch and push it to remote. Both master and develop branch should be visible in Github. The develop branch should be even with master.</p>



<h2>Play with the backend</h2>



<p>Remember: you are building the frontend of a cleaning shop service. I provide you a simple backend for that. It is hosted under:</p>



<p class="has-text-align-center"><em><a href="https://backend.thomas-veillard.fr/" target="_blank" rel="noreferrer noopener">https://backend.thomas-veillard.fr/</a></em></p>



<p>For your information, the code powering the backend is <a href="https://github.com/TruffeCendree/learning-materials/tree/master/frontend-web-development" target="_blank" rel="noreferrer noopener">publicly available</a>.</p>



<h4>API documentation and playground</h4>



<p>The API is self-documented and up to date. Open it at <a href="https://backend.thomas-veillard.fr/docs" target="_blank" rel="noreferrer noopener">https://backend.thomas-veillard.fr/docs</a>.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="835" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-1024x835.gif" alt="" class="wp-image-969" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-1024x835.gif 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-300x245.gif 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-768x626.gif 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>API playground and documentation demonstration</figcaption></figure>



<p>During database population, some seeds were generated. These built-in accounts are designed for testing purposes:</p>



<ul><li><strong>Operator</strong> (operator@cleaning.com / seedpass)</li><li><strong>Customer</strong> (customer@cleaning.com / seedpass)</li><li><strong>Employee</strong> (employee@cleaning.com / seedpass)</li></ul>



<div class="exercice" style="padding-bottom: 0; margin-bottom: 1em">
<p><strong>Exercise 10</strong> : Through the playground, manually execute the following scenario:</p>

<code>POST /auth/login</code>
<p>Connect yourself as operator.</p>

<code>GET /api/users/me</code>
<p>Query some information about your own account.</p>

<code>GET /api/users</code>
<p>List all users on the shop. That is only possible because you are an operator.</p>

<code>POST /auth/logout</code>
<p>Close your session.</p>

<code>??? find paths and arguments yourself</code>
<p>
Try to call any endpoint behind authentication.<br>
Register yourself as customer using public API.
</p>
</div>



<p class="exercice"><strong>Exercise 13</strong> : Same exercise, but this time you will use <a href="https://www.postman.com/" target="_blank" rel="noreferrer noopener">Postman</a>. This way, you are ready to test any kind of API over HTTP.</p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/">1. Setup your practical environment</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>07. JavaScript: function basis</title>
		<link>https://thomas-veillard.fr/front-end-web-development/languages/javascript-function-basis/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:43 +0000</pubDate>
				<category><![CDATA[02. Languages]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2643</guid>

					<description><![CDATA[<p>Various ways to declare a function Consider a simple function that accepts two terms and sum them. Depending on your use case, you have various syntax available. For each of the previous declarations, you can call sum(1, 2) that returns 3. However, their behaviours sightly differ as we will see later. Function parameters Let&#8217;s analyse &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-function-basis/" class="more-link">Continuer la lecture de <span class="screen-reader-text">07. JavaScript: function basis</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-function-basis/">07. JavaScript: function basis</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Various ways to declare a function</h4>



<p>Consider a simple <code>function</code> that accepts  two terms and sum them. Depending on your use case, you have various syntax available.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-31" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// named function</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span> (<span class="hljs-params">a, b</span>) </span>{ <span class="hljs-keyword">return</span> a + b; }

<span class="hljs-comment">// anonymous function assigned to a constant</span>
<span class="hljs-keyword">const</span> sum = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>{ <span class="hljs-keyword">return</span> a + b; };

<span class="hljs-comment">// arrow function assigned to a constant</span>
<span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> { <span class="hljs-keyword">return</span> a + b; };

<span class="hljs-comment">// arrow function assigned to a constant, with implicit return</span>
<span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b;</code></div><small class="shcb-language" id="shcb-language-31"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>For each of the previous declarations, you can call <code>sum(1, 2)</code> that returns <code>3</code>. However, their behaviours sightly differ as we will see later.</p>



<h4>Function parameters</h4>



<p>Let&rsquo;s analyse the following named function declaration:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-32" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatPrice</span> (<span class="hljs-params">amount, opts = {}</span>) </span>{
 opts.symbol ||= <span class="hljs-string">'‚Ç¨'</span>;
 opts.precision ??= <span class="hljs-number">2</span>;
 <span class="hljs-keyword">return</span> amount.toFixed(opts.precision) + <span class="hljs-string">' '</span> + opts.symbol;
}</code></div><small class="shcb-language" id="shcb-language-32"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>2 named arguments are declared in the parameter list: <code>amount</code> and <code>opts</code>.</p>



<p>In JavaScript, the declared parameters does not have to match those passed at runtime. In other words, those examples do not throw a syntax error:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-33" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript">formatPrice();
formatPrice(<span class="hljs-number">10</span>);
formatPrice(<span class="hljs-number">10</span>, {});
formatPrice(<span class="hljs-number">10</span>, {}, <span class="hljs-string">'not declared'</span>);</code></div><small class="shcb-language" id="shcb-language-33"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>When a parameter is missing, it fallbacks in priority to:</p>



<ul><li>its default value if provided in function declaration (<code>{}</code> in the case of <code>opts</code>).</li><li><code>undefined</code> in last resort (that is the case of <code>amount</code>).</li></ul>



<h5>The <code>arguments</code> variable</h5>



<p>In addition, the runtime parameter list is available inside the function&rsquo;s body as the array-like <code>arguments</code> variable.</p>



<figure class="wp-block-table is-style-stripes small-table"><table><thead><tr><th>Function call</th><th>amount</th><th>opts</th><th>arguments</th></tr></thead><tbody><tr><td><code>formatPrice();</code></td><td><code>undefined</code> *</td><td><code>{}</code></td><td><code>[]</code></td></tr><tr><td><code>formatPrice(10);</code></td><td><code>10</code></td><td><code>{}</code></td><td><code>[10]</code></td></tr><tr><td><code>formatPrice(10, { symbol: '$' });</code></td><td><code>10</code></td><td><code>{symbol: '$'}</code></td><td><code>[10, {symbol: '$'}]</code></td></tr><tr><td><code>formatPrice(10, {}, 'not declared');</code></td><td><code>10</code></td><td><code>{}</code></td><td>&nbsp;<code>[10, {}, "not declared"]</code></td></tr></tbody></table><figcaption>* <code>formatPrice</code> throws a error when calling <code>amount.toFixed()</code> on <code>undefined</code>.</figcaption></figure>



<style>.small-table { font-size: 80%; margin-bottom: 1em; }</style>



<p>Using <code>arguments</code> in function&rsquo;s body requires use of the <code>function</code> keyword for declaration. That is why <code>arguments</code> is not defined inside an arrow function.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-34" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">withKeyword</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>); <span class="hljs-comment">// OK</span>
}

<span class="hljs-keyword">const</span> arrowFunction = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>); <span class="hljs-comment">// ReferenceError: arguments is not defined</span>
}</code></div><small class="shcb-language" id="shcb-language-34"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h5>The Rest Parameter operator (<code>...</code>)</h5>



<p>Despite the <code>arguments</code> variable is very powerful, it may become error-prone.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-35" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parentFunction1</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">childFunction</span> (<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">arguments</span>).join(<span class="hljs-string">','</span>); }
  <span class="hljs-keyword">return</span> childFunction();
}

<span class="hljs-built_in">console</span>.log(parentFunction1(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// prints ''</span></code></div><small class="shcb-language" id="shcb-language-35"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>

<pre class="wp-block-code" aria-describedby="shcb-language-36" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parentFunction2</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> childFunction = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> { <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">arguments</span>).join(<span class="hljs-string">','</span>); }
  <span class="hljs-keyword">return</span> childFunction();
}

<span class="hljs-built_in">console</span>.log(parentFunction2(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// prints '1,2,3'</span></code></div><small class="shcb-language" id="shcb-language-36"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>First of all, <code>arguments</code> is an array-like, but not an array. It supports <code>arguments.length</code> and <code>arguments[index]</code>, but not other array&rsquo;s methods like <code>array.join(separator)</code>. That is why I needed <code>Array.from(arguments)</code> in the previous example.</p>



<p>Then, you noticed that switching from <code>function</code> keyword to arrow function changed the behaviour of our code. Remember that an arrow function does not override <code>arguments</code> inside its body!</p>



<p>In addition, <code>arguments</code> is not a meaningful name from business logic perspective.</p>



<p>Hopefully, they are a room for improvement, thanks to the spread operator (<code>...</code>).</p>


<pre class="wp-block-code" aria-describedby="shcb-language-37" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parentFunction</span> (<span class="hljs-params">...joinables</span>) </span>{
  <span class="hljs-keyword">const</span> childFunction = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> { <span class="hljs-keyword">return</span> joinables.join(<span class="hljs-string">','</span>); }
  <span class="hljs-keyword">return</span> childFunction();
}</code></div><small class="shcb-language" id="shcb-language-37"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Finally, if your <code>parentFunction</code> accepted both fixed count of parameters followed by varying length list of parameters, you should work with index offset&#8230; But is it simple with the spread operator.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-38" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">applyOperator</span> (<span class="hljs-params">operator, ...operands</span>) </span>{}
<span class="hljs-built_in">console</span>.log(applyOperator(<span class="hljs-string">'+'</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// may output 6 once implemented</span></code></div><small class="shcb-language" id="shcb-language-38"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Return value</h4>



<ul><li>If a <code>return</code> statement is executed inside a function body, the function exits with evaluated expression.</li><li>For arrow function without curly brackets around the body expression, return is implicit. Example: <code>const sum = (a, b) =&gt; a + b</code>;</li><li>In absence of explicitly executed or implicit <code>return</code> statement, it fallbacks to <code>undefined</code>.</li></ul>



<p></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-function-basis/">07. JavaScript: function basis</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
