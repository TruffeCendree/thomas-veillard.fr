<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/</link>
	<description>Mes cours et supports pédagogiques pour l&#039;enseignement de l&#039;ingénierie informatique.</description>
	<lastBuildDate>Sat, 12 Nov 2022 10:13:32 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1</generator>
	<item>
		<title>03. IAM App: database &#038; model bootstraping (pratical activity)</title>
		<link>https://thomas-veillard.fr/front-end-web-development/03-iam-app-database-model-bootstraping-pratical-activity/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 12 Nov 2022 10:13:31 +0000</pubDate>
				<category><![CDATA[04. Backend]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=4542</guid>

					<description><![CDATA[<p>Learning outcomes Specifications In this tutorial, you will prepare the foundations for the Identity and Access Management layer for a future RestAPI. The start point is user registration and cookies-based session management. The following tutorials will leverage those capabilities to build an Oauth2 authorisation server and fine-grained permission management in front of a Rest API. &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/03-iam-app-database-model-bootstraping-pratical-activity/" class="more-link">Continuer la lecture de <span class="screen-reader-text">03. IAM App: database &#38; model bootstraping (pratical activity)</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/03-iam-app-database-model-bootstraping-pratical-activity/">03. IAM App: database &amp; model bootstraping (pratical activity)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul>
<li>Connecting to a relational database (MySQL or PostgreSQL) from node.</li>



<li>Setting up an Object Relational Mapping (TypeORM) and a first model <code>User</code>.</li>



<li>Writing model validations that operate at the ORM level.</li>



<li>Working with asynchronous <code>Promises</code> in nodejs (database IO are async).</li>



<li>Preparing project for a Test Driven Development approach.</li>
</ul>



<h4>Specifications</h4>



<p>In this tutorial, you will prepare the foundations for the <code>Identity and Access Management</code> layer for a future RestAPI. The start point is user registration and cookies-based session management.</p>



<p>The following tutorials will leverage those capabilities to build an Oauth2 authorisation server and fine-grained permission management in front of a Rest API.</p>



<p>At the end of the tutorial, the database and model parts have to be set up. The proper functioning will be checked through automated <strong>integration tests</strong> against a live database.</p>



<h4>Prerequires</h4>



<ul>
<li>Ensure you installed NodeJS 16+, using the <code>node --version</code> command.</li>



<li>Operate a relational database server.  During code demonstrations, I will use a dockerized <code>mariadb</code> instance, but a regular <code>mysql</code> or a <code>postgresql</code> should be fine. Of course, <code>PostgreSQL</code> requires another nodejs driver.</li>
</ul>



<p>You are free to install the RDBMS the way you want (docker, system wide install, etc.). For the users of <code>docker-compose</code>, here is a ready-to-use recipe:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="YAML" data-shcb-language-slug="yaml"><div><code class="hljs language-yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">"2"</span>

<span class="hljs-attr">services:</span>
  <span class="hljs-attr">mariadb:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">mariadb</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/mariadb:/var/lib/mysql:rw</span>
    <span class="hljs-attr">environment:</span>
      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">privatepassword</span>
    <span class="hljs-attr">ports:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:3306:3306</span></code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">YAML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">yaml</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Basic typescript project template</h4>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-download" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  <a href="https://thomas-veillard.fr/wp-content/uploads/2021/11/node-typescript-template.zip">Download the template for node + typescript projects (source code)</a>
</div>
</div>



<p>I provide you a ready to go hello-world template, with out-of-the-box support for <code>typescript</code> and my recommended set of <code>eslint</code> code quality rules. Nothing else is included. The following bullets explain how to get started with that template:</p>



<ol>
<li>Take a look at the dependencies of the template and understand their goal. </li>



<li>Then install those dependencies using <code>npm install</code>. In a general manner, you should check the code you are about to pull and run before actually running it.
<ul>
<li></li>
</ul>
</li>



<li>Discover the preset commands inside <code>package.json#scripts</code>.</li>



<li>Write your code in <code>src</code> folder, use <code>npm run lint</code> to check the code quality, compile it to js using <code>npm run build</code> and eventually run the transpiled code using <code>npm run start</code>.</li>
</ol>



<h4>What is an ORM?</h4>



<p>In this tutorial, you will use <code>TypeORM</code>, an Object Relational Mapping built for typescript. Its primary purpose is exposing the tables and records of your database as objects to the rest of your code. As the name suggests, it « maps » typescript classes to databases&rsquo; tables and vis-versa. The ORM also abstracts the underlying database engine, allowing support of multiple providers mostly without any code change.</p>



<p>Today, you are about to leverage its schema sync capability (that works both for initial sync and incremental changes). By defining our model classes the typeorm way, the library will automatically populate the database with the right tables, columns and indexes. Warning: never use this feature on production data and existing databases, because it tends to destroy and recreate columns. The proper way to maintain schema over time is called <a href="https://typeorm.io/migrations" target="_blank" rel="noreferrer noopener">migration</a>.</p>



<p>Please refer to the official documentation about <a href="https://typeorm.io/" target="_blank" rel="noreferrer noopener">how to get started with typeorm.</a> In addition, <strong>a code demonstration is scheduled</strong>.</p>



<div class="is-layout-flex wp-container-3 wp-block-columns exercice">
<div class="is-layout-flow wp-block-column exercise">
<p><strong>Exercise 1</strong>: Set up a <code>datasource</code> (exported from <code>src/lib/typeorm.ts</code>) that connects to your newly created (and empty) database. Take a look at the <code>dotenv</code> package for managing credentials and configurations. Then, define the <code>User</code> model inside <code>src/entities/user.ts</code>. Running the node server should automatically create the <code>user</code> table.</p>



<p>The <code>user</code> table should contain the following columns:</p>



<ul class="u-mlm">
<li><code>id</code> (integer, auto-incremented, not null) ;</li>



<li><code>firstname</code> (string, not null) ;</li>



<li><code>lastname</code> (string, not null) ;</li>



<li><code>email</code> (string, not null) ;</li>



<li><code>passwordHash</code> (string, not null).</li>
</ul>



<p class="u-mbn">Prefer the <code>Data Mapper</code> paradigm over <code>Active Record</code> paradigm (your model class must not extend the <code>BaseEntity</code> class). You will discover why in the next session.</p>
</div>
</div>



<h4>Test Driven Development</h4>



<p>TDD supposes you set up asap a test runner (a library responsible for preparing the scenario of each test case and actually run the code of the test). Let&rsquo;s do this by installing <code>mocha</code> (the test runner) and <code>chai</code> (an assertion library). Those familiar with <code>jest</code> can rely on it instead.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">npm install --save-dev mocha @types/mocha chai @types/chai</code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>In addition, you can register additional scripts in <code>package.json</code>. Above is my command to run the whole test suite. Windows users: you may need to change the way the <code>NODE_ENV</code> environment variable is set.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript">NODE_ENV=test mocha --recursive dist/server/specs --exit --<span class="hljs-keyword">async</span>-stack-traces</code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>You will map the test file based on the original source (ex. <code>src/entities/user.ts</code> will be covered by <code>src/specs/entities/user.spec.ts</code>). While this structure plays well for unit testing and integration tests, you are also allowed to create additional files into the <code>src/specs</code> folder.</p>



<p>Here a start point for the source code of your test:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// src/specs/entities/user.ts</span>
<span class="hljs-keyword">import</span> { expect } <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>
<span class="hljs-keyword">import</span> { User } <span class="hljs-keyword">from</span> <span class="hljs-string">'...'</span>

describe(<span class="hljs-string">'User'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  beforeAll(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> initialise the datasource (database connection)</span>
  })
    
  before(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> drop the content of the user table between each it().</span>
  })

  describe(<span class="hljs-string">'validations'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    it(<span class="hljs-string">'should create a new User in database'</span>)
    it(<span class="hljs-string">'should raise error if email is missing'</span>)
  })
})
</code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 2</strong>: Please first focus on implementing (and passing green) the two test cases. Once done, you can think about DRY (don&rsquo;t repeat yourself principle) and mutualise the test database management across the whole test suite (only composed of <code>src/specs/entities/user.spec.ts</code> for now). In addition, you could rely on <code>NODE_ENV=test</code> to override the database name (and potentially more configurations).</p>



<p class="question"><strong>Question 1</strong>: Why should you reset the database before each test case? Give examples of issues you may meet otherwise.</p>



<h4>Adding validations and cover them with test cases</h4>



<p class="question"><strong>Question 2</strong>: What kind of error is currently thrown in test case <code> "should raise error if email is missing"</code>? Is it an SQL error (occurring in the database server) or a validation error? What should it be, so it is easy and secure to format an error message to the end user?</p>



<div class="is-layout-flex wp-container-8 wp-block-columns">
<div class="is-layout-flow wp-block-column exercice">
<p><strong>Exercise 3</strong>: Implement a <code>ValidationError</code> class (with appropriate inheritance) that will be raised when trying to save (both on creation and update) an invalid user object. You can take advantage of <a href="https://typeorm.io/listeners-and-subscribers#what-is-a-subscriber" target="_blank" rel="noreferrer noopener">typeorm listeners</a>, especially <code>@BeforeInsert</code> and <code>@BeforeUpdate</code> on purpose. Your first use case is checking that required properties are present. Update the corresponding integration test.</p>



<p class="u-mbn">Bonus: most advanced developers may infer the requireness of properties based on null acceptance defined in <a href="https://typeorm.delightful.studio/classes/_metadata_entitymetadata_.entitymetadata.html" target="_blank" rel="noreferrer noopener">typeorm column metadata</a>. Metadata are collected when using typescript annotation like <code>@Column()</code> and can be retrieved from <code>datasource.entityMetadatas</code>.</p>
</div>
</div>



<p>The next attribute to validate is the email. It must be unique (case insensitive) in the whole table. For integrity reasons, we will validate this at the database level. But since the error messages from the database are hard to manage (and should not be disclosed), we will also implement throw a <code>ValidationError</code> if the case is detected by node.</p>



<p class="question"><strong>Question 3</strong>: why do we need both a database constrain and a validation in typescript for the same check?</p>



<p class="exercice"><strong>Exercise 4:</strong> Implement validation that ensures the uniqueness (case insensitive) of the email. That validation will trigger a DB call, so is async by nature. You cannot use Entity Listener like <code>@BeforeUpdate</code>, because any returned promise is not awaited. Instead, you will need a <a href="https://typeorm.io/listeners-and-subscribers#what-is-a-subscriber" target="_blank" rel="noreferrer noopener">Subscriber</a>. Of course, you have to write the corresponding specs.</p>



<h4>Validations and security considerations</h4>



<div class="is-layout-flex wp-container-10 wp-block-columns">
<div class="is-layout-flow wp-block-column question">
<p><strong>Question 4</strong>: how models validations, such as the one you just wrote, can serve the security of your application? Give an example.</p>



<p class="u-mbn">In addition, which database mechanism can be leveraged for security hardening in case a validation fails (ex. while persisting 2 entities in response to the same action)? Clue: the mechanism I am thinking about could also operate on <code>afterUpdate</code> subscriptions.</p>
</div>
</div>



<h4>The <code><code>setPassword(password, passwordConfirmation)</code></code> method</h4>



<p>Nowadays, it is pretty well known that passwords cannot be stored as plain texts inside the database for security reasons. Our application primarily needs a way to compare the user input with a fingerprint stored in the database. In case of data breaches, that same fingerprint should prevent the recovery of the original plain text. In cryptographic science lingo, that what we call a <strong>hash</strong>.</p>



<p>The equality comparison is possible because the same password hashed with the same algorithm and parameters outputs a determinist hash.</p>



<p>Excluding potential flaws in the hashing algorithm, the only way to recover the plain text is brute force attack. Any small change to the input must trigger major changes in the output. Otherwise, attackers could use heuristics and kinds of dichotomy algorithms to reduce the spectrum of values to test. The hash algorithm must also be expensive enough (in computations and memory usage) to limit the number of random clear passwords attackers can try in a brute force attack for a reasonable amount of time. Some algorithms provide parameters that increase the number of internal iterations and therefore, increase the compute requirements, making them more future proof.</p>



<p>Since the same input is expected to generate the same output, attackers could operate with <a href="https://en.wikipedia.org/wiki/Rainbow_table" target="_blank" rel="noreferrer noopener">rainbow tables</a>: precomputed tables of hashes. Honestly, those tables focus on entries coming from dictionaries and potential passwords (ex. word with characters substitution and frequently used sequences). That where the <strong>salt</strong> comes to play. If you add random bytes (aka. additional entropy) to the plain text, the input of the hash algorithm is no more in the rainbow table. To ensure the bad actor does not craft a rainbow table for your salt, you have to generate one shot salts.</p>



<p>In this tutorial, you will use the <code>bcrypt</code> package. It is a production grade hashing algorithm and library with built-in support for hashing.</p>



<p class="exercice"><strong>Exercise 5</strong>: add an <code>async setPassword(password, passwordConfirmation)</code> method in the <code>User</code> class. <code>Bcrypt</code> can offload the hashing work outside of the main thread, allowing the main thread to process other tasks during that time (from security criteria, it matters for the <strong>availability</strong> of your app because nodejs is single-threaded). If the password does not match, raise a semantic error (instance of  <code>ValidationError</code>). Else, hash the password and discard the inputs. Improve your test suite.</p>



<p class="exercice"><strong>Exercise 6</strong>: Compute the strength (entropy) of the password being set in bits. Use can play with the <a href="https://www.ssi.gouv.fr/administration/precautions-elementaires/calculer-la-force-dun-mot-de-passe/" target="_blank" rel="noreferrer noopener">strength calculator provided by ANSSI</a> and get more familiar with the criteria that improve password robustness. Then, implement a validation so password has at least 80 bits of entropy (with TDD).  Unit tests against the function computing the entropy would be appreciated. PS: you do not need any <code>npm</code> package for that.</p>



<p class="exercice"><strong>Exercise 7</strong>: add an <code>async isPasswordValid(password)</code> method in the <code>User</code> class, that returns a <code>Promise&lt;boolean&gt;</code>. Cover this method with tests.</p>



<h4>Prepare the arrival of new specs files</h4>



<p class="exercice">The next tutorial session will focus on implementing the login and registration http endpoints. Development being driven by tests, you will create new test files. Move what will be common to the whole test suite into  <code>specs/spec-helper.ts</code>.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/03-iam-app-database-model-bootstraping-pratical-activity/">03. IAM App: database &amp; model bootstraping (pratical activity)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>02. Invoice PDF generation HTTP API (practical activity)</title>
		<link>https://thomas-veillard.fr/front-end-web-development/04-backend/invoice-pdf-generation-http-api/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sun, 05 Dec 2021 15:19:24 +0000</pubDate>
				<category><![CDATA[04. Backend]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=4225</guid>

					<description><![CDATA[<p>Learning outcomes Build a simple HTTP server using fastify. Validate inputs and serialise payloads using JSON schemas. Generate TypeScript interfaces from JSON schemas. Serve text/html, application/json and application/pdf content-types. Write server-side statically checkable templates (thanks to JSX). Generate high quality PDF using puppeteer. Work with promises, async error handling, error serialisation, etc. Write specs, compute &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/04-backend/invoice-pdf-generation-http-api/" class="more-link">Continuer la lecture de <span class="screen-reader-text">02. Invoice PDF generation HTTP API (practical activity)</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/04-backend/invoice-pdf-generation-http-api/">02. Invoice PDF generation HTTP API (practical activity)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Build a simple HTTP server using fastify.</li><li>Validate inputs and serialise payloads using JSON schemas.</li><li>Generate TypeScript interfaces from JSON schemas.</li><li>Serve <code>text/html</code>,  <code>application/json</code> and <code>application/pdf</code> content-types.</li><li>Write server-side statically checkable templates (thanks to JSX).</li><li>Generate high quality PDF using puppeteer.</li><li>Work with promises, async error handling, error serialisation, etc.</li><li>Write specs, compute a test coverage report.</li><li>Generate OpenAPI documentation (fastify-swagger).</li></ul>



<h4>Context</h4>



<p>Necessarily, companies have to produce invoices and other kinds of formal documents.  Because this is error-prone and time consuming, they may establish automated workflows. Through this tutorial, you will implement an invoice PDF renderer API.</p>



<p>At the end of the tutorial, no persistence is expected. You do not have to implement any database connection or session management. All is about core fastify features, PDF generation and TypeScript support.</p>



<p>A single endpoint is expected. It accepts a JSON payload as POST body and may return a JSON response, an HTML rendered preview or a PDF blob depending on the <code>Accept</code> header.</p>



<h4>Data schema</h4>



<p>In a real-world application, the data could be formalised as multiple entities: <code>Address</code>, <code>Customer</code>, <code>Biller</code>, <code>ItemInvoice</code> and finally <code>Invoice</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-11" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">interface</span> Address {
  street: <span class="hljs-built_in">string</span>
  city: <span class="hljs-built_in">string</span>
  zipcode: <span class="hljs-built_in">string</span>
  country: <span class="hljs-built_in">string</span>
  state: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span>
  additional: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span>
}

<span class="hljs-keyword">interface</span> Customer {
  name: <span class="hljs-built_in">string</span>
  address: Address
}

<span class="hljs-keyword">interface</span> Biller {
  address: Address
  phoneNumber: <span class="hljs-built_in">string</span>
  email: <span class="hljs-built_in">string</span>
  invoiceLegalFooter: <span class="hljs-built_in">string</span>
}

<span class="hljs-keyword">interface</span> ItemInvoice {
  description: <span class="hljs-built_in">string</span>
  quantity: <span class="hljs-built_in">number</span>
  unitPriceWithoutTax: <span class="hljs-built_in">number</span>
  taxPercent: <span class="hljs-built_in">number</span>
}

<span class="hljs-keyword">interface</span> Invoice {
  reference: <span class="hljs-built_in">string</span>
  date: <span class="hljs-built_in">Date</span>
  customer: Customer
  biller: Biller
  itemInvoices: ItemInvoice[]
  paymentDelayInDays: <span class="hljs-built_in">number</span>
}</code></div><small class="shcb-language" id="shcb-language-11"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>In our case, the endpoint will receive a single payload with nested properties matching the above <code>Invoice</code> interface. Also, note that the JSON format encodes dates as strings. For example:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-12" data-shcb-language-name="JSON / JSON avec commentaires" data-shcb-language-slug="json"><div><code class="hljs language-json">{
  <span class="hljs-attr">"reference"</span>: <span class="hljs-string">"2021-001"</span>,
  <span class="hljs-attr">"date"</span>: <span class="hljs-string">"2021-12-01"</span>,
  <span class="hljs-attr">"paymentDelayInDays"</span>: <span class="hljs-number">30</span>,
  <span class="hljs-attr">"customer"</span>: {
    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Andrew SMITH"</span>,
    <span class="hljs-attr">"address"</span>: {
      <span class="hljs-attr">"street"</span>: <span class="hljs-string">"1111 Woodvale Drive"</span>,
      <span class="hljs-attr">"city"</span>: <span class="hljs-string">"Rodney"</span>,
      <span class="hljs-attr">"zipcode"</span>: <span class="hljs-string">"N0L 2C0"</span>,
      <span class="hljs-attr">"state"</span>: <span class="hljs-string">"Ontario"</span>,
      <span class="hljs-attr">"country"</span>: <span class="hljs-string">"Canada"</span>,
      <span class="hljs-attr">"additional"</span>: <span class="hljs-string">"Appartement B110"</span>
    }
  },
  <span class="hljs-attr">"biller"</span>: {
    <span class="hljs-attr">"phoneNumber"</span>: <span class="hljs-string">"+33123456789"</span>,
    <span class="hljs-attr">"email"</span>: <span class="hljs-string">"seller@myshop.com"</span>,
    <span class="hljs-attr">"invoiceLegalFooter"</span>: <span class="hljs-string">"IBAN to pay: FRXX XXXX XXXX XXXX XXXX\n SIRET: XXXXXXXXXXXX, TVA number: XXXXXXXXXXXXXXXX"</span>,
    <span class="hljs-attr">"address"</span>: {
      <span class="hljs-attr">"street"</span>: <span class="hljs-string">"92 rue du Clair Bocage"</span>,
      <span class="hljs-attr">"city"</span>: <span class="hljs-string">"LA ROCHE-SUR-YON"</span>,
      <span class="hljs-attr">"zipcode"</span>: <span class="hljs-string">"85000"</span>,
      <span class="hljs-attr">"state"</span>: <span class="hljs-literal">null</span>,
      <span class="hljs-attr">"country"</span>: <span class="hljs-string">"France"</span>,
      <span class="hljs-attr">"additional"</span>: <span class="hljs-literal">null</span>
    }
  },
  <span class="hljs-attr">"itemInvoices"</span>: [
    {
      <span class="hljs-attr">"description"</span>: <span class="hljs-string">"APhone Z001"</span>,
      <span class="hljs-attr">"quantity"</span>: <span class="hljs-number">1</span>,
      <span class="hljs-attr">"unitPriceWithoutTax"</span>: <span class="hljs-number">300</span>,
      <span class="hljs-attr">"taxPercent"</span>: <span class="hljs-number">20</span>
    }
  ]
}</code></div><small class="shcb-language" id="shcb-language-12"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JSON / JSON avec commentaires</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">json</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Simple echo server</h4>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-download" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  <a href="https://thomas-veillard.fr/wp-content/uploads/2021/11/node-typescript-template.zip">Download the template for node + typescript projects (source code)</a>
</div>
</div>



<div class="is-layout-flex wp-container-14 wp-block-columns">
<div class="is-layout-flow wp-block-column exercice">
<p id="exercice"><strong>Exercise 1</strong>: Now the context is given, please create a simple HTTP server with <a href="https://www.fastify.io/" target="_blank" rel="noreferrer noopener">fastify</a>, that:</p>



<ul class="u-mlm u-mbs"><li>implements a single route (POST: /invoices);</li><li>accepts any JSON entity on that endpoint;</li><li>responds with the input JSON (like an echo server).</li></ul>
</div>
</div>



<p class="exercice"><strong>Exercise 2</strong>: Then, write a JSON schema that matches the invoice entity (as described previously). There are plenty of examples <a href="https://json-schema.org/learn/miscellaneous-examples.html" target="_blank" rel="noreferrer noopener">here</a>. In addition, you can manually test your schema against a payload <a href="https://www.jsonschemavalidator.net/" target="_blank" rel="noreferrer noopener">here</a>.</p>



<p class="exercice"><strong>Exercise 3</strong>: Finally, use that schema as part of input validation <strong>and</strong> output serialisation (<a href="https://www.fastify.io/docs/latest/Validation-and-Serialization/" target="_blank" rel="noreferrer noopener">see the fastify&rsquo;s documentation</a>).</p>



<p>The JSON schema validates inputs at runtime (it is a core feature of fastify). But Typescript cannot infer the type by its own. You could of course write static type definitions&#8230; But they may become obsolete. Anyway, code duplication is mostly always a bad idea.</p>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> Instead, I will show in class how to generate typescript interfaces from JSON schemas using <a href="https://www.npmjs.com/package/json-schema-to-typescript" target="_blank" rel="noreferrer noopener">json-schema-to-typescript</a>.</p>



<h4>Hand-testing the fastify&rsquo;s JSON-schema algorithms.</h4>



<p>Since input validation and output serialisation are critical points for the application security, we must understand how it behaves on « edge » cases (when things do not follow the nominal case).</p>



<p>Please answer the above questions in your <code>README.md</code>.</p>



<div class="is-layout-flex wp-container-16 wp-block-columns">
<div class="is-layout-flow wp-block-column question">
<p><strong>Question 1</strong>: About input validation:</p>



<ul class="u-mlm u-mbs"><li>How fastify processes unknown properties?</li><li>How fastify behaves if a known property is missing in the payload?</li><li>What happens if an input property is <code>null</code>?</li></ul>
</div>
</div>



<div class="is-layout-flex wp-container-18 wp-block-columns">
<div class="is-layout-flow wp-block-column question">
<p><strong>Question 2</strong>: About response serialisation:</p>



<ul class="u-mlm u-mbs"><li>How fastify processes unknown properties?</li><li>How fastify behaves if a known property is missing in the payload?</li></ul>
</div>
</div>



<p class="question"><strong>Question 3</strong>: Is input validation just a matter of types and schemae?</p>



<h4>Setting up tests with fastify</h4>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> We will set up together a first automated spec for this endpoint. Starting from now, you are strongly encouraged to systematically write specs for any further work during this module.</p>



<p>Useful resources:&nbsp;<a href="https://istanbul.js.org/" target="_blank" rel="noreferrer noopener">istanbul</a>,&nbsp;<a href="https://mochajs.org/" target="_blank" rel="noreferrer noopener">mocha</a>,&nbsp;<a href="https://www.chaijs.com/" target="_blank" rel="noreferrer noopener">chai</a>,&nbsp;<a href="https://www.npmjs.com/package/faker" target="_blank" rel="noreferrer noopener">faker</a>, <a href="https://code.visualstudio.com/docs/editor/debugging" target="_blank" rel="noreferrer noopener">debugging</a>…</p>



<h4>Conditional response format</h4>



<p>Depending on the mimetype provided in the request <code>Accept</code> header, the server may respond with another type of content. Currently, whatever the value of this header, your current implementation outputs a JSON payload.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-19" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">enum</span> MIME_TYPES {
  HTML = <span class="hljs-string">'text/html'</span>,
  <span class="hljs-built_in">JSON</span> = <span class="hljs-string">'application/json'</span>,
  PDF = <span class="hljs-string">'application/pdf'</span>
}

instance.post(<span class="hljs-string">'/invoices'</span>, <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">request, reply</span>) </span>{
  <span class="hljs-keyword">switch</span> (request.headers.accept) {
    <span class="hljs-keyword">case</span> MIME_TYPES.JSON:
      <span class="hljs-keyword">return</span> request.body;

    <span class="hljs-keyword">case</span> MIME_TYPES.PDF:
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'PDF are not yet implemented'</span>);
    
    <span class="hljs-keyword">default</span>:
      <span class="hljs-keyword">return</span> reply.type(MIME_TYPES.HTML).send(<span class="hljs-string">'&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;Hello world&lt;/body&gt;&lt;/html&gt;'</span>)
  }
})</code></div><small class="shcb-language" id="shcb-language-19"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>The core topic of this section is rendering the HTML template on the server side. There are plenty of ways:</p>



<ul><li>Working with raw string concatenation: zero-dependency solution, with readability and maintainability issues. It can easily lead to XSS injections.</li><li>Working with a template rendering engine, such as <a href="https://ejs.co/" target="_blank" rel="noreferrer noopener">ejs</a>: robust solution with built-in HTML special character escapement, preventing most (but not all) XSS. That template engine was built for JS, so is basically out of the scope of TypeScript!</li><li>Working with JSX (or more exactly TSX in case of TypeScript). This is a way to write a kind of HTML in JavaScript. Plenty of tools can render the HTML from a JSX source. One of them is <a href="https://fr.reactjs.org/docs/react-dom-server.html" target="_blank" rel="noreferrer noopener">react-dom/server</a>. All TypeScript features work natively in .tsx files.</li></ul>



<p class="exercice"><strong>Exercise 4</strong>: Render the invoice as an HTML page if the request asks for HTML format. JSX should be preferred because of static type checks. But it is also more complex to start with. Ejs is also a valid option to fulfil the exercise at time. For the review, please include a screenshot of the rendered page: the feature coverage, the visual result and the code quality* all matter.</p>



<p>* proper use of typescript checking, addition of specs, etc.</p>



<h4>Render as PDF</h4>



<p class="exercice"><strong>Exercise 5</strong>: Using Google <a href="https://www.npmjs.com/package/puppeteer" target="_blank" rel="noreferrer noopener">puppeteer</a> (a headless chromium instance with a nodejs driver), render your HTML payload as PDF. Unlike previous content types, a PDF is a binary file. So you have to deal with binary <a href="https://nodejs.org/api/buffer.html" target="_blank" rel="noreferrer noopener">Buffer</a>. In addition, puppeteer uses promises. Add a spec for this case.</p>



<p class="question"><strong>Question 4</strong>: Why should you disable JavaScript in the headless browser instance? And, of course, disable it!</p>



<h4>Safer error handling</h4>



<p>As for the final project, we will take care of the security of error handling. Web applications should not leak sensitive information. One of the attack vectors is error serialisation when the app sends internal errors messages.</p>



<p>A status code 400 notifies an invalid request. It is acceptable to send the failure&rsquo;s reason to the user. If the server provides an API consumed by developers, this is a welcome help for them.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-20" data-shcb-language-name="JSON / JSON avec commentaires" data-shcb-language-slug="json"><div><code class="hljs language-json">{
    <span class="hljs-attr">"statusCode"</span>: <span class="hljs-number">400</span>,
    <span class="hljs-attr">"error"</span>: <span class="hljs-string">"Bad Request"</span>,
    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"body should have required property 'hello'"</span>
}</code></div><small class="shcb-language" id="shcb-language-20"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JSON / JSON avec commentaires</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">json</span><span class="shcb-language__paren">)</span></small></pre>


<p>But is it OK to serve this?</p>


<pre class="wp-block-code" aria-describedby="shcb-language-21" data-shcb-language-name="JSON / JSON avec commentaires" data-shcb-language-slug="json"><div><code class="hljs language-json">{
    <span class="hljs-attr">"statusCode"</span>: <span class="hljs-number">500</span>,
    <span class="hljs-attr">"error"</span>: <span class="hljs-string">"Internal Server Error"</span>,
    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"Unable to connect to database on root@localhost, with password authentication"</span>
}</code></div><small class="shcb-language" id="shcb-language-21"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JSON / JSON avec commentaires</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">json</span><span class="shcb-language__paren">)</span></small></pre>


<p>Or this?</p>


<pre class="wp-block-code" aria-describedby="shcb-language-22" data-shcb-language-name="JSON / JSON avec commentaires" data-shcb-language-slug="json"><div><code class="hljs language-json">{
    <span class="hljs-attr">"statusCode"</span>: <span class="hljs-number">500</span>,
    <span class="hljs-attr">"error"</span>: <span class="hljs-string">"Internal Server Error"</span>,
    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"Ambiguous column name \"id\"; SQL statement: SELECT * FROM exhibit JOIN exhibit ON (id = previous_id); [90059-176]"</span>
}</code></div><small class="shcb-language" id="shcb-language-22"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JSON / JSON avec commentaires</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">json</span><span class="shcb-language__paren">)</span></small></pre>


<p>Everything that is related to <code>Internal Server Error</code> (HTTP code 500) should never reach the end user (unless you are in development environment). But if you try yourself, you will notice fastify sends those errors in production mode (<code>NODE_ENV=production</code>)! As a web developer, I saw this on publicly routed servers!</p>



<p>This is because of the default <a href="https://github.com/fastify/fastify/blob/1e94070992d911a81a26597c25f2d35ae65f3d91/fastify.js#L74" target="_blank" rel="noreferrer noopener">error handler (the link redirects to fastify source code)</a> . You should override the handler globally using <a href="https://www.fastify.io/docs/latest/Server/#seterrorhandler" target="_blank" rel="noreferrer noopener">setErrorHandler</a>.</p>



<p class="exercice"><strong>Exercise 6</strong>: override the default error handler, with security in mind.</p>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> Then I will show you how to use the error handler and Promise rejection to cover various failures scenario in a DRY* way (from invalid phone numbers validation to illegal accesses&#8230;). Thanks to that, you will say goodbye to verbose and overcomplicated errors management in HTTP controllers.</p>



<p>* DRY = Don&rsquo;t Repeat Yourself (and I would like to not repeat this anymore 🙂)</p>



<p class="exercice"><strong>Exercise 7</strong>: Accoding to my previous demonstration, validate that the phone number is valid (using <a href="https://www.npmjs.com/package/libphonenumber-js" target="_blank" rel="noreferrer noopener">libphonenumber-js</a>), that emails match <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#basic_validation" target="_blank" rel="noreferrer noopener">HTML5 official regex</a> and that all prices are positive. Else, throw an error the message of which is sent to the client. The HTTP status code should be 422 in case of rejection.</p>



<p>In facts, the previous validations should not be in the controller&#8230; but moved inside models. This is much cleaner, DRY and consistent across the app (checked every time an entity is persisted, whatever the code calling it). But we do not have models yet, so that is for another day!</p>



<p><strong>Bonus</strong>: If we have enough time. I will show how to write unit tests using stubs (from the <a href="https://sinonjs.org/releases/latest/stubs/" target="_blank" rel="noreferrer noopener">sinon</a> package) against the custom error handler.</p>



<h4>Swagger documentation</h4>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> <a href="https://github.com/fastify/fastify-swagger" target="_blank" rel="noreferrer noopener">Fastify-swagger</a> automatically extracts the JSON-schema you provided for your routes, then produces an OpenAPI document. The ore information you provide in your JSON-schema (like description of each field), the better is the resulting documentation. Try it yourself if you completed the tutorial before your teammates.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/04-backend/invoice-pdf-generation-http-api/">02. Invoice PDF generation HTTP API (practical activity)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>01. Simple plagiarism detection CLI (pratical activity)</title>
		<link>https://thomas-veillard.fr/front-end-web-development/04-backend/practical-activity-simple-plagiarism-detection-cli/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Wed, 10 Nov 2021 20:13:12 +0000</pubDate>
				<category><![CDATA[04. Backend]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=4051</guid>

					<description><![CDATA[<p>Learning outcomes Parsing command line with the popular yargs module. Working with external module definitions, such as @types/yargs. Basic filesystem manipulations (CRUD operations of files and folders). Getting familiar with the glob filepath matching expressions and library. Working with Promise, util.promisify(), async, await, etc. Getting starting with natural language manipulation (see the natural module). Packaging &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/04-backend/practical-activity-simple-plagiarism-detection-cli/" class="more-link">Continuer la lecture de <span class="screen-reader-text">01. Simple plagiarism detection CLI (pratical activity)</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/04-backend/practical-activity-simple-plagiarism-detection-cli/">01. Simple plagiarism detection CLI (pratical activity)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Parsing command line with the popular <code>yargs</code> module.</li><li>Working with external module definitions, such as <code>@types/yargs</code>.</li><li>Basic filesystem manipulations (CRUD operations of files and folders).</li><li>Getting familiar with the <code>glob</code> filepath matching expressions and library.</li><li>Working with <code>Promise</code>, <code>util.promisify()</code>, <code>async</code>, <code>await</code>, etc.</li><li>Getting starting with natural language manipulation (see the <code>natural</code> module).</li><li>Packaging a Typescript library to be installable with <code>npm</code>.</li><li>Writing mocha specs against the library.</li></ul>



<h4>Context</h4>



<p>While I was personally reviewing submissions from a degraded examination context, I suspected fraudulent behaviours. Various tools exist to detect plagiarism, but are highly expensive. I expected a basic analysis to catch the most obvious cases easily.</p>



<p class="u-mbs">Such tools generally provide 2 primary features:</p>



<ol class="u-mlm"><li>comparing together various submissions to the same exercise;</li><li>comparing a single submission to online contents.</li></ol>



<p>Point (2.) implies using expensive search API such as Google (max 100 free queries a day) or Bind (max 1000 free queries a month).</p>



<p>This adds extra layer of complexity, caching strategy and performance concerns. For those reasons, you will <strong>exclusively focus on point (1.)</strong>.</p>



<h4>Provided assets</h4>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-download" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  <a href="https://thomas-veillard.fr/wp-content/uploads/2021/11/6-samples.zip">Download the submission samples (ZIP of TXT files)</a>
</div>
</div>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-download" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  <a href="https://thomas-veillard.fr/wp-content/uploads/2021/11/node-typescript-template.zip">Download the template for node + typescript projects (source code)</a>
</div>
</div>



<h4>Specifications</h4>



<p>The CLI software should accept the following command-line options:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-23" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">Options:
  --inputFiles    Glob expression to files containing answers. Each file
                  contains a single text to compare to each others. It assumes
                  all texts refer to the same question.      [string] [required]
  --outputFile    Path to the output file. If missing, output to console.
                                                                        [string]
  --format        The output format. [choices: <span class="hljs-string">"json"</span>, <span class="hljs-string">"text"</span>] [default: <span class="hljs-string">"text"</span>]
  --clusterScore  The minimum matching score to merge 2 submissions <span class="hljs-keyword">in</span> the same
                  report. It is a number between 0 (merge even <span class="hljs-keyword">if</span> not really
                  similar) and 1 (merge only <span class="hljs-keyword">if</span> exactly same). Default is 0.9.
                                                         [number] [default: 0.9]</code></div><small class="shcb-language" id="shcb-language-23"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="u-mbs">You will extract IO-related code and plagiarism detection code in 2 distinct modules:</p>



<ul><li><strong>IO-related code</strong>: includes argument parsing, files reading, outputs (both to console and filesystem);</li><li><strong>Plagiarism detection code</strong>: the function accepting a set of submissions and returns cluster metered with matching score.</li></ul>



<p>Later on, the <strong>Plagiarism detection code</strong> will become a self-packaged module (similar to those on <code>npm registry</code>, but not released).</p>



<p>This allows reusing the library anywhere and replace the IO-presentation layer by a webserver (💲 think about an anti-plagiarism SaaS API 💲).</p>



<p>Side note: As for now, the <strong>Plagiarism detection code</strong> only performs on in-memory data, especially string transformations. This is CPU-bound task.</p>



<h4><strong>PoC Implementation (step by step)</strong></h4>



<p>Despite a lot of topics are covered in this tutorial, the resulting codebase (excluding specs) could be fewer than 100 lines of code.</p>



<p>Before getting deeper in the code, let&rsquo;s try some experiments. The final delivery will just be a smart assembly of all those experiments.</p>



<h5><strong>Parse options, provide their descriptions and requireness.</strong></h5>



<p>Calling your script without mandatory options should print the documentation:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-24" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">$ node dist/index.js
Options:
  --<span class="hljs-built_in">help</span>          Show <span class="hljs-built_in">help</span>                                            [boolean]
  --version       Show version number                                  [boolean]
  --inputFiles    Glob expression to files containing answers. Each file
                  contains a single text to compare to each others. It assumes
                  all texts refer to the same question.      [string] [required]
  --outputFile    Path to the output file. If missing, output to console.
                                                                        [string]
  --format        The output format. [choices: <span class="hljs-string">"json"</span>, <span class="hljs-string">"text"</span>] [default: <span class="hljs-string">"text"</span>]
  --clusterScore  The minimum matching score to merge 2 submissions <span class="hljs-keyword">in</span> the same
                  report. It is a number between 0 (merge even <span class="hljs-keyword">if</span> not really
                  similar) and 1 (merge only <span class="hljs-keyword">if</span> exactly same). Default is 0.9.
                                                         [number] [default: 0.9]

Missing required argument: inputFiles</code></div><small class="shcb-language" id="shcb-language-24"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="u-mbs">Tips:</p>



<ul><li>Note that <code>yargs(...).parse()</code>&nbsp;returns a Promise. Unless you use <a href="https://dev.to/mikeesto/top-level-await-in-node-2jad" target="_blank" rel="noreferrer noopener">node 14.8.0</a>+, you cannot <code>await</code> a Promise outside an <code>async</code> function (ex. in a&nbsp;<a href="https://stackabuse.com/javascripts-immediately-invoked-function-expressions">IIFE</a>).</li><li>Let&rsquo;s&nbsp;<code>yargs</code>&nbsp;infer&nbsp;<code>format: 'json' | 'text'</code>&nbsp;for you. In facts,&nbsp;<code>yargs</code>&nbsp;type definition infers attributes&rsquo; names and types. It even supports&nbsp;<a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types" target="_blank" rel="noreferrer noopener">literal union</a>, as shown in this&nbsp;<a href="https://github.com/yargs/yargs/blob/main/docs/typescript.md#more-specific-typing-for-choices" target="_blank" rel="noreferrer noopener">example</a>.</li><li>Use the&nbsp;<code>demandOption</code> method to require an option&nbsp;(and not&nbsp;<code>requiresArg</code>, that is for another purpose).</li><li>You do&nbsp;<strong>NOT</strong>&nbsp;need the&nbsp;<code>any</code>&nbsp;type, so do not use it.</li></ul>



<p>Here the template to help you:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-25" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">import</span> yargs <span class="hljs-keyword">from</span> <span class="hljs-string">'yargs'</span>
<span class="hljs-keyword">import</span> { hideBin } <span class="hljs-keyword">from</span> <span class="hljs-string">'yargs/helpers'</span>

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> argv = <span class="hljs-keyword">await</span> yargs(hideBin(process.argv))
  .option(<span class="hljs-string">'inputFiles'</span>, { <span class="hljs-keyword">type</span>: <span class="hljs-string">'string'</span>, demandOption: <span class="hljs-literal">true</span> <span class="hljs-comment">/* ... */</span> })
  .parse()

  <span class="hljs-built_in">console</span>.log(argv)
}

run().catch(<span class="hljs-built_in">console</span>.error)</code></div><small class="shcb-language" id="shcb-language-25"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Once completed, the <code>argv</code>&lsquo;s type should be inferred as:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-26" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">interface</span> Argv {
  inputFiles: <span class="hljs-built_in">string</span>
  outputFile: <span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span>
  format: <span class="hljs-string">'json'</span> | <span class="hljs-string">'text'</span>
  clusterScore: <span class="hljs-built_in">number</span>
}</code></div><small class="shcb-language" id="shcb-language-26"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<h5><strong>List all files that match the glob expression from <code>--inputFiles</code></strong></h5>



<p><strong>Tips</strong>: Use the&nbsp;<code>glob</code>&nbsp;module. <code>glob(cb)</code>&nbsp;is callback-based asynchronous function. Promise are easier to maintain. The  built-in&nbsp;<code>util</code>&nbsp;module provides a very useful helper called&nbsp;<code>util.promisify(callbackBasedFunc)</code>. See the&nbsp;<a href="https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original" target="_blank" rel="noreferrer noopener">documentation</a>.</p>



<p>Example of valid glob expressions:</p>



<ul><li><code>./path/to/file.txt</code>&nbsp;matches only a single file.</li><li><code>./path/to/*.txt</code>&nbsp;matches&nbsp;<code>./path/to/file.txt</code>, but not&nbsp;<code>./path/to/deep/file.txt</code>.</li><li><code>./path/to/**/*.txt</code> matches&nbsp;<code>./path/to/file.txt</code> and <code>./path/to/deep/file.txt</code>.</li></ul>



<p>The expected output:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-27" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">$ node dist/index --inputFiles=<span class="hljs-string">'../samples/*.txt'</span>
[
  <span class="hljs-string">'../samples/1.txt'</span>,  <span class="hljs-string">'../samples/10.txt'</span>, <span class="hljs-string">'../samples/11.txt'</span>,
  <span class="hljs-string">'../samples/12.txt'</span>, <span class="hljs-string">'../samples/13.txt'</span>, <span class="hljs-string">'../samples/14.txt'</span>,
  <span class="hljs-string">'../samples/15.txt'</span>, <span class="hljs-string">'../samples/16.txt'</span>, <span class="hljs-string">'../samples/17.txt'</span>,
  <span class="hljs-string">'../samples/18.txt'</span>, <span class="hljs-string">'../samples/19.txt'</span>, <span class="hljs-string">'../samples/2.txt'</span>,
  <span class="hljs-string">'../samples/20.txt'</span>, <span class="hljs-string">'../samples/21.txt'</span>, <span class="hljs-string">'../samples/22.txt'</span>,
  <span class="hljs-string">'../samples/23.txt'</span>, <span class="hljs-string">'../samples/24.txt'</span>, <span class="hljs-string">'../samples/25.txt'</span>,
  <span class="hljs-string">'../samples/26.txt'</span>, <span class="hljs-string">'../samples/27.txt'</span>, <span class="hljs-string">'../samples/28.txt'</span>,
  <span class="hljs-string">'../samples/29.txt'</span>, <span class="hljs-string">'../samples/3.txt'</span>,  <span class="hljs-string">'../samples/30.txt'</span>,
  <span class="hljs-string">'../samples/31.txt'</span>, <span class="hljs-string">'../samples/32.txt'</span>, <span class="hljs-string">'../samples/33.txt'</span>,
  <span class="hljs-string">'../samples/34.txt'</span>, <span class="hljs-string">'../samples/35.txt'</span>, <span class="hljs-string">'../samples/36.txt'</span>,
  <span class="hljs-string">'../samples/37.txt'</span>, <span class="hljs-string">'../samples/38.txt'</span>, <span class="hljs-string">'../samples/39.txt'</span>,
  <span class="hljs-string">'../samples/4.txt'</span>,  <span class="hljs-string">'../samples/40.txt'</span>, <span class="hljs-string">'../samples/41.txt'</span>,
  <span class="hljs-string">'../samples/42.txt'</span>, <span class="hljs-string">'../samples/43.txt'</span>, <span class="hljs-string">'../samples/44.txt'</span>,
  <span class="hljs-string">'../samples/45.txt'</span>, <span class="hljs-string">'../samples/46.txt'</span>, <span class="hljs-string">'../samples/47.txt'</span>,
  <span class="hljs-string">'../samples/48.txt'</span>, <span class="hljs-string">'../samples/49.txt'</span>, <span class="hljs-string">'../samples/5.txt'</span>,
  <span class="hljs-string">'../samples/50.txt'</span>, <span class="hljs-string">'../samples/51.txt'</span>, <span class="hljs-string">'../samples/52.txt'</span>,
  <span class="hljs-string">'../samples/53.txt'</span>, <span class="hljs-string">'../samples/54.txt'</span>, <span class="hljs-string">'../samples/55.txt'</span>,
  <span class="hljs-string">'../samples/56.txt'</span>, <span class="hljs-string">'../samples/57.txt'</span>, <span class="hljs-string">'../samples/58.txt'</span>,
  <span class="hljs-string">'../samples/59.txt'</span>, <span class="hljs-string">'../samples/6.txt'</span>,  <span class="hljs-string">'../samples/60.txt'</span>,
  <span class="hljs-string">'../samples/61.txt'</span>, <span class="hljs-string">'../samples/62.txt'</span>, <span class="hljs-string">'../samples/63.txt'</span>,
  <span class="hljs-string">'../samples/64.txt'</span>, <span class="hljs-string">'../samples/65.txt'</span>, <span class="hljs-string">'../samples/66.txt'</span>,
  <span class="hljs-string">'../samples/67.txt'</span>, <span class="hljs-string">'../samples/68.txt'</span>, <span class="hljs-string">'../samples/69.txt'</span>,
  <span class="hljs-string">'../samples/7.txt'</span>,  <span class="hljs-string">'../samples/70.txt'</span>, <span class="hljs-string">'../samples/71.txt'</span>,
  <span class="hljs-string">'../samples/8.txt'</span>,  <span class="hljs-string">'../samples/9.txt'</span>
]</code></div><small class="shcb-language" id="shcb-language-27"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<h5><strong>Read each <code>inputFile</code> and put its content into an array</strong></h5>



<p>Each item of the array should contain both a way to locate original file (such a path) and, of course, the file content:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-28" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">const</span> loadedFiles: { path: <span class="hljs-built_in">string</span>, content: <span class="hljs-built_in">string</span> }[] = []</code></div><small class="shcb-language" id="shcb-language-28"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<h4><strong>Implement a function that finds clusters of similar submissions</strong></h4>



<p>This function must be implemented into its own module, with that prototype:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-29" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">interface</span> Sample {
  content: <span class="hljs-built_in">string</span>
  path: <span class="hljs-built_in">string</span>
}

<span class="hljs-comment">/**
 * Groups samples into cluster depending on how similar they are.
 * If a sample not far from all other samples, it is not returned.
 * A cluster is basically an array of samples, and this function returns a array of clusters.
 * Each sample has both an identifier (ex. the path to the original file) and a content.
 */</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">computePlagiarismClusters</span> (<span class="hljs-params">
  samples: Sample[],
  options: { clusterScore: <span class="hljs-built_in">number</span> }
</span>): <span class="hljs-title">Sample</span>[][] </span>{
  <span class="hljs-keyword">return</span> []
}</code></div><small class="shcb-language" id="shcb-language-29"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>You are encouraged to think this algorithm the way you want. It will not be graded.</p>



<p>If you do not know how to start, you can look the following naive, but yet efficient algorithm. It heavily relies on&nbsp;<code>natural</code>&nbsp;package features.</p>



<ol><li>Install the&nbsp;<code>natural</code>&nbsp;package, which is natural language manipulation library;</li><li>Split input texts into arrays of tokens&nbsp;<a href="https://naturalnode.github.io/natural/Tokenizers.html">using Tokenizers</a>;</li><li>Reduce each token to its&nbsp;<a href="https://en.wikipedia.org/wiki/Word_stem">word stem</a>&nbsp;through&nbsp;<a href="http://naturalnode.github.io/natural/stemmers.html">Stemmers</a>;</li><li>Compute similarity score of 2 cleaned inputs based on&nbsp;<a href="http://naturalnode.github.io/natural/string_distance.html">Levenshtein distance</a>.</li><li>Group in clusters detected fraudulent samples using the previous scoring method (remember a cluster may contain more than 2 samples).</li></ol>



<figure class="wp-block-table"><table><thead><tr><th>&#8211;clusterScore</th><th>Nb of discovered clusters</th><th>Files</th></tr></thead><tbody><tr><td>0.9</td><td>1</td><td>&#8211; 5.txt, 63.txt, 69.txt</td></tr><tr><td>0.8</td><td>2</td><td>&#8211; 5.txt, 63.txt, 69.txt<br>&#8211; 18.txt, 32.txt</td></tr></tbody></table><figcaption>By applying myself the previous tips, I was able to detect those clusters.</figcaption></figure>



<h5>Code demonstration: adding automated specs 🎯</h5>



<p>I will write some specs using <a href="https://mochajs.org/" target="_blank" rel="noreferrer noopener">mocha</a> for <code>computePlagiarismClusters</code>.</p>



<h5><strong>Output the result depending on CLI arguments</strong></h5>



<p>For that exercise, you can use your own implementation of <code>computePlagiarismClusters</code> or my proposal of correction.</p>



<p>Properly implement&nbsp;<code>format</code>&nbsp;and&nbsp;<code>outputFile</code>.</p>



<h5>Code demonstration: create a standalone npm package 🎯</h5>



<p class="u-mbs">I will extract <strong>Plagiarism detection code</strong> to its own package:</p>



<ul><li>As a local folder that I may manually install using <a href="https://docs.npmjs.com/cli/v7/commands/npm-link" target="_blank" rel="noreferrer noopener">npm link</a>.</li><li>As a git repository that I may reference in my package.json.</li></ul>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/04-backend/practical-activity-simple-plagiarism-detection-cli/">01. Simple plagiarism detection CLI (pratical activity)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>03. Vue.js project</title>
		<link>https://thomas-veillard.fr/front-end-web-development/vue/project/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Mon, 11 Oct 2021 06:11:51 +0000</pubDate>
				<category><![CDATA[03. VueJS]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=3194</guid>

					<description><![CDATA[<p>Topic (SE groups) Build a web application to book, rent or buy something of your choice, like: A train ticket office. Using public API, it may find routes between 2 train stations at some date and time. Then, the customer can book required tickets. A product shop. The application displays the catalogue, allows both sorting &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/vue/project/" class="more-link">Continuer la lecture de <span class="screen-reader-text">03. Vue.js project</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/project/">03. Vue.js project</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Topic (SE groups)</h4>



<p>Build a web application to book, rent or buy something of your choice, like:</p>



<ul><li><strong>A train ticket office</strong>. Using public API, it may find routes between 2 train stations at some date and time. Then, the customer can book required tickets.</li><li><strong>A product shop</strong>. The application displays the catalogue, allows both sorting and filtering by various criteria. Each product has a dedicated presentation. Additionally, the customer may fill a cart and provide its delivery address.</li><li><strong>A clearing booking app</strong>. Allows customers to find available cleaners near their home at some date and time. Then, the customer picks a proposal, fills its address&#8230;</li><li><strong>A VPS builder</strong>. The customer builds its own VPS instance by selecting some amount of RAM, disk, CPU, IO bandwidth, additional volumes&#8230; The final configuration should be valid (ex. disallow too much RAM if not enough v-core, etc.).</li></ul>



<h4>Topic (non-SE groups)</h4>



<p>Check with your teachers for topic requirements. They may enforce a relevant topic according to your academic major.</p>



<h4>The rules</h4>



<ul><li>Can be done in groups of 4 students (3 exceptionally allowed).</li><li>Use Vue.js, Angular or React. You are free to use any library you want.</li><li>Use <a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noreferrer noopener">this</a> git workflow model (at least master and develop branches).</li><li>Do not be surprised if I check who commits, and when&#8230;</li><li>Document installation steps in <code>README.md</code>.</li><li>Use API over HTTP or HTTPS (a public API, a mock server or your own backend).</li><li>Build various views (pages, modals&#8230;). At least 5 pages with valuable logic.</li><li>Set up various routes using vue-router or such a lib (ex. <code>/products/:productId</code>).</li><li><a href="https://blog.sonatype.com/open-source-attacks-on-the-rise-top-8-malicious-packages-found-in-npm" target="_blank" rel="noreferrer noopener">For your security</a>, do not install dependencies having <span class="has-inline-color has-medium-pink-color"><strong>fewer than 50 000 downloads per week</strong></span>. If you trust a dependency that does not meet my arbitrary expectation, please ask first (during class session) and record my acquaintance in your <code>README</code>.</li></ul>



<h4>README.md</h4>



<p>Describe the steps in your README to build and run your project. For simple front-end projects, it could be really short: (ex. git clone, npm install&#8230;).</p>



<p>But if you implemented a backend or have special requirements, they must be explicit. If setup is complex, please provide an install script (targeting Ubuntu).</p>



<h4>Delivery</h4>



<p>Your git repository is your main delivery. Just share read-only access with your teacher if the repository is private.</p>



<ul><li>For SE groups, share your private repository with <code>TruffeCendree</code>.</li><li>For other groups: information not yet available.</li></ul>



<p>The code must be available at least 2 hours before the oral presentation, which occurs during the last class session.</p>



<h4>Graduation</h4>



<figure class="wp-block-table is-style-stripes"><table><tbody><tr><td><strong>Criteria</strong></td><td><strong>Points</strong></td></tr><tr><td>Git and workflow</td><td>2 points</td></tr><tr><td>User experience (UX), user interface (UI)<br><em>Graded based on your oral presentation.</em></td><td>5 points</td></tr><tr><td>Code quality, maintenability, bugs, challenges&#8230;<br><em>Graded based on the source code on git master/main branch</em></td><td>13 points</td></tr></tbody></table></figure>



<h4>Bonuses</h4>



<p>The following list is not exhaustive. Be free to highlight challenges you overcame in a special section of your README.</p>



<ul><li>Write a fully featured backend (higher bonus if built on node.js). Adding a backend does not reduce my expectation on the frontend part.</li><li>Switch from JavaScript to TypeScript (use strict mode, ban the <code>any</code> type).</li><li>Use high quality JSdoc comments, with <code>tsconfig.json</code> setup to check js all files.</li><li>Host your static website online (ex. Firebase Hosting, render.com, aws S3&#8230;).</li><li>Implement error tracking of hosted site with (ex. Sentry, Rollbar, Stackdriver&#8230;).</li><li>Write automatic specs (unit, e2e&#8230;).</li><li>Send emails with your backend (look at the <a href="https://mailcatcher.me/" target="_blank" rel="noreferrer noopener">mailcatcher</a> to mock the STMP server).</li><li>Generate high quality PDF with putteteer or selenium.</li></ul>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/project/">03. Vue.js project</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>02. Vue: practical activity, part n°2</title>
		<link>https://thomas-veillard.fr/front-end-web-development/vue/02-vue-practical-activity-part-n2/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Mon, 11 Oct 2021 05:11:51 +0000</pubDate>
				<category><![CDATA[03. VueJS]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=3522</guid>

					<description><![CDATA[<p>Learning outcomes Getting started with Oauth2, OpenID, etc. Understand the need for a state management layer in your app. Exploring various state management strategies. Discuss pros and cons of various state management patterns. Handle in-browser routing and discuss its performance concerns. Using route guards to prevent activation of some routes. The expected result At the &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/vue/02-vue-practical-activity-part-n2/" class="more-link">Continuer la lecture de <span class="screen-reader-text">02. Vue: practical activity, part n°2</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/02-vue-practical-activity-part-n2/">02. Vue: practical activity, part n°2</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Getting started with Oauth2, OpenID, etc.</li><li>Understand the need for a state management layer in your app.</li><li>Exploring various state management strategies.</li><li>Discuss pros and cons of various state management patterns.</li><li>Handle in-browser routing and discuss its performance concerns.</li><li>Using route guards to prevent activation of some routes.</li></ul>



<h4>The expected result</h4>



<p>At the end of the tutorial, the user will be able to login with its Microsoft account. The application will fetch and display its identity (basically its id, email and name). The current user identity is something you need in the whole app. You will explore various ways to achieve this.</p>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> A test microsoft account will be provided in session by your teacher, but you are free to use your own account. During this tutorial, you will only grant access to basic profile information (name and email). API secrets stay in your browser, except when calling the API of course. You can revoke permissions at any time in the confidentiality screen of the Microsoft account.</p>



<h4>Oauth2, OpenID, Microsoft Graph API&#8230; What is it?</h4>



<p>In the continuation of the previous tutorial, the application will gain access to the Microsoft Graph API. This one exposes a large panel of Microsoft&rsquo;s SaaS products, including Outlook.</p>



<p>The <strong>Microsoft Graph API</strong> acts on the side of a logged-in user, that must grant permission to the application. The<strong> Oauth2 protocol </strong>is responsible for authentication and collection of user&rsquo;s consent. In the terminology of Oauth2, a permission is called a <strong>scope</strong>. The application must explicitly declare which <strong>scopes</strong> it needs.</p>



<p>Once authorised, the application gets an <strong>access token</strong> (aka. <strong>Bearer</strong>). This is just a long random string you must provide within each API query. The API knows everything about it (which user, scopes, application&#8230;). This short living key is strictly confidential and expires in about 1 hour, unless the user manually revokes it. Note that the oauth2 protocol also allows the app renewing it without user interaction.</p>



<p><strong>OpenID</strong> is another protocol built on top of Oauth2. It allows the user to share its identity (just the name and email) to the application. This way, the application just trusts the identity provider. This is widely used to implement <strong>SSO</strong> (aka. <strong>Single Sign On</strong>), allowing using a single account to sign-in on any application supporting this identity provider.</p>



<h4>The SigninButton component</h4>



<p>Let&rsquo;s build a <code>SigninButton</code> responsible for retrieving an <strong>access token</strong> and the associated user identity. Microsoft provides a library making this process easier: <a href="https://www.npmjs.com/package/@azure/msal-browser" target="_blank" rel="noreferrer noopener">@azure/msal-browser</a>.</p>



<p>Acquiring the user authorisation and fetching identity from the API is typically an async task that lasts a few seconds. So it is an opportunity to use <code>AsyncButton</code>.</p>



<p>Additionally, the SPA should be registered on Azure Active Directory portal. But do not worry too much about it, since I have already done it. Each integration (the name given to an external application registered on Azure AD) has a <strong>clientId</strong> used in Oauth2 protocol.</p>



<p>From a security and maintainability perspective, you should never let secrets and configurations hardcoded in your code. Instead, extract them to a configuration file ignored by git. Even better, allow those settings to be different depending on the environment (ex. test, development, staging, production&#8230;). The Vue assets pipeline has a built-in feature for this: <a href="https://cli.vuejs.org/guide/mode-and-env.html" target="_blank" rel="noreferrer noopener">env variables</a>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-30" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># file: .env.development.local</span>
VUE_APP_OAUTH_CLIENT_ID=e8137439<span class="hljs-number">-4</span>d1d<span class="hljs-number">-462</span>d-a85f-f81cfea8f0d8</code></div><small class="shcb-language" id="shcb-language-30"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p><i class="fas fa-exclamation-circle" style="color: #d32f2f; margin-right: 0.5em"></i> Unfortunately, changes appyed to .env files cannot be watched by the cli. Each time, you must restart the building process (ex. npm run serve).</p>



<p class="question"><strong>Question 1</strong>: Why you should not commit credentials on git?</p>



<p class="question"><strong>Question 2</strong>: Why may you want different configurations depending on the environment? Give an example.</p>



<p class="exercice"><strong>Exercice 1</strong>: I already wrote helpers on top of msla (see the file <code>src/lib/microsoftGraph.js</code> above). Import them for use in your <code>SigninButton</code> component.  For now, <code>SigninButton</code> stores the resolved user inside its own state (the <code>data</code> property of your component) and displays it in the template.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 1: add SigninButton »</p>


<pre class="wp-block-code" aria-describedby="shcb-language-31" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// file src/lib/microsoftGraph.js</span>
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> msal <span class="hljs-keyword">from</span> <span class="hljs-string">'@azure/msal-browser'</span>

<span class="hljs-comment">/**
 * List the requested scopes (aka. the requested permissions)
 */</span>
<span class="hljs-keyword">const</span> requestedScopes = {
  <span class="hljs-attr">scopes</span>: [<span class="hljs-string">"User.Read"</span>]
}

<span class="hljs-keyword">const</span> msalInstance = <span class="hljs-keyword">new</span> msal.PublicClientApplication({
  <span class="hljs-attr">auth</span>: {
    <span class="hljs-attr">clientId</span>: process.env.VUE_APP_OAUTH_CLIENT_ID
  },
  <span class="hljs-attr">cache</span>: {
    <span class="hljs-attr">cacheLocation</span>: <span class="hljs-string">"sessionStorage"</span>
  }
})

<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">signInAndGetUser</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> authResult = <span class="hljs-keyword">await</span> msalInstance.loginPopup(requestedScopes)
  msalInstance.setActiveAccount(authResult.account)
  <span class="hljs-keyword">return</span> authResult.account
}</code></div><small class="shcb-language" id="shcb-language-31"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img decoding="async" width="1060" height="836" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/signin-button.gif" alt="" class="wp-image-3576"/></figure>



<h4>State management for the current user</h4>



<p>Currently, the identity fetched from Microsoft Graph is stored inside the local state of the  <code>SigninButton</code> component.</p>



<figure class="wp-block-image size-large"><img decoding="async" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/user-stored-in-the-signin-button-component.png" alt="" class="wp-image-3586"/><figcaption>Screensheet of vue-devtools, showing the data property of <code>SigninButton</code>.</figcaption></figure>



<p>This means, only that component is currently aware of the connected user:</p>



<ul><li>If the component is unmounted, its internal state is, of course, lost.</li><li>Only children of <code>SigninButton</code> may potentially get access to that user through <code>props</code>. </li></ul>



<p>The current user identity is typically something that should be shared across the whole application (aka. global state). Any component may read it and a few one (the existing <code>SigninButton</code>, a potential <code>SignoutButton</code>&#8230;) need to update it.</p>



<p class="has-text-align-center">***</p>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> Now, we want to display the current user name fetched by <code>SigninButton</code> inside the template of <code>HomePage</code>. Let&rsquo;s explore 3 ways to accomplish this.</p>



<h5><span style="color:#a2870d" class="has-inline-color">First solution, use props and events through component tree.</span></h5>



<p>Before going further, please read first <a href="https://v3.vuejs.org/guide/component-basics.html#base-example" target="_blank" rel="noreferrer noopener">Components Basics</a>, <a href="https://v3.vuejs.org/guide/component-props.html#prop-types" target="_blank" rel="noreferrer noopener">Props</a> and <a href="https://v3.vuejs.org/guide/component-custom-events.html" target="_blank" rel="noreferrer noopener">Custom Events</a>. The first proposed solution massively relies on props and events.</p>



<p>The user object is stored at the root of the component tree (inside the <code>App</code> component). When the page loads, the <code>user</code> is <code>null</code> (user not yet logged-in). Any child component that has to read the user object should receive it through props. If the child is nested, every component of the branch must pass the <code>user</code> prop down.</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1294" height="727" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/props-goes-down.gif" alt="" class="wp-image-3609"/><figcaption>Animated flow of props propagation from <code>App</code> to deeply nested children.</figcaption></figure>



<p>Let&rsquo;s suppose now that the user interacts with the <code>SigninButton</code> and sign in. As soon as <code>SigninButton</code> knows the user identity, it emits a custom event called <code>userChanged</code>. Events travel the component tree from bottom to top. Each parent component should handle or propagate the event (or it will be discarded). Eventually, the event reaches the root component <code>App</code>, which consumes it to update its internal state. This triggers a new rendering and the updated identity travels again the tree down through props.</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1294" height="727" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/event-goes-up.gif" alt="" class="wp-image-3613"/><figcaption>Animated flow of events going up, getting handled in App and trigering a view update.</figcaption></figure>


<a href=https://docs.google.com/presentation/d/1FhBhkHADZAE-DtDQU2qk6MczPhqDVYRIyk7ysPOFdA8/edit#slide=id.gebafa763cd_0_119 target="_blank">
  <div style="display: flex; align-items: center; padding: 1em; border-radius: 3px; border: 1px solid #f5ba16; background: #f7f7f7">
    <div style="margin-right: 0.5em"><img src="/wp-content/uploads/2021/01/google_slide.svg" /></div>
    <div>Open the animations in Google Slide</div>
  </div>
</a>



<p></p>



<p class="exercice"><strong>Exercise 2</strong>: Use props to share the user with both  <code>SigninComponent</code> and <code>HomePage</code>. Then use events to update the shared user from <code>SigninComponent</code>. Eventually, display the user name in <code>HomePage</code>.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 2: state management with props/events »</p>



<p class="question"><strong>Question 3</strong>: While being a well-working solution, it suffers from maintainability issues. Please expose and discuss them.</p>



<p>In addition to the reason you may have already found, there is a performance penalty. Did you notice <code>BaseLayout</code> was rendered again because its props changed? But <code>BaseLayout</code> does not need the <code>user</code> props for itself. It just forwards it to children&#8230;</p>



<h5><span style="color:#a2870d" class="has-inline-color">Second solution, use <code>provide</code> and <code>inject</code>.</span></h5>



<p>Read the official documentation carefully for <a href="https://v3.vuejs.org/guide/component-provide-inject.html" target="_blank" rel="noreferrer noopener">Provide &amp; Inject</a>.</p>



<p class="exercice"><strong>Exercise 3</strong>: Replace every needed <code>user</code> props by an <code>inject</code> and remove transitional props that are not useful anymore. For now, you can keep the <code>userChanged</code> event chain. Be sure to make your <code>inject</code> reactive.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 3: state management with provide/inject »</p>



<p class="question"><strong>Question 4</strong>: What is the bug if the <code>inject</code> is not reactive?</p>



<p>Actually, you provide the <code>user</code> objet to the <code>App</code>&lsquo;s children, whatever how deep are the consumer components. But updating the value of <code>user</code> inside <code>App</code> still requires to manually propagate events through some component branches.</p>



<p>There are various ways, just by using <code>provide</code> and <code>inject</code>, to trigger a change from a deeply nested component without emitting a chain of events. One of them is to provide a setter, which is just a function. This will be demonstrated by the teacher.</p>



<h5><span style="color:#a2870d" class="has-inline-color">Third solution, use a store library like vuex.</span></h5>



<p>The third proposed solution is using a store library. With stores, your global state is both readable and writable anywhere in your application. The business logic related to data manipulation is moved to those stores. One of those libraries, <a href="https://next.vuex.vuejs.org/#what-is-a-state-management-pattern" target="_blank" rel="noreferrer noopener">Vuex</a>, is specially crafted to work with Vue and its internals.</p>



<blockquote class="wp-block-quote is-style-default"><p>Vuex helps us deal with shared state management with the cost of more concepts and boilerplate. It&rsquo;s a trade-off between short term and long term productivity.</p><cite>Quoted from vuex documentation: « When Should I Use It? »</cite></blockquote>



<p>According to this quote, vuex is probably not necessary for our dead-simple application. Using props, custom events, provide and inject may gracefully to cover our needs.</p>



<p>However, it is still revelant to explore Vuex from a pedagogical point of view. So let&rsquo;s give it a try for this tutorial series.</p>



<p class="exercice"><strong>Exercise 4</strong>: Move the <code>user</code> property from the <code>App</code> component state to a store managed with vuex. Drop the event chain and let <code>SigninButton</code> directly call a <a href="https://next.vuex.vuejs.org/guide/mutations.html" target="_blank" rel="noreferrer noopener">mutation</a> in the store.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 4: state management with a store »</p>



<p class="question"><strong>Question 5</strong>: Build a comparison table between the various state management strategies available, especially about pro and cons. Optionally, feel free to explore other ways not covered in that tutorial.</p>



<p class="question"><strong>Question 6</strong>: Imagine a developer in your team suggests to exclusively manage the state with stores. Therefore, it recommends not to rely on <code>props</code> and <code>provide</code> anymore. Would you accept this? An argued answer is expected.</p>



<h4>Client-side routing</h4>



<p><i class="fas fa-exclamation-circle" style="color: #d32f2f; margin-right: 0.5em"></i> Unfortunately, we are running out of time. Client-side routing was supposed to be the main part of the next tutorial. Instead, this section will cover the basis of vue-router.</p>



<figure class="wp-block-table is-style-stripes"><table><tbody><tr><td>/</td><td>Displays the <code>HomePage</code> component as it is currently defined.</td></tr><tr><td>/conversations</td><td>Displays the <code>ConversationsIndexPage</code> component that displays the more recent conversations inside the user&rsquo;s mailbox.</td></tr><tr><td>/conversations/:id</td><td>Displays the <code>ConversationShowPage</code> component that fetches and renders the content of a given conversation (id retrieved from the API).</td></tr></tbody></table><figcaption>Expected routes at the end of the tutorial</figcaption></figure>



<p class="exercice"><strong>Exercise 5</strong>: Install vue-router v4+ according to <a href="https://next.router.vuejs.org/installation.html" target="_blank" rel="noreferrer noopener">official documentation</a>. Make sure to pick the version compatible with Vue3, (also compatible with vue-router v4+).</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 5: add vue-router dependency »</p>



<p class="exercice"><strong>Exercise 6</strong>: Using the <a href="https://next.router.vuejs.org/guide/" target="_blank" rel="noreferrer noopener">Getting Started</a> guide, add <code>/</code> and <code>/conversations</code> routes. Define the router inside its own ES module (ex. <code>src/router/index.js</code>). For now, the <code>ConversationsIndexPage</code> should just contain a placeholder (a small message to visually see that the route works fine).</p>



<p><strong>Tips</strong>: for the previous question, you need:</p>



<ul><li>to add <code>src/router/index.js</code> and export a router built with <code>createRouter()</code>.</li><li>to import the router in <code>src/main.js</code> and call <code>.use(router)</code> somewhere&#8230;</li><li>to use <code>&lt;router-view /&gt;</code> instead of <code>&lt;home-page /&gt;</code> somewhere&#8230;</li><li>to create another component for the new page.</li></ul>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 6: add / and /conversations routes »</p>



<p class="exercice"><strong>Exercise 7</strong>: You probably tested your routes by directly changing the URL. However, a normal user clicks on links and buttons. Help them by adding a link to the header that targets the <code>/conversations</code> routes. That link should only be visible for logged users. It must use the <code>&lt;router-link /></code>.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 7: add header navigation »</p>



<div class="is-layout-flex wp-container-33 wp-block-columns">
<div class="is-layout-flow wp-block-column question">
<p><strong>Question 7</strong>: What is the performance difference between:</p>



<ul style="margin-left: 1em; margin-bottom: 0"><li><code>&lt;a href="/conversations"&gt;Conversation&lt;/a&gt;</code></li><li><code>&lt;router-link to="/conversations"&gt;Conversations&lt;/router-link&gt;</code></li></ul>
</div>
</div>



<p class="exercice"><strong>Exercise 8</strong>: In the case the user tries to access <code>/conversations</code> without being logged-in, it should be redirected to the home page. Use a <a href="https://router.vuejs.org/guide/advanced/navigation-guards.html#global-before-guards" target="_blank" rel="noreferrer noopener">guard</a> to implement this behaviour.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 8: add guards for authenticated routes »</p>



<p class="exercice">In a real-world app, I would require a UI feedback, so the user knows it was not allowed to access the previous URL and was redirected. While not being part of the tutorial, it is part of the project UX!</p>



<p class="exercice"><strong>Exercise 9</strong>: Implement the <code>/conversations/:id</code> route. For now, the newly created <code>ConversationShowPage</code> component should access the id given in the URL and display it inside the template.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 9: add /conversations/:id route »</p>



<p>At this step, the routing capabilities are fine. The next step would be to fetch conversations from Outlook using the API and eventually display them in the UI. Unfortunately, we do not have any more in-class session for that.</p>



<p><strong>Tips</strong>: If you want to complete the tutorial yourself, you must ask another authorisation for the API. The scope <em><code>Mail.Read</code></em> is needed to fetch mails (see <code>src/lib/microsoftGraph.js</code>).</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/02-vue-practical-activity-part-n2/">02. Vue: practical activity, part n°2</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>01. Vue: practical activity, part n°1</title>
		<link>https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 04 Sep 2021 16:36:06 +0000</pubDate>
				<category><![CDATA[03. VueJS]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=3243</guid>

					<description><![CDATA[<p>Learning outcomes Understand how Vue CLI is related to other well-known tools (webpack, babel&#8230;). Practise the Vue&#8217;s essentials (basic components, templates, scoped styles&#8230;). Organise your source code in various files and folders. Build reusable components (isolation, single responsibility, props and slots). Do not repeat yourself (DRY!) Work with Promise and events inside a Vue application. &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/" class="more-link">Continuer la lecture de <span class="screen-reader-text">01. Vue: practical activity, part n°1</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/">01. Vue: practical activity, part n°1</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Understand how Vue CLI is related to other well-known tools (webpack, babel&#8230;).</li><li>Practise the Vue&rsquo;s essentials (basic components, templates, scoped styles&#8230;).</li><li>Organise your source code in various files and folders.</li><li>Build reusable components (isolation, single responsibility, props and slots).</li><li>Do not repeat yourself (DRY!)</li><li>Work with Promise and events inside a Vue application.</li><li>Import third party packages providing components with npm.</li><li>Commit and reset staged changes with git.</li></ul>



<h4>Expected result</h4>



<p>At the end of the tutorial series, you got a lightweight SPA client for exploring mails and contacts from the Outlook product, through the Microsoft Graph API. This SPA targets both computers and phones, requiring responsive capabilities and appreciating resilience to network issues.</p>



<p>The first tutorial of the Vue&rsquo;s series focuses on setting up the project, understanding tools behind the Vue CLI (those discussed in the last tutorial), setting up the layout and adding some shared reusable components.</p>



<h4>Prepare your development environment</h4>



<p>In a general manner, your productivity and code quality are affected by used tools. Personally:</p>



<ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer noopener">vscode</a> as my primary code editor, especially suitable for JavaScript development.</li><li><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur" target="_blank" rel="noreferrer noopener">Vetur</a> is a vscode extension enabling syntax and language servers for <code>.vue</code> files.</li><li><a href="https://devtools.vuejs.org/" target="_blank" rel="noreferrer noopener">vue-devtools</a> extends browser&rsquo;s debugging capabilities (beta channel for Vue3).</li><li><a href="https://cli.vuejs.org/" target="_blank" rel="noreferrer noopener">Vue CLI</a> for managed vue projects (from project creation to distribution).</li><li>npm, node, typescript and the rest of well-known JS tools&#8230;</li></ul>



<h4>About the use of git with Moodle delivery</h4>



<p>The Vue CLI automatically initiates a local git repository unless you explicitly refuse it. After each question, I strongly recommend you commit your work with a meaningful message. This provides at least 2 immediate benefits:</p>



<ul><li>You can discard any change to your project since the last commit (for example, the last completed question). So, in the case you went in the wrong direction for a particular question, you can rollback to last clean state. This makes you confident while refactoring or deleting code.</li><li>As a teacher, I can « time travel » inside your code and see how it was at the end of some question.</li></ul>



<p>Because of the graded nature of the tutorial, you cannot push your code on a public repository. On another side, sharing with me access to your private Github repository is a time consuming and error-prone.</p>



<p>Instead, you will just upload the zip archive through the Moodle « assignment activity ». <span class="has-inline-color has-medium-pink-color">While building your zip, be sure to include the <code>.git</code> folder</span>. To be safe, just compress the parent folder and check the output archive.</p>



<h4>Vue project setup</h4>



<p><i class="fa fa-exclamation-circle" style="color: #d32f2f; margin-right: 0.5em"></i> The Vue-CLI has been deprecated at the beginning of the year. Because some questions still rely on it, please use it exceptionnally.</p>



<p class="question"><strong>Question 1</strong>: That is the main difference between local installation and global installation of packages with npm? What kind of packages do you generally install locally? What kind is generally installed globally?</p>


<pre class="wp-block-code" aria-describedby="shcb-language-34" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># example of command to install the vue cli locally</span>
npm install @vue/cli

<span class="hljs-comment"># example of command to install the vue cli globally</span>
npm install -g @vue/cli</code></div><small class="shcb-language" id="shcb-language-34"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>According to the <a href="https://cli.vuejs.org/guide/installation.html" target="_blank" rel="noreferrer noopener">docs</a>, the global installation is best suitable for Vue CLI.</p>



<p class="exercice"><strong>Exercise 1</strong>: Create a new Vue project (called <code>vue-oauth-microsoft-graph</code>). Opt for the Vue3 recipe that relies on webpack and babel for the build chain.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> The Vue CLI as already committed the newly generated project.</p>



<p class="question"><strong>Question 2</strong>: Webpack is internally used by the Vue CLI. Why is it required to deal with both multiple JavaScript files and special extensions like <code>.vue</code>?</p>



<p>Babel is configured by default with <code>@vue/cli-plugin-babel/preset</code>, as specified in <code>babel.config.js</code>. By reading the package&rsquo;s documentation, you see it uses the <code>browserslist</code> configuration defined in <code>package.json</code>.</p>



<p class="question"><strong>Question 3</strong>: What is the role of babel and how <code>browserslist</code> may configure its output?</p>



<p class="question"><strong>Question 4</strong>: What is eslint and which set of rules are currently applied? The eslint configuration may be defined in a <code>eslint.config.js</code> or in <code>package.json</code> depending on the setup.</p>



<p><strong>Tips</strong>: additionally to the previous tools installed by Vue CLI, you can enable static type checking in your project. See the appendix at the end of the tutorial. Of course, it is optional.</p>



<p class="exercice"><strong>Exercise 2</strong>: Run <code>npm run serve</code> and open the app in your browser. Remember that npm looks at the <code>package.json</code> file (specially the <code>scripts</code> object) to find which command to execute.</p>



<p>Did you notice that <code>npm run serve</code> launches a program called  <code>vue-cli-service</code>? This is a cli locally installed by npm inside the <code>node_modules</code> folder. This dependency is dedicated to development experience, so it is a <code>devDependencies</code> in your <code>package.json</code>.</p>



<p class="exercice"><strong>Exercise 3:</strong> The newly generated project contains a few placeholders. Cleanup your project so it does not contain neither useless assets, nor the hello world. In other words, delete <code>HelloWorld.vue</code>, its related assets and all its references. As at the end of each exercise, the vue cli should not report any error or warning.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 3: remove vue CLI placeholders »</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="376" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders-1024x376.png" alt="" class="wp-image-3762" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders-1024x376.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders-300x110.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders-768x282.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders.png 1501w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>On the left, the vue app with placeholders. On the right, result after cleanup.</figcaption></figure>



<p>By default, only the <code>src/components</code> folder is intended for storing <code>.vue</code> files (aka. vue components). But we are free to use other directories depending on the nature of each component. Let&rsquo;s add <code>src/pages</code> to our code base.</p>



<ul><li><code>src/pages</code> contains top level components that produce a particular page (ex. the home page, the index of mails page, the contact page&#8230;). Those components are intended to be mounted with vue-router in the future.</li><li><code>src/components</code> contains shared components required by pages or other components (ex. navigation headers, buttons, user&rsquo;s cards, short preview of an email&#8230;).</li></ul>



<p class="exercice"><strong>Exercise 4</strong>: Create the <code>HomePage</code> component inside the right folder. Do not spend too much time on the template content, as it could be a simple sentence. Import it inside <code>App.vue</code>.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 4: create HomePage component »</p>



<h4>Base layout</h4>



<p><i class="fas fa-exclamation-circle" style="color: #d32f2f; margin-right: 0.5em"></i> While my original intent was using Vuetify to not spent unnecessary time styling component, Vuetify for Vue 3 is still under active development. Sorry! 😇</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="435" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/image-1024x435.png" alt="" class="wp-image-3378" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/09/image-1024x435.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/09/image-300x128.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/09/image-768x327.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/09/image.png 1296w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>Basic possible visual at the end of the next exercise and its components tree.</figcaption></figure>



<p><strong>Tips</strong>: If you wish to use <a href="https://fontawesome.com/" target="_blank" rel="noreferrer noopener">font awesome</a> icons with Vue 3, <a href="https://stackoverflow.com/questions/66389974/using-font-awesome-in-vue-3" target="_blank" rel="noreferrer noopener">take a look at this thread</a>.</p>



<p class="exercice"><strong>Exercise 5</strong>: Let&rsquo;s begin with the root component, formally <code>App</code> (in <code>src/App.vue</code>). Replace its template with the following content and create the missing components. Add some content to the header (ex. fake home link, fake user name&#8230;) and legal credits to the footer. Eventually, polish the looks and feels with scoped CSS.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-35" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-comment">&lt;!-- template of file src/App.vue --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">base-header</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">home-page</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">base-footer</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-comment">&lt;!-- do not remove the &lt;script /&gt; markup --&gt;</span></code></div><small class="shcb-language" id="shcb-language-35"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 5: create BaseHeader and BaseFooter »</p>



<p class="question"><strong>Question 5</strong>: What is the difference between scoped and non-scoped CSS?</p>



<p class="exercice"><strong>Exercise 6</strong>: In order to keep the root component <code>App</code> as simple as possible, extract everything related to the layout into a <code>BaseLayout</code> component. Using the <a href="https://v3.vuejs.org/guide/component-slots.html#slot-content" target="_blank" rel="noreferrer noopener">slot API</a>,  allow <code>BaseLayout</code> to receive children (to be rendered between the header and the footer).</p>



<p><strong>Tips</strong>: If you integrated font awesome, try extracting most logic out of <code>App</code>. When it comes to configure third party dependencies, I generally work with ES-modules inside a <code>src/lib</code> folder. Example: <code>src/lib/fontAwesome.js</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-36" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-comment">&lt;!-- template tag of src/App.vue --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">home-page</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-36"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 6: create BaseLayout that uses slot API »</p>



<h4>Reusable BaseButton</h4>



<p>For the need of the UI, let&rsquo;s create a <code>BaseButton</code> component. Basically, this is just a styled <code>&lt;button&gt;</code>. Its usage should be mostly the same (possibility to pass children, styles, classes, <code>role="button"</code> or <code>role="submit"</code>&#8230;).</p>



<p class="question"><strong>Question 6</strong>: How behaves non-prop attributes passed down to a component, when its template has a single root element? <strong>Tips</strong>: it is well documented by vue, but you can also try it youself by passing the <code>style</code> attribute with a straight visual effect.</p>



<p class="exercice"><strong>Exercise 7</strong>: Implement such a <code>BaseButton</code>, animated on hover and focus. Do not forget the disabled state. You may try these buttons on your <code>HomePage</code> for now.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="539" height="124" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button.gif" alt="" class="wp-image-3490"/></figure></div>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 7: create BaseButton with primary color »</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="850" height="166" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button-used-in-header.gif" alt="" class="wp-image-3804"/><figcaption>Tips: it makes sense to use them in the navigation in header.</figcaption></figure>



<p class="exercice"><strong>Exercise 8</strong>: Add the <code>color</code> prop to <code>BaseButton</code>. This prop accepts one of <code>'primary', 'warn' or 'danger'</code> values. It defaults to  <code>primary</code> and you should validate the given value matches the enum. Then, dynamically apply styles to the button based on that prop.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="331" height="219" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button-with-color.png" alt="" class="wp-image-3493" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button-with-color.png 331w, https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button-with-color-300x198.png 300w" sizes="(max-width: 331px) 100vw, 331px" /></figure></div>



<p><strong>Tips</strong>: in a first time, ensure you can pass the props from <code>PageHeader</code> template to the <code>BaseButton</code> component (ex. by temporary rendering the color name in the template). Then, use that value to apply some conditional styles (2 proposed solutions above). Remember the DRY principal (Don&rsquo;t Repeat Yourself) and do not duplicate code sections.</p>



<div class="wp-block-advgb-accordions advgb-accordion-wrapper">
<div class="wp-block-advgb-accordion-item advgb-accordion-item" style="margin-bottom:15px"><div class="advgb-accordion-header" style="background-color:#000;color:#eee;border-style:solid;border-width:1px;border-radius:2px"><span class="advgb-accordion-header-icon"><svg fill="#fff" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24"><path fill="none" d="M0,0h24v24H0V0z"></path><path d="M12,5.83L15.17,9l1.41-1.41L12,3L7.41,7.59L8.83,9L12,5.83z M12,18.17L8.83,15l-1.41,1.41L12,21l4.59-4.59L15.17,15 L12,18.17z"></path></svg></span><h4 class="advgb-accordion-header-title" style="color:inherit">Solution 1: using CSS classes (simpler)</h4></div><div class="advgb-accordion-body" style="border-style:solid !important;border-width:1px !important;border-color:undefined !important;border-top:none !important;border-radius:2px !important">
<p>You may split your scoped CSS in 2 parts: the styles common to all components, and specific classes for each color in the palette. So, the component&rsquo;s style could look like:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-37" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">
<span class="hljs-selector-class">.button</span> {
  <span class="hljs-comment">/* css properties common to all buttons */</span>
}

<span class="hljs-selector-class">.button-primary</span> {
  <span class="hljs-comment">/* css properties specific to the primary color */</span>
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#42b983</span>;
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-37"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p>Finally, you just need to conditionally bind the CSS classes (<a href="https://v3.vuejs.org/guide/class-and-style.html" target="_blank" rel="noreferrer noopener">explained here</a>).</p>
</div></div>



<div class="wp-block-advgb-accordion-item advgb-accordion-item" style="margin-bottom:15px"><div class="advgb-accordion-header" style="background-color:#000;color:#eee;border-style:solid;border-width:1px;border-radius:2px"><span class="advgb-accordion-header-icon"><svg fill="#fff" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24"><path fill="none" d="M0,0h24v24H0V0z"></path><path d="M12,5.83L15.17,9l1.41-1.41L12,3L7.41,7.59L8.83,9L12,5.83z M12,18.17L8.83,15l-1.41,1.41L12,21l4.59-4.59L15.17,15 L12,18.17z"></path></svg></span><h4 class="advgb-accordion-header-title" style="color:inherit">Solution 2: using CSS variables &amp; computed properties</h4></div><div class="advgb-accordion-body" style="border-style:solid !important;border-width:1px !important;border-color:undefined !important;border-top:none !important;border-radius:2px !important">
<p>Declare in a single place the allowed values for the colour enum and its corresponding colours. On my side, I just declared the above object and always take it as a single source of truth in <code>BaseComponent</code>. In other words, this object contains the colour palette indexed by names I use as reference everywhere in the component.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-38" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> colorPalette = {
  <span class="hljs-attr">primary</span>: { <span class="hljs-attr">bg</span>: <span class="hljs-string">'#42b983'</span>, <span class="hljs-attr">hoverBg</span>: <span class="hljs-string">'#4cce93'</span>, <span class="hljs-attr">focusBorder</span>: <span class="hljs-string">'#47d696'</span> },
  <span class="hljs-attr">warn</span>: { <span class="hljs-attr">bg</span>: <span class="hljs-string">'#ff5722'</span>, <span class="hljs-attr">hoverBg</span>: <span class="hljs-string">'#ff7043'</span>, <span class="hljs-attr">focusBorder</span>: <span class="hljs-string">'#ff8a65'</span> },
  <span class="hljs-attr">danger</span>: { <span class="hljs-attr">bg</span>: <span class="hljs-string">'#e53935'</span>, <span class="hljs-attr">hoverBg</span>: <span class="hljs-string">'#ef5350'</span>, <span class="hljs-attr">focusBorder</span>: <span class="hljs-string">'#e57373'</span> },
}</code></div><small class="shcb-language" id="shcb-language-38"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Then, you need <a href="https://stackoverflow.com/questions/42872002/in-vue-js-component-how-to-use-props-in-css" target="_blank" rel="noreferrer noopener">a way to apply variables to your CSS</a>. In short, this is a conjugaison of <a href="https://v3.vuejs.org/guide/class-and-style.html" target="_blank" rel="noreferrer noopener">style binding</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties" target="_blank" rel="noreferrer noopener">CSS variables</a>, <a href="https://v3.vuejs.org/guide/computed.html" target="_blank" rel="noreferrer noopener">computed properties</a> and scoped styles.</p>
</div></div>
</div>



<p style="margin-top: -0.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 8: color palette and prop for BaseButton »</p>



<h4>Reusable AsyncButton</h4>



<p>Now, let&rsquo;s add <code>AsyncButton</code> built on top of <code>BaseButton</code>. It prevents the user from clicking multiple times on the button while a Promise is in progress. That Promise is returned by the parent&rsquo;s <code>onClick</code> listener.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="539" height="124" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/async-button.gif" alt="" class="wp-image-3510"/></figure></div>



<p>Here you have its source code (if you did not install FontAwesome, just replace the <code>&lt;font-awesome-icon /&gt;</code> by a simple text, while preserving the <code>v-if</code> directive.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-39" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">base-button</span>
    <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"isPending"</span>
    <span class="hljs-attr">:color</span>=<span class="hljs-string">"color"</span>
    @<span class="hljs-attr">click.stop.prevent</span>=<span class="hljs-string">"handleClick"</span>
  &gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">font-awesome-icon</span> 
      <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isPending"</span>
      <span class="hljs-attr">:icon</span>=<span class="hljs-string">"['fas', 'circle-notch']"</span>
      <span class="hljs-attr">pulse</span>
    /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">base-button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> BaseButton <span class="hljs-keyword">from</span> <span class="hljs-string">'./BaseButton.vue'</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-attr">name</span>: <span class="hljs-string">'AsyncButton'</span>,
  <span class="hljs-attr">components</span>: { BaseButton },
  <span class="hljs-attr">inheritAttrs</span>: <span class="hljs-literal">false</span>,

  <span class="hljs-attr">props</span>: {
    <span class="hljs-attr">color</span>: {
      <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,
      <span class="hljs-attr">default</span>: <span class="hljs-string">'primary'</span>
    }
  },

  data () {
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">isPending</span>: <span class="hljs-literal">false</span>
    }
  },

  <span class="hljs-attr">methods</span>: {
    handleClick () {
      <span class="hljs-keyword">const</span> originalOnClick = <span class="hljs-comment">/** @type {() =&gt; Promise&lt;void&gt;} */</span> (<span class="hljs-keyword">this</span>.$attrs.onClick)
      <span class="hljs-keyword">this</span>.isPending = <span class="hljs-literal">true</span>
      originalOnClick().finally(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> { <span class="hljs-keyword">this</span>.isPending = <span class="hljs-literal">false</span> })
    }
  }
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-39"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 9</strong>: Add a button to the <code>HomePage</code> that is disabled for 2 seconds each time it is clicked. According to the above code, this just means the <code>@click</code> event listener attached to the instance of <code>AsyncComponent</code> instance returns a Promise that waits for 2 seconds before resolving. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer noopener">You can create such a Promise using its constructor and a setTimeou</a>t. Also, please <a href="https://v3.vuejs.org/guide/events.html#method-event-handlers" target="_blank" rel="noreferrer noopener">write the event handler inside a dedicated method</a> since at is a bit complex.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 9: add AsyncButton »</p>



<p class="exercice"><strong>Exercise 10</strong>. Change the behaviour of the previous button, so its waiting time increases by one second each it is clicked. Because <code>AsyncButton</code> waits for any promise, whatever how long it takes to resolve, you do not need and you should not change it. Instead, keep trace of the number of clicks in the internal state (data) of the <code>HomePage</code> component (<a href="https://v3.vuejs.org/guide/events.html#listening-to-events" target="_blank" rel="noreferrer noopener">see the counter app example</a>) and use it while forging new promises.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 10: slowing down the button on click »</p>



<p class="question"><strong>Question 7</strong>: Analyse how works the <code>AsyncButton</code>. How the child component is aware of the returned Promise by the parent onClick handler? When is executed the callback passed to <code>.finally()</code>? Why use <code>.finally()</code> instead of <code>.then()</code>? Etc.</p>



<p class="question"><strong>Question 8</strong>: Which bug is introduced if <code>inheritAttrs: false</code> is missing or set to <code>true</code> in <code>AsyncButton</code>? Why?</p>



<h4>To continue</h4>



<p>Next time, you will handle Oauth2 authentication against the Microsoft Graph API, fetch the user identity, use it at various locations of the UI and eventually implement some routes. Maybe improved state management will also be useful&#8230;</p>



<p class="has-text-align-center">***</p>



<h4>Appendix: about static type checking</h4>



<p>In the previous tutorial, I introduced you static type checking with straightforward JavaScript and JSDoc. Badly, the <code>tsc</code> command does not handle <code>.vue</code> files. Despite the fact that it is partially working,  it does not worth the vue&rsquo;s typescript integration.</p>



<p>A more robust approach would be moving the whole project to <code>typescript</code>. With the Vue CLI, it is just running <code>vue add typescript</code> at the beginning of the journey. Be sure every change is committed, since this command override some files without warning.</p>



<p>Migrating to TypeScript at the beginning of the tutorial is not a big deal. Most types are already built in the Vue module. Eventually, the whole project is checked on serve and on build.</p>



<p>Since TypeScript may save your time, catch bugs and give you bonus grade to the project, why not giving it a try?</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/">01. Vue: practical activity, part n°1</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>5. Que peut faire le web aujourd&#8217;hui ?</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 20 Feb 2021 10:43:49 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[Développement web côté client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1973</guid>

					<description><![CDATA[<p>Lorsqu&#8217;on fait référence à HTML5, on pense d&#8217;abord à une certaine version du langage de balise utilisé pour structurer les contenus. Toutefois, ce nom désigne aussi l&#8217;ensemble des HTML5 API. Vous trouverez un aperçu de ces nombreuses fonctionnalités sur le site https://whatwebcando.today./ Vous pourriez découvrir par exemple que votre application peut déléguer le processus de paiement &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/" class="more-link">Continuer la lecture de <span class="screen-reader-text">5. Que peut faire le web aujourd&#8217;hui ?</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/">5. Que peut faire le web aujourd&rsquo;hui ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Lorsqu&rsquo;on fait référence à HTML5, on pense d&rsquo;abord à une certaine version du langage de balise utilisé pour structurer les contenus. Toutefois, ce nom désigne aussi l&rsquo;ensemble des <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5" target="_blank" rel="noreferrer noopener">HTML5 API</a>. </p>



<p>Vous trouverez un aperçu de ces nombreuses fonctionnalités sur le site <a href="https://whatwebcando.today/" target="_blank" rel="noreferrer noopener">https://whatwebcando.today/</a>. Vous pourriez découvrir par exemple que votre application peut déléguer le processus de paiement à votre navigateur !</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="658" height="515" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Your-browser-can-process-payments.png" alt="" class="wp-image-1790" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/02/Your-browser-can-process-payments.png 658w, https://thomas-veillard.fr/wp-content/uploads/2021/02/Your-browser-can-process-payments-300x235.png 300w" sizes="(max-width: 658px) 100vw, 658px" /><figcaption>Démonstration de la <a href="https://whatwebcando.today/payments.html" target="_blank" rel="noreferrer noopener">Payments API</a>, qui permet au site web de déléguer tout le processus de commande et de paiement en ligne. Cela inclut l&rsquo;affichage du détail des prix, l&rsquo;enregistrement des cartes bancaires et le traitement du paiement.</figcaption></figure>



<h4>Exemple d&rsquo;APIs exploitant le réseau</h4>



<p>De nos jours, les applications web peuvent émettre et recevoir en temps réel des messages du serveur. En fonction de vos besoins, vous pourriez utiliser :</p>



<ul><li>Les <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" target="_blank" rel="noreferrer noopener">WebSockets</a> pour une communication à double sens ;</li><li>Les <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events" target="_blank" rel="noreferrer noopener">server-sent events</a> pour recevoir des notifications depuis le serveur (unidirectionnel et l&rsquo;infrastructure est plus simple que les websockets).</li></ul>



<h4>Exemples d&rsquo;API pour le multimédia</h4>



<p>Votre navigateur supporte à coup sûr la visioconférence grâce à l&rsquo;API <a href="https://developer.mozilla.org/fr/docs/WebRTC" target="_blank" rel="noreferrer noopener">WebRTC</a>. Celle-ci permet la réception et diffusion de flux en temps réel et tire avantage des codecs et enregistrements de flux exposés par d&rsquo;autres API (caméra, microphone, voire partage d&rsquo;écran).</p>



<p>Toujours sur le plan des traitements multimédias, le navigateur sait procéder à des rendus 2D et 3D accélérés par carte graphique grâce à la <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="noreferrer noopener">Canvas API</a> et la <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API" target="_blank" rel="noreferrer noopener">WebGL API</a>.</p>



<h4>Votre navigateur est un véritable moteur de bases de données</h4>



<p>Il y a plusieurs façons de sauvegarder des données côté client. Entre autres :</p>



<ul><li>Les <a href="https://developer.mozilla.org/fr/docs/Web/HTTP/Cookies" target="_blank" rel="noreferrer noopener">cookies</a> sont de petits fichiers textes que le serveur dépose dans le navigateur. Celui-ci les renvoie systématiquement lors de futures requêtes HTTP(s) vers les domaines autorisés.</li><li>Les <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer noopener">localStorage</a> et <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage" target="_blank" rel="noreferrer noopener">sessionStorage</a> sont des bases de données clés/valeurs destinées à conserver de petits volumes de données. Des objets plus complexes peuvent être enregistrés s&rsquo;ils sont sérialisés avec <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/JSON/stringify" target="_blank" rel="noreferrer noopener">JSON.stringify</a> par exemple.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noreferrer noopener">IndexedDB</a> est une base de données relationnelle et transactionnelle dans laquelle vous pouvez sauvegarder plusieurs gigaoctets de données 🤩. À partir d&rsquo;un certain volume (dépendant du navigateur), l&rsquo;application devra demander le consentement de l&rsquo;utilisateur.</li></ul>



<h4>En conclusion</h4>



<p>Le navigateur est un environnement d&rsquo;exécution très riche en fonctionnalités. Chacune d&rsquo;elles est implémentée dans le respect de standards, dont notamment les HTML5 API Standards.</p>



<p>Malheureusement, votre base d&rsquo;utilisateur est hétérogène. Avant d&#8217;employer toute solution, vous devriez vérifier son taux d&rsquo;adoption par le marché. Le référentiel <a href="https://caniuse.com/" target="_blank" rel="noreferrer noopener">https://caniuse.com/</a> vous y aidera. Il agrège les parts de marché de chaque navigateur, version par version.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/">5. Que peut faire le web aujourd&rsquo;hui ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>4. Utiliser les technologies web pour construire autre chose qu&#8217;un site.</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 20 Feb 2021 09:22:35 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[Développement web côté client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1944</guid>

					<description><![CDATA[<p>Pour les ordinateurs de bureau et les téléphones Puisque les technologies du web front-end sont si pratiques pour la construction d&#8217;interfaces, les développeurs ont mis au point des stratagèmes afin de les utiliser dans d&#8217;autres contextes. En particulier, ils souhaitent en user pour leurs applications sur PC, tablettes et téléphones. Peu importe la plateforme, l&#8217;idée &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/" class="more-link">Continuer la lecture de <span class="screen-reader-text">4. Utiliser les technologies web pour construire autre chose qu&#8217;un site.</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/">4. Utiliser les technologies web pour construire autre chose qu&rsquo;un site.</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Pour les ordinateurs de bureau et les téléphones</h4>



<p>Puisque les technologies du web front-end sont si pratiques pour la construction d&rsquo;interfaces, les développeurs ont mis au point des stratagèmes afin de les utiliser dans d&rsquo;autres contextes. En particulier, ils souhaitent en user pour leurs applications sur PC, tablettes et téléphones. </p>



<p>Peu importe la plateforme, l&rsquo;idée est souvent la même. Il s&rsquo;agit d&rsquo;écrire une application en HTML/CSS/JS et de l&#8217;empaqueter dans une webview. Tous les éléments relatifs à l&rsquo;interface d&rsquo;un navigateur classique sont masqués (pas de barre d&rsquo;adresse, de bouton de retour, etc.). L&rsquo;intégration avec le système est aussi renforcée grâce à de nouvelles APIs.</p>



<p>Une fois empaquetée, l&rsquo;application propose une expérience similaire aux autres logiciels. Elle peut fournir un programme d&rsquo;installation autonome (sous Windows ou MacOS), un paquet (.deb sous Debian, .rpm sous RHEL) ou une diffusion sur les boutiques (Google Play, App Store).</p>



<blockquote class="wp-block-quote"><p>Write once, run everywhere. 🎉</p><cite>Il s&rsquo;agit à l&rsquo;origine du <a href="https://en.wikipedia.org/wiki/Write_once,_run_anywhere" target="_blank" rel="noreferrer noopener">slogan de Java</a>.</cite></blockquote>



<p>Cette citation résume un autre bénéfice de mutualiser la base de code entre plusieurs implémentations (ex. un site web, une application PC et téléphone). Vous n&rsquo;avez alors qu&rsquo;une seule base de code et plusieurs cibles de construction. En conséquence, toute nouveauté ou correction est immédiatement disponible sur ces plateformes. Toutefois, rien ne vous empêche d&rsquo;activer conditionnellement certaines fonctionnalités en fonction de la plateforme.</p>



<p>Les utilisateurs pourraient exiger davantage de fonctionnalités d&rsquo;une application installée en comparaison à sa version site. Electron et Cordova vous offrent cette possibilité via une plus forte intégration avec le système et des API supplémentaires. Ce n&rsquo;est envisageable uniquement car Cordova et Electron font confiance à votre code, contrairement à un navigateur qui doit s&rsquo;en protéger.</p>



<p>En effet, le navigateur fait face à des enjeux de sécurité. Il considère chaque site comme un programme non fiable, voire potentiellement malveillant. Les mécanismes de protection sont nombreux : sandbox, demande de permissions, API restreintes, etc. C&rsquo;est typiquement pour cette raison que le système de fichier n&rsquo;est pas exposé à un site web, mais pleinement accessible dans le contexte d&rsquo;Electron.</p>



<h4>Pour le terminal (ligne de commande) et les serveurs</h4>



<p>De nos jours, Javascript peut s&rsquo;exécuter en dehors d&rsquo;un navigateur. Node.js est l&rsquo;environnement de référence. Il est basé sur le moteur V8 de Chromium qu&rsquo;il étend avec de nouvelles API. De nombreux outils en ligne de commandes et serveurs HTTP s&rsquo;en servent.</p>



<p>Pour les développeurs, utiliser le même langage entre le front-end et back-end améliore nettement la productivité. C&rsquo;est aussi un chemin rapide pour devenir « full-stack ».</p>



<ul><li>Il n&rsquo;y a qu&rsquo;un seul à langage et écosystème à maîtriser (donc plus de temps pour approfondir le sujet).</li><li>La stack technique est consistante et des briques (code, dépendances&#8230;) peuvent être mutualisées entre le front-end et le back-end.</li></ul>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/">4. Utiliser les technologies web pour construire autre chose qu&rsquo;un site.</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>3. À quelle point cette interface est-elle élaborée ?</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 20 Feb 2021 07:09:08 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[Développement web côté client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1896</guid>

					<description><![CDATA[<p>La disposition et mise en page (layout) La disposition et la mise en page consistent à dimensionner et positionner les blocs. La page de commande d&#8217;un nouveau serveur est composée de 4 principaux blocs : l&#8217;entête accueille l&#8217;identité du service (logo), le centre de notifications et la navigation vers les autres portails ; le menu &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/" class="more-link">Continuer la lecture de <span class="screen-reader-text">3. À quelle point cette interface est-elle élaborée ?</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/">3. À quelle point cette interface est-elle élaborée ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1058" height="692" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/How-rich-can-be-a-web-ui-.gif" alt="" class="wp-image-1406"/><figcaption>L&rsquo;interface de gestion d&rsquo;Hetzner Cloud est un bel exemple de Single Page Application.</figcaption></figure>



<h4>La disposition et mise en page (layout)</h4>



<p>La disposition et la mise en page consistent à dimensionner et positionner les blocs. La page de commande d&rsquo;un nouveau serveur est composée de 4 principaux blocs :</p>



<ul><li>l&rsquo;entête accueille l&rsquo;identité du service (logo), le centre de notifications et la navigation vers les autres portails ;</li><li>le menu de gauche permet de naviguer dans l&rsquo;interface de gestion du projet ;</li><li>le corps de la page (espace qui centralise l&rsquo;attention de l&rsquo;utilisateur) contient le formulaire ;</li><li>le pied de page flottant résume l&rsquo;état actuel de la commande.</li></ul>



<h4>Le formulaire dynamique</h4>



<p>Le formulaire lui-même est hautement interactif. Les actions disponibles à une étape dépendent d&rsquo;une combinaison de choix antérieurs. Il ouvre des sous-formulaires dans des fenêtres contextuelles, calcule et affiche le prix dans le pied de page, averti en cas de mauvaise configuration, etc. </p>



<p>Ponctuellement, Javascript collecte quelques informations auprès du serveur comme la liste des volumes existants pour les proposer à la sélection. Il n&rsquo;en demeure pas moins que l&rsquo;intégralité des calculs, de la construction de la page et de son rendu sont réalisés côté client. Au moment où j&rsquo;écris cet article, la console est basée sur Angular. Cela tombe bien, car nous utiliserons le même cadriciel dans ce cours.</p>



<h4>Le style</h4>



<p>Le moteur de rendu du navigateur prend en charge les polices, les couleurs, les fonds colorés ou texturés, les dégradés, les marges internes et externes, les bordures et leurs coins arrondis, le positionnement du texte et tant d&rsquo;autres éléments de style.</p>



<p>Imaginez un bloc sur fond jaune à bordure marron, dont le texte est centré et les coins sont arrondis. Avec CSS, seulement quatre petites règles sont requises. Mais combien de lignes de code vous faudrait-il pour produire le même résultat en manipulant directement un tableau 2D de pixels ?</p>





<p class="my-rounded-block">Example of paragraph with background and rounded border.</p>



<div class="is-layout-flex wp-container-44 wp-block-columns">
<div class="is-layout-flow wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-40" data-shcb-language-name="CSS" data-shcb-language-slug="css"><div><code class="hljs language-css"><span class="hljs-selector-class">.my-rounded-block</span> {
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffecb8</span>;
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#795548</span>;
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;
  <span class="hljs-attribute">text-align</span>: center;
}</code></div><small class="shcb-language" id="shcb-language-40"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">CSS</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">css</span><span class="shcb-language__paren">)</span></small></pre></div>



<div class="is-layout-flow wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-42" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-rounded-block"</span>&gt;</span>
  Example of paragraph with background and rounded border.
<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-42"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre></div>
</div>



<h4>Les animations</h4>



<p>Créer une animation à partir de zéro est difficile. Il faut poser des formules mathématiques décrivant la transformation de la cible en fonction du temps. Ensuite, il faut calculer chacune des images tout en visant un débit stable de 60 images par seconde. Cela implique beaucoup d&rsquo;optimisations, d&rsquo;autant plus que les animations peuvent coexister.</p>



<p>Heureusement, CSS3 vient encore une fois à la rescousse. Il suffira de lui décrire les états initiaux et finaux de l&rsquo;élément à animer. Le navigateur s&rsquo;occupe du reste, notamment du choix du matériel le plus adapté (comme un accélérateur graphique si disponible) et des éventuelles concessions pour maintenir un débit d&rsquo;images satisfaisant.</p>



<p>Les animations donnent un retour à l&rsquo;utilisateur, lui procurant le sentiment que l&rsquo;interface est réactive et prête à accepter de nouvelles instructions.</p>



<ul><li>Le changement de couleur d&rsquo;un bouton au survol de la souris invite l&rsquo;utilisateur à interagir avec.</li><li>Une animation de chargement l&rsquo;avertit que l&rsquo;application travaille normalement, même si le résultat est un peu long à obtenir.</li></ul>



<p>Finalement, cet exemple d&rsquo;application illustre parfaitement l&rsquo;efficacité du couple HTML/CSS pour la construction d&rsquo;interfaces graphiques. Rien à voir, donc, avec des dinosaures 🦖 comme swing de Java !</p>
<style class="advgb-styles-renderer">
.my-rounded-block {
  background-color: #ffecb8;
  border: 1px solid #795548;
  border-radius: 3px;
  text-align: center;
}
</style><p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/">3. À quelle point cette interface est-elle élaborée ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>2. Pourquoi les technologies web sont-elles si populaires ?</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Wed, 17 Feb 2021 07:29:03 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[Développement web côté client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1863</guid>

					<description><![CDATA[<p>Elles sont portables d’un OS à l’autre. L’utilisateur final a juste besoin d’un navigateur. Les technologies web front-end ont avant tout été conçues pour les navigateurs. Ces derniers fonctionnent sur presque n&#8217;importe quel système d&#8217;exploitation. C&#8217;est aussi bien valable pour les PC (Windows, MacOS, GNU/Linux&#8230;) que les téléphones (iOS, Android&#8230;). Du moment que l&#8217;utilisateur final &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Pourquoi les technologies web sont-elles si populaires ?</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/">2. Pourquoi les technologies web sont-elles si populaires ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Elles sont portables d’un OS à l’autre. L’utilisateur final a juste besoin d’un navigateur.</h4>



<p>Les technologies web front-end ont avant tout été conçues pour les navigateurs. Ces derniers fonctionnent sur presque n&rsquo;importe quel système d&rsquo;exploitation. C&rsquo;est aussi bien valable pour les PC (Windows, MacOS, GNU/Linux&#8230;) que les téléphones (iOS, Android&#8230;).</p>



<p>Du moment que l&rsquo;utilisateur final emploie un navigateur à jour, il acquière immédiatement l&rsquo;accès à toutes les applications publiées sur Internet sous la forme de sites web.</p>



<h4> Elles sont maîtrisées, matures et continuent d’évoluer.</h4>



<p>Internet n&rsquo;est pas né hier. Ses acteurs ont appris de leurs expériences et ont capitalisé sur les technologies et les outils.</p>



<p>Aujourd&rsquo;hui, le web est plutôt régit par des standards (au moins pour les briques fondamentales).  Si votre application respecte elle-même strictement ces standards, alors il est certain qu&rsquo;elle fonctionnera encore dans des décénies.</p>



<p>Prenez pour exemple <a href="http://info.cern.ch/" target="_blank" rel="noreferrer noopener">le premier site jamais construit</a> et publié sur internet. Il est toujours en ligne et parfaitement fonctionnel parce qu&rsquo;il s&rsquo;appuyait sur des standards.</p>



<p>Bien sûr, ces technologies continuent d&rsquo;évoluer pour répondre aux nouveaux besoins. Il suffit de comparer n&rsquo;importe quel site moderne au premier du CERN pour s&rsquo;en convaincre.</p>



<h4>La création de riches interfaces est facile</h4>



<p>Historiquement, la principale mission d&rsquo;un navigateur est de procéder au rendu de pages web. C&rsquo;est une tâche à laquelle ils excellent.</p>



<p>En tant que développeur, il vous suffit de construire la structure et son contenu en HTML. Quelques centaines de règles CSS permettent ensuite d&rsquo;appliquer un style et une disposition. Toute la complexité du rendu est ensuite prise en charge par de navigateur.</p>



<h4>Javascript rend cette interface dynamique et interactive</h4>



<p>Au début du web, le HTML et le CSS étaient produits par les serveurs. Javascript n&rsquo;avait pour objectif que d&rsquo;ajouter un peu de dynamisme côté client. Il servait principalement à :</p>



<ul><li>animer des éléments (maintenant de la responsabilité de CSS) ;</li><li>réagir à des événements et modifier ponctuellement la page (par exemple afficher ou cacher un bloc quand l&rsquo;utilisateur clique sur un bouton).</li></ul>



<p>Cette dernière décennie, le langage et son écosystème ont mûri. Beaucoup de cadriciels et de bibliothèques aident les développeurs à construire l&rsquo;intégralité de leurs applications clientes en JS. Celles-ci sont alors responsables de produire contenus et styles, en plus de gérer la navigation. Lorsque l&rsquo;utilisateur clique sur un lien interne, Javascript capture l&rsquo;événement, puis génère et remplace la page actuelle.</p>



<blockquote class="wp-block-quote"><p>On les appelle des « <em>Single Page Application »</em>.</p></blockquote>



<p>Si tout le processus de construction et de rendu des pages se fait côté client, y-a-t-il encore besoin de serveurs ? Cela dépendra des besoins de l&rsquo;application. Certaines tâches, comme l&rsquo;authentification et l&rsquo;autorisation des accès, sont réservés à des environnements de confiance. D&rsquo;autres routines peuvent nécessiter une infrastructure pour la persistance et la diffusion de données. </p>



<h4>L&rsquo;écosystème est riche en outils</h4>



<p>Les outils améliorent la productivité, le confort ou la qualité. C&rsquo;est pourquoi tant d&rsquo;efforts et d&rsquo;énergies sont dépensés à les maintenir. Ils sont particulièrement abondant en développement web.</p>



<p>Vous découvrirez naturellement certains d&rsquo;entres-eux au cours du module. En particulier, l&rsquo;inspecteur de DOM, de réseau, de mémoire ou le débogueur Javascript intégrés à votre navigateur vous seront d&rsquo;une grande aide. Vous apprendrez aussi à importer et gérer du code tiers grâce aux gestionnaires de dépendances. Et bien plus encore !</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/">2. Pourquoi les technologies web sont-elles si populaires ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
