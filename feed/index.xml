<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/</link>
	<description>Mes cours et supports pédagogiques pour l&#039;enseignement de l&#039;ingénierie informatique.</description>
	<lastBuildDate>Fri, 12 Feb 2021 17:35:04 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.6.1</generator>
	<item>
		<title>Project</title>
		<link>https://thomas-veillard.fr/front-end-web-development/the-project/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 09 Feb 2021 07:16:11 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1576</guid>

					<description><![CDATA[<p>Topic Your goal for this project is to build a client application that leverages publicly available APIs. You can choose as many public API you want. Try to build something new and useful, with a real added value. Rules This is a group work (3 or 4 students per team). Use Angular or React. Material &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/the-project/" class="more-link">Continuer la lecture de <span class="screen-reader-text">Project</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/the-project/">Project</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Topic</h4>



<p>Your goal for this project is to build a client application that leverages <a href="https://github.com/public-apis/public-apis" target="_blank" rel="noreferrer noopener">publicly available</a> APIs. You can choose as many public API you want. Try to build something new and useful, with a real added value.</p>



<h4>Rules</h4>



<ul><li>This is a group work (3 or 4 students per team).</li><li>Use Angular or React. Material design is <strong>not</strong> mandatory.</li><li>Use <a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noreferrer noopener">this</a> git workflow model (at least master and develop branches).</li><li>I will check you commit, and when.</li><li>Use eslint. Recommended configuration is in <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/">practical works</a>.</li></ul>



<h4>Delivery</h4>



<p>Your git repository is your delivery. Just share read-only access with me (my Github username is <code>TruffeCendree</code>).</p>



<h4>Bonuses</h4>



<ul><li>Host your static website online (ex. Firebase Hosting, render.com, aws S3&#8230;).</li><li>Monitor client side errors in production (ex. Sentry, Rollbar, Stackdriver&#8230;).</li><li>Build your own backend on top of node.js. The same amount of work is still expected for the frontend.</li></ul>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/the-project/">Project</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>2. Managing authentication &#038; routing</title>
		<link>https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 09 Feb 2021 09:00:01 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Practical works]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1125</guid>

					<description><![CDATA[<p>You will build a basic navigation experience, with login capabilities and authenticated area. This is the opportunity to: create your first feature branch on git ; review the code of someone else pull request ; build components, forms and navigation ; write routing configuration with authorisation guards ; work with async processing and error handlers &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Managing authentication &#038; routing</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/">2. Managing authentication &#038; routing</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>You will build a basic navigation experience, with login capabilities and authenticated area. This is the opportunity to:</p>



<ul><li>create your first feature branch on git ;</li><li>review the code of someone else pull request ;</li><li>build components, forms and navigation ;</li><li>write routing configuration with authorisation guards ;</li><li>work with async processing and error handlers ;</li><li>discover some angular&rsquo;s internals (text interpolation, dependency injection&#8230;).</li></ul>



<h2>Start a feature branch</h2>



<p>In our git workflow, a feature branch contains new code that is still under construction or need a peer review. Once that code seems mature (feature complete and code reviewed), it is merged into the develop branch. Finally, when develop has been well tested, you can create a release and push it to the production.</p>



<p>Of course, the notion of « production » is not applicable to this practical work. But it is appropriate for the project.</p>



<p class="exercice"><strong>Exercise 1</strong>: Start a new feature branch and call it <code>authentication-and-routing</code>. On Github, you should see a branch called <code>feature/authentication-and-routing</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># git hf has a high-level command to start a new feature branch</span>
git hf feature start authentication-<span class="hljs-keyword">and</span>-routing</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<h2>Basic navigation</h2>



<p class="exercice"><strong>Exercise 2</strong>: For this question, find your path using the angular-material <a href="https://material.angular.io/guide/getting-started" target="_blank" rel="noreferrer noopener">getting started guide</a>. Then, import and use the <a href="https://material.angular.io/components/toolbar/overview" target="_blank" rel="noreferrer noopener">mat-toolbar</a> component to display a menu with 3 navigation items (without link). At this step, you can put your code in <code>app.component.html</code>.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="703" height="317" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/image.png" alt="" class="wp-image-1151" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/02/image.png 703w, https://thomas-veillard.fr/wp-content/uploads/2021/02/image-300x135.png 300w" sizes="(max-width: 703px) 100vw, 703px" /><figcaption>The expected result. There is no link yet on &lsquo;home&rsquo;, &lsquo;login&rsquo;&#8230; The item &lsquo;profile&rsquo; is rendered even if the user is not logged. That will change once authentication is ready.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/2520313f41d90c53ca90e510b27b8a0d78679fdf/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/2520313f41d90c53ca90e510b27b8a0d78679fdf" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 3</strong>: Explain the pro and cons of moving the navigation to its own component.</p>



<p>The <code>@angular/cli</code> is able to generate some pieces of code, like a component.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># generate a new component called 'navigation' and reference it in app.module.ts.</span>
$ ng generate component navigation
CREATE src/app/navigation/navigation.component.css (<span class="hljs-number">0</span> bytes)
CREATE src/app/navigation/navigation.component.html (<span class="hljs-number">25</span> bytes)
CREATE src/app/navigation/navigation.component.ts (<span class="hljs-number">291</span> bytes)
UPDATE src/app/app.module.ts (<span class="hljs-number">684</span> bytes)</code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 4</strong>: Commit any existing change on git, then generate a new component called <code>navigation</code>. Examine changes made by <code>@angular/cli</code> (you can use git and the output of <code>ng generate</code> command). Finally, move the mat-toolbar into <code>navigation.component</code>. Visually, the result should be identical.</p>


<div class="wp-block-image" style="text-align: center;">
<figure class="size-large"><img loading="lazy" class="wp-image-1162" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/image-1.png" alt="" width="311" height="154"><figcaption>The new component tree with NavigationComponent. Captured with <a href="https://augury.rangle.io/" target="_blank" rel="noreferrer noopener">Augury</a>.</figcaption></figure>
</div>

<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/f9d1bd55c3069418a8d25c28c628c5e7d95112bf/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/f9d1bd55c3069418a8d25c28c628c5e7d95112bf" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 5</strong>: Generate 3 more components using the cli: <code>home</code>, <code>login</code> and <code>profile</code>. Those components do not have to be included in <code>app.component.html</code> yet. Later, we will let <code>@angular/router</code> dynamically include the right component depending on the current path.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/04f07d3630867a0e483288b2bae1a6e12882c8e0/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/04f07d3630867a0e483288b2bae1a6e12882c8e0" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<div class="exercice" style="padding-bottom: 0; margin-bottom: 1em">
<p><strong>Exercise 6</strong>: Implement 3 routes with <code>@angular/router</code>. Each route will render the eponym component.</p>

<ul style="margin-left: 1em;">
<li><code>/</code> will render <code>home.component</code></li>
<li><code>/login</code> will render <code>login.component</code></li>
<li><code>/profile</code> will render <code>profile.component</code></li>
</ul>

<p>You can use this <a href="https://angular.io/guide/router" target="_blank" rel="noopener">guide</a>. Remember that your project was previously generated with routing enabled. You just have to set up routes and use <code>router-outlet</code> in <code>app.component.html</code>.</p>
</div>



<figure class="wp-block-image size-large"><img loading="lazy" width="919" height="381" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-angular-routes-home-login-and-profile.gif" alt="" class="wp-image-1186"/><figcaption>Expected result. The component is dynamically rendered depending on the route.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/d87a674fddbf150030130be8939f2da71a409d08/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/d87a674fddbf150030130be8939f2da71a409d08" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 7</strong>: Add links to your menu items.</p>



<p class="exercice"><strong>Exercise 8</strong>: Did you use <code>&lt;a href="PATH_OR_URL"&gt;&lt;/a&gt;</code> for your links ? Instead of the <code>href</code> HTML attribute, you must use the <code>routerLink</code> directive. Both ways will technically work, but there are major differences. What are they ?</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="919" height="381" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/routerLink-directive-in-action.gif" alt="" class="wp-image-1196"/><figcaption>Expected result. The user can click links in menu to navigate across views.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/419ccbb35fafeecc33a24e403830700c6521cc54/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/419ccbb35fafeecc33a24e403830700c6521cc54" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Login form</h2>



<p>Forms are a major part of most applications. In angular, you have 2 approaches available: template-driven and reactive. I will use template-driven form in my correction, because they are simple and strong-typable. You have an <a href="https://angular.io/guide/forms" target="_blank" rel="noreferrer noopener">example of template-driven forms</a> in the angular documentation.</p>



<p class="exercice"><strong>Exercise 9</strong>: Add a simple login form. When the user clicks on <code>submit</code> button, open a modal with content of inputs (see <a href="https://developer.mozilla.org/fr/docs/Web/API/Window/alert" target="_blank" rel="noreferrer noopener">window.alert</a>). Email and password fields are required to submit the form. If they are missing, the submit button is disabled.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="938" height="371" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-login-form-template.gif" alt="" class="wp-image-1212"/><figcaption>The login form as expected at this step.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/584e834ba044ac2c88b81c8df6f36edeb7eab798/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/584e834ba044ac2c88b81c8df6f36edeb7eab798" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p>Although this is not a design course, we can probably make this form more beautiful. For this we will use some components from <code>angular-material</code> like we did for the toolbar.</p>



<p class="exercice"><strong>Exercise 10</strong>: Improve the look and feel of the login page. Using <code>angular-material</code> is recommended.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="947" height="512" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-login-form-material-design.gif" alt="" class="wp-image-1219"/><figcaption>The result once I used material components and a bit of CSS.</figcaption></figure>



<p>To achieve this look and feel, I used the following modules:</p>



<ul><li><a href="https://material.angular.io/components/card/overview" target="_blank" rel="noreferrer noopener">MatCardModule</a></li><li><a href="https://material.angular.io/components/form-field/overview" target="_blank" rel="noreferrer noopener">MatFormFieldModule</a> &amp; <a href="https://material.angular.io/components/input/overview" target="_blank" rel="noreferrer noopener">MatInputModule</a> (both works together)</li><li><a href="https://material.angular.io/components/button/overview" target="_blank" rel="noreferrer noopener">MatButtonModule</a></li></ul>



<p>Of course, you are free to layout the page and design the UI like you wish. That is just an example.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="947" height="804" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/login-form-responsive.gif" alt="" class="wp-image-1222"/><figcaption>Bonus: use <a href="https://css-tricks.com/css-media-queries/" target="_blank" rel="noreferrer noopener">CSS media queries</a> to make your form responsive. Your browser includes developers tools simulating phones and pads. They are useful to test your media queries.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/3ad2dcdb56ac6c87d48081cd9bb73f88513a07f7/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/3ad2dcdb56ac6c87d48081cd9bb73f88513a07f7" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p>The same way we prefer <code>routerLink</code> over <code>href</code> because it does not reload the <code>Single Page Application</code>, you should use the <code>@angular/router</code> from your typescript controller (ex. from your submit method in <code>LoginComponent</code>). Here an example:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;
<span class="hljs-keyword">import</span> { Router } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/router'</span>;

<span class="hljs-meta">@Component</span>({
  selector: <span class="hljs-string">'app-login'</span>,
  templateUrl: <span class="hljs-string">'./login.component.html'</span>,
  styleUrls: [<span class="hljs-string">'./login.component.css'</span>]
})
<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> LoginComponent {
  <span class="hljs-keyword">constructor</span> (<span class="hljs-params"><span class="hljs-keyword">private</span> router: Router</span>) {}

  <span class="hljs-keyword">async</span> submit () {
    <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.router.navigateByUrl(<span class="hljs-string">'/profile'</span>);
  }
}</code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>

<div class="exercice" style="margin-bottom: 1em;">
<p><strong>Exercise 11</strong>: This example is rich of typescript and angular features. Let&rsquo;s analyse it.</p>
<ul style="margin-left: 1em; margin-bottom: 0;">
<li>How many instance attributes has the <code>LoginComponent</code> class ?</li>
<li>Why is the visibility of <code>router</code> attribute restricted to <code>private</code> ?</li>
<li>Angular detects the class constructor requires an instance of <code>Router</code>. When it instantiates the <code>LoginComponent</code>, it will provide an instance of <code>Router</code>. Take a look at <a href="https://angular.io/guide/dependency-injection" target="_blank" rel="noopener">Angular&rsquo;s dependency injection</a>.</li>
<li><code>@Component</code> is a <a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noopener">decorator</a>. Although it is still a typescript experimental feature, Angular heavily relies on it.</li>
</ul>
</div>


<p>On submit, the form should send credentials to the server (using built-in <code>HttpService</code>). Then, your <code>submit</code> method will deal with the server&rsquo;s response. On success, the user will be redirected to <code>/profile</code>. Finally, he should be notified for any error that occurred.</p>



<p>Remember you have the documentation and playground of API. Also do not forget that calling the server is an <code>async</code> task.</p>



<p class="exercice"><strong>Exercise 12</strong>: Implement the submit method as specified above. For the first iteration, use <code>window.alert</code> to report errors.</p>



<p class="exercice"><strong>Exercise 13</strong>: Take a tour at <a href="https://angular.io/guide/template-syntax" target="_blank" rel="noreferrer noopener">template syntax guide</a>. For this question, you will need <code>text interpolation</code> and <code>*ngIf</code>. Then, report errors in the template itself.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="939" height="518" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/submit-error-handler-in-tempalte.gif" alt="" class="wp-image-1267"/><figcaption>Demonstration of error handler (errors are printed in the template using text interpolation and *ngIf directive).</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/9f6645b9cf8ca31cdd4996e439ab68d27ef87074/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/9f6645b9cf8ca31cdd4996e439ab68d27ef87074" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Using backend type definitions</h2>



<p>Front-end and back-end share some technologies, including the Typescript language. The front-end can benefit from back-end type definition exported by the compiler. There are located at <code>frontend-web-development/dist-typings/</code>.</p>


<pre class="wp-block-code"><div><code class="hljs">ls -lhsa frontend-web-development/dist-typings
total 60K
4,0K drwxr-xr-x 6 root   root   4,0K févr.  9 11:26 .
4,0K drwxrwxr-x 8 thomas thomas 4,0K févr.  9 11:25 ..
4,0K -rw-r--r-- 1 root   root     11 févr.  9 11:26 apidoc.d.ts
4,0K -rw-r--r-- 1 root   root     11 févr.  9 11:26 app.d.ts
4,0K -rw-r--r-- 1 root   root    292 févr.  9 11:26 config.d.ts
4,0K -rw-r--r-- 1 root   root     11 févr.  9 11:26 ddl.d.ts
4,0K drwxr-xr-x 2 root   root   4,0K févr.  9 11:26 docs
4,0K drwxr-xr-x 4 root   root   4,0K févr.  9 11:26 models
4,0K -rw-r--r-- 1 root   root    363 févr.  9 11:26 mysql-store.d.ts
4,0K -rw-r--r-- 1 root   root    115 févr.  9 11:26 printable-error.d.ts
4,0K drwxr-xr-x 5 root   root   4,0K févr.  9 11:24 routes
4,0K -rw-r--r-- 1 root   root     11 févr.  9 11:26 seeds.d.ts
4,0K -rw-r--r-- 1 root   root     99 févr.  9 11:26 server.d.ts
4,0K drwxr-xr-x 4 root   root   4,0K févr.  9 11:26 specs
4,0K -rw-r--r-- 1 root   root    123 févr.  9 11:26 utils.d.ts</code></div></pre>


<p>You are most likely interested in API and models’ definitions. For example:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript shcb-code-table"><span class='shcb-loc'><span># frontend-web-development/dist-typings/routes/auth/post.login.d.ts
</span></span><span class='shcb-loc'><span><span class="hljs-keyword">import</span> { Request, Response } <span class="hljs-keyword">from</span> <span class="hljs-string">'express'</span>;
</span></span><mark class='shcb-loc'><span><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> Auth$LoginParams {
</span></mark><mark class='shcb-loc'><span>    email: <span class="hljs-built_in">string</span>;
</span></mark><mark class='shcb-loc'><span>    password: <span class="hljs-built_in">string</span>;
</span></mark><mark class='shcb-loc'><span>}
</span></mark><span class='shcb-loc'><span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">req: Request, res: Response</span>): <span class="hljs-title">Promise</span>&lt;<span class="hljs-title">void</span>&gt;</span>;
</span></span></code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Those definitions are up to date with the back-end implementation, since they are derived from it. If any change in the back-end is incompatible with the front-end usage, the typescript compiler catches it.</p>



<p>To use those definitions with angular, edit your <code>tsconfig.json</code> like this:</p>



<p> </p>


<pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="JSON / JSON with Comments" data-shcb-language-slug="json"><div><code class="hljs language-json shcb-code-table"><span class='shcb-loc'><span><span class="hljs-comment">/* To learn more about this file see: https://angular.io/config/tsconfig. */</span>
</span></span><span class='shcb-loc'><span>{
</span></span><span class='shcb-loc'><span>  <span class="hljs-attr">"compileOnSave"</span>: <span class="hljs-literal">false</span>,
</span></span><span class='shcb-loc'><span>  <span class="hljs-attr">"compilerOptions"</span>: {
</span></span><span class='shcb-loc'><span>    <span class="hljs-attr">"baseUrl"</span>: <span class="hljs-string">"./"</span>,
</span></span><span class='shcb-loc'><span>    <span class="hljs-attr">"outDir"</span>: <span class="hljs-string">"./dist/out-tsc"</span>,
</span></span><span class='shcb-loc'><span>    <span class="hljs-comment">/* ... */</span>
</span></span><mark class='shcb-loc'><span>    <span class="hljs-attr">"paths"</span>: {
</span></mark><mark class='shcb-loc'><span>      <span class="hljs-attr">"@backend/*"</span>: [ <span class="hljs-string">"../learning-materials/frontend-web-development/dist-typings/*"</span> ]
</span></mark><mark class='shcb-loc'><span>    }
</span></mark><span class='shcb-loc'><span>  },
</span></span><span class='shcb-loc'><span>  <span class="hljs-attr">"angularCompilerOptions"</span>: {
</span></span><span class='shcb-loc'><span>    <span class="hljs-attr">"enableI18nLegacyMessageIdFormat"</span>: <span class="hljs-literal">false</span>,
</span></span><span class='shcb-loc'><span>    <span class="hljs-attr">"strictInjectionParameters"</span>: <span class="hljs-literal">true</span>,
</span></span><span class='shcb-loc'><span>    <span class="hljs-attr">"strictInputAccessModifiers"</span>: <span class="hljs-literal">true</span>,
</span></span><span class='shcb-loc'><span>    <span class="hljs-attr">"strictTemplates"</span>: <span class="hljs-literal">true</span>
</span></span><span class='shcb-loc'><span>  }
</span></span><span class='shcb-loc'><span>}
</span></span></code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JSON / JSON with Comments</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">json</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="1141" height="777" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-typings.gif" alt="" class="wp-image-1613"/><figcaption>How to use my back-end type definitions in Angular to add strong types on HTTP calls.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/0e5a4c0075f266ecc3f74016038887fa01c5cd21/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/0e5a4c0075f266ecc3f74016038887fa01c5cd21" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Using services</h2>



<p>Because of the single responsibility principle, components should not fetch data or query the server themselves. That is the responsibility of <a href="https://angular.io/tutorial/toh-pt4" target="_blank" rel="noreferrer noopener">services</a>. This allows testing the behaviour of components by mocking the services it uses.</p>



<p>Services are singleton that persists until the end of the navigation. On their side, components are destroyed as soon as they are detached from the component tree (aka. not used anymore). You can store some state inside the component as long you do not need them outside. Else, you should use services.</p>



<p class="exercice"><strong>Exercise 14</strong>: Using the <code>@angular/cli</code>, generate <code>me.service.ts</code> and implement <code>resolve</code>, <code>login</code> and <code>logout</code> methods. Finally, update accordly the <code>LoginComponent</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { Auth$LoginParams } <span class="hljs-keyword">from</span> <span class="hljs-string">'@backend/routes/auth/post.login'</span>;
<span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">'@backend/models/user'</span>;

<span class="hljs-keyword">interface</span> IMeService {
  me: User

  <span class="hljs-comment">/**
   * On first call, retrieve the current user identity on /api/users/me.
   * On following calls, use a cached reference (this.me).
   * Returns Promise&lt;User&gt; if logged.
   * Returns Promise&lt;null&gt; otherwise.
   */</span>
  resolve: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;User | <span class="hljs-literal">null</span>&gt;

  <span class="hljs-comment">/**
   * Sends credentials against /auth/login.
   * Throws HttpErrorResponse in case of failure.
   * Returns Promise&lt;void&gt; if success.
   */</span>
  login: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-params">credentials</span>: <span class="hljs-params">Auth</span>$<span class="hljs-params">LoginParams</span></span>) =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt;

  <span class="hljs-comment">/**
   * Sends credentials against /auth/logout.
   * Throws HttpErrorResponse in case of failure.
   * Returns Promise&lt;void&gt; if success.
   */</span>
  logout: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt;
}</code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>

<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/a3803b0dcef7fd9884ab7eb667db81f32f986e17/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/a3803b0dcef7fd9884ab7eb667db81f32f986e17" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Routing &amp; authentication</h2>



<p>At this step, the application suffers a major bug. It is not aware of the current user session.</p>



<ul><li>The login and profile links are always visible.</li><li>The login form is always available, even for logged users.</li><li>The profile page is accessible without session.</li></ul>



<p>This is because the <code>LoginComponent</code> state is destroyed when the user is redirected. We need to store current user identity somewhere it will persist during navigation. That is the purpose of <a href="https://angular.io/tutorial/toh-pt4" target="_blank" rel="noreferrer noopener">Angular Services</a> (among other things like fetching data). Also, this identity should be retrieved from the server via XHR request on browser page reload.</p>



<h4>The login and profile links are always visible</h4>



<p>Let&rsquo;s start by fixing the first issue. <code>@angular/router</code> can resolve async data from a service when a route is triggered. These data are provided to components by injecting the <code>ActivatedRoute</code> service. Here <a href="https://angular.io/api/router/Resolve" target="_blank" rel="noreferrer noopener">an example</a>.</p>



<p>Hopefully, the <code>MeService</code> on which you will rely is ready. It implements an async method <code>resolve()</code> that returns the current user identity. So it is a valid resolver for <code>@angular.router</code>.</p>



<p>You have to change your routes, so they look like:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript">  { path: <span class="hljs-string">''</span>, component: HomeComponent, resolve: { me: MeService } },
  { path: <span class="hljs-string">'login'</span>, component: LoginComponent, resolve: { me: MeService } },
  { path: <span class="hljs-string">'profile'</span>, component: ProfileComponent, resolve: { me: MeService } }</code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Now, components scoped inside the <code>&lt;router-outlet>&lt;/router-outlet></code>  can access the <code>me</code> property through <code>ActivatedRoute</code> service injection.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-8" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> NavigationComponent {
  <span class="hljs-comment">// once initialized, you can use it to dynamically adapt the navigation template.</span>
  me: User;

  <span class="hljs-keyword">constructor</span> (<span class="hljs-params">activatedRoute: ActivatedRoute</span>) {
    <span class="hljs-comment">// When the NavigationComponent is mounted, the MeService has already been resolved.</span>
    <span class="hljs-keyword">this</span>.me = activatedRoute.snapshot.data.me;
  }
}</code></div><small class="shcb-language" id="shcb-language-8"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>For some reason, <code>ActivatedRoute</code> injection behaves properly only inside the <code>&lt;router-outlet>&lt;/router-outlet></code>. At this step, you include <code>app-navigation</code> in <code>app.component.html</code>. You must move it to <code>home-component</code>, <code>login-component</code>&#8230;</p>



<p class="exercice"><strong>Exercise 15</strong>: Use  <code>MeService</code> to resolve current user identity on all routes like explained above. Then,  conditionally show or hide the login and profile links depending on resolved (or unresolved) session.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="927" height="502" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-dynamic-navigation-items.gif" alt="" class="wp-image-1640"/><figcaption>Expected result: the « login » link is visible until the user logs in. Then, the profile link should be displayed.</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="927" height="502" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-dynamic-navigation-items-on-reload.gif" alt="" class="wp-image-1642"/><figcaption>The user identity is fetched using MeService when a route is triggered. So, it should retrieve current session even after a browser reload.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/9d5075597a424d82a3e81363bab1445243369adb/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/9d5075597a424d82a3e81363bab1445243369adb" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/">2. Managing authentication &#038; routing</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>1. Setup your practical environment</title>
		<link>https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 09 Feb 2021 09:00:00 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Practical works]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=897</guid>

					<description><![CDATA[<p>At the end of this practical works series, you will have built the front-end of a cleaning booking service. The back-end is provided. During this first seance, you will: install the necessary tools and learning materials ; start the mock back-end infrastructure (server, database&#8230;) and import seeds ; access to the back-end API documentation and &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/" class="more-link">Continuer la lecture de <span class="screen-reader-text">1. Setup your practical environment</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/">1. Setup your practical environment</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>At the end of this practical works series, you will have built the front-end of a cleaning booking service. The back-end is provided.</p>



<p>During this first seance, you will:</p>



<ul><li>install the necessary tools and learning materials ;</li><li>start the mock back-end infrastructure (server, database&#8230;) and import seeds ;</li><li>access to the back-end API documentation and interact manually with it ;</li><li>generate the angular project and serve compiled application to your browser ;</li><li>commit that angular project on git and push it to Github.</li></ul>



<h2>Required softwares installation</h2>



<p>Only git and docker require administration privileges to be installed. On Linux and macOS, this means you should not use sudo or root for anything else (even installing node.js).</p>



<h4>Git &amp; git-hf</h4>



<p>Git is a decentralised source version manager. A git repository stores the source code of a project and any of its changes. Typically, a contributor writes some code on its side. Once it has completed its task, it commits the changes (with a message) and push it to the remote repositories. Other contributors can update their base. Nowadays, teams centralise repositories hosting on SaaS platforms like Github and Gitlab.</p>



<p>During the lecture, I expressed you follow the <a href="https://datasift.github.io/gitflow/IntroducingGitFlow.html" target="_blank" rel="noreferrer noopener">gitflow</a> workflow. Takes the time to understand it. Then, install the git extension <a href="https://datasift.github.io/gitflow/TheHubFlowTools.html" target="_blank" rel="noreferrer noopener">git-hf</a>. That tool creates high-level commands to manage features, releases and hotfixes branches.</p>



<p>Of course, you also need a Github account.</p>



<h4>Node.js &amp; npm &amp; nvm</h4>



<p><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer noopener">Node.js</a> is a platform that runs Javascript code outside the browser. It makes possible to write server applications in Javascript, allowing developers to use the same technologies for front and back. The back-end you will interface with is running on node.js.</p>



<p>But here we are in front-end module. We are interested in node.js because it powers most tools we will use. Some of them are even shipped with the node installer. Node Package Manager (npm) is one of them. It manages dependencies of your project and installs cli softwares written for node.</p>



<p>I personally use <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer noopener">nvm</a> for installing node. Nvm (Node Version Manager) installs and manages various versions of node (including latest one) without requiring root privileges.</p>



<h4>Docker &amp; docker-compose</h4>



<p><a href="https://docs.docker.com/engine/install/" target="_blank" rel="noreferrer noopener">Docker</a> is a container runtime. Everything running in the container is isolated from the host. Except the kernel which is shared with the host, the container contains a fully functional operating system (including software, shared libraries, users&#8230;).</p>



<p>For example, consider an application only runs on Ubuntu version 20.04, with specific dependencies and a lot a setup. The distribution of that software will be complicated, as there are such requirements. What if you could directly distribute ready to use Ubuntu instance with the software installed ? That is what we call a container image.</p>



<p>Docker maintains DockerHub, a public registry hosting tons of prebuilt images you can pull and instantiate.</p>



<p><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noreferrer noopener">Docker-compose</a> is a higher-level tool, allowing the definition of infrastructure as code. You just have to write a config file, and docker compose will pull, configure and start all containers for you. It takes care of networking, exposing ports, storing persistent data, etc.</p>



<p>Please install both tools. For Windows 10 users, docker-compose is already packaged with Docker Desktop.</p>



<h4>Angular CLI</h4>



<p><a href="https://angular.io/" target="_blank" rel="noreferrer noopener">Angular</a> is a full-featured framework you will use for building your front application. Most actions, such as generating projects or components have been automatised in the « cli » tool.</p>



<p>A single command written in a terminal (Powershell or Node Command Prompt for Windows) do the job. Ensure node is installed first. We also install <a href="https://eslint.org/" target="_blank" rel="noreferrer noopener">eslint</a>, which ensure coding conventions are applied across codebase.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-9" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">npm i -g @angular/cli @angular-devkit/{core,schematics} @angular-eslint/schematics</code></div><small class="shcb-language" id="shcb-language-9"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<h2>Workspace overview</h2>



<p>At the end of this seance, your workspace should match the following folder hierarchy.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-10" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">frontend                       <span class="hljs-comment"># angular projet (generated using @angular/cli)</span>
 ↳ dist                        <span class="hljs-comment"># the folder containing your bundled app. Only exists after running `ng build` command.</span>
 ↳ node_modules                <span class="hljs-comment"># the folder containing local dependencies. See package.json file and npm command for more info.</span>
 ↳ src                         <span class="hljs-comment"># source code (HTML, CSS, TS). It includes components, services, etc.</span>
 ↳ angular.json                <span class="hljs-comment"># @angular/cli configuration</span>
 ↳ package.json                <span class="hljs-comment"># npm configuration, primary used for installing dependencies</span>
 ↳ tsconfig.json               <span class="hljs-comment"># typescript configuration, where are defined target, enabled syntax and type checking features.</span>
 ↳ .eslintrc.json              <span class="hljs-comment"># eslint configuration, where you set linter rules.</span>
learning-materials             <span class="hljs-comment"># my git repository you have to clone, which contains backend server, database and some tools</span>
 ↳ frontend-web-development    <span class="hljs-comment"># the folder containing every materials related to this practical work.</span>
    ↳ docker-compose.yml       <span class="hljs-comment"># configuration for docker-compose, that will take care of booting full backend infrastructure.</span>
    ↳ ...                      <span class="hljs-comment"># everything else in this folder is outside the scope of this module.</span></code></div><small class="shcb-language" id="shcb-language-10"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>Angular project&rsquo;s structure is standard (thanks to @angular/cli). For more information about it, please refer to <a href="https://angular.io/guide/file-structure" target="_blank" rel="noreferrer noopener">official documentation</a>.</p>



<h2>Setup the angular project</h2>



<h4>Create the angular app using @angular/cli</h4>



<p class="exercice"><strong>Exercise 1</strong> : Follow this process to create and configure a new angular app.</p>



<ul><li>Linux/Mac: run a terminal</li><li>Windows: use PowerShell or “Node.js Command Prompt”</li></ul>


<pre class="wp-block-code" aria-describedby="shcb-language-11" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># install angular if not already done</span>
npm i -g @angular/cli @angular-devkit/core @angular-devkit/schematics @angular-eslint/schematics

<span class="hljs-comment"># creates a new project with angular router enabled</span>
ng new --routing --strict --collection=@angular-eslint/schematics frontend

<span class="hljs-comment"># enter the 'frontend' folder</span>
<span class="hljs-built_in">cd</span> frontend</code></div><small class="shcb-language" id="shcb-language-11"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>The previous commands enabled the<code>:</code></p>



<ul><li><code>angular/router</code>, with argument <code>--routing</code> that let our angular app overriding and intercepting the browser URLs through the <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" target="_blank" rel="noreferrer noopener">HTML5 History API</a>.</li><li>the strict mode of typescript with <code>--strict</code> argument. Among other things, Typescript will expect to know the type of each variable, so it can enforce safety checks. See <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noreferrer noopener">typescript reference</a> for more info.</li><li><code>eslint</code> support, with rules recommended by the angular community. Linter&rsquo;s objectives is to ensure codebase consistency across the team and collaborator turnover. It sets guidelines, detects some bad coding patterns, etc.</li></ul>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/5444790f18c5e943fd9e6202c677b0db943e8ce0/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/5444790f18c5e943fd9e6202c677b0db943e8ce0" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>Configure your editor</h4>



<p>If you are using VSCode, you will probably appreciate those extensions:</p>



<ul><li>Angular Language Service (type inference in template)</li><li>Eslint checks that conventions are correctly applied</li><li>Gitlens (optional) for better git experience</li></ul>



<h4>Build the app</h4>



<p>The following commands help you to build your app. Many other parameters are available to customise the build process. This is just an overview of more useful.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-12" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">ng build          <span class="hljs-comment"># build the app for development, easy to debug in the browser and heavy bundle size.</span>
ng build --prod   <span class="hljs-comment"># build the app for production. A lot of optimisations are processed, reducing bundle size.</span>
ng build --watch  <span class="hljs-comment"># incrementally rebuild the app on each source code change (faster subsequent builds).</span></code></div><small class="shcb-language" id="shcb-language-12"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<div class="exercice" style="margin-bottom: 1em">
<p><strong>Exercise 2</strong> : I provided you an example of output of the <code>ng build</code> command. Run it on your side and check the content of  `frontend/dist` folder.</p>

<ul style="margin-left: 1em; margin-bottom: 0">
  <li>What are the languages used in output ?</li>
  <li>Which source files have been transpiled and bundled into main.js ?</li>
  <li>How many files were outputted ? Compare this count to the number of files in the source directory. Do you think adding new sources will increase outputted files count ?</li>
<li>What is the purpose of .js.map files ?</li>
<li>What is the purpose of polyfills in Javascript ?</li>
</ul>
</div>


<pre class="wp-block-code" aria-describedby="shcb-language-13" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">$ ng build <span class="hljs-comment"># to run in frontend folder                                                        </span>
✔ Browser application bundle generation complete.
✔ Copying assets complete.
✔ Index html generation complete.

Initial Chunk Files | Names         |      Size
vendor.js           | vendor        |   <span class="hljs-number">2.70</span> MB
polyfills.js        | polyfills     | <span class="hljs-number">127.61</span> kB
main.js             | main          |  <span class="hljs-number">20.85</span> kB
runtime.js          | runtime       |   <span class="hljs-number">6.15</span> kB
styles.css          | styles        | <span class="hljs-number">119</span> bytes

                    | Initial Total |   <span class="hljs-number">2.85</span> MB

Build at: <span class="hljs-number">2021</span><span class="hljs-number">-01</span><span class="hljs-number">-30</span>T08:<span class="hljs-number">46</span>:<span class="hljs-number">07.013</span>Z - Hash: <span class="hljs-number">2</span>b7174e3c646073c60a9 - Time: <span class="hljs-number">6285</span>ms</code></div><small class="shcb-language" id="shcb-language-13"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>At this step, you can open <code>frontend/dist/index.html</code> in your browser and explore the placeholder generated by <code>@angular/cli</code>.</p>



<p class="exercice"><strong>Exercise 3</strong> : Build your app with <code>--prod</code> option and check differences in output.</p>



<h4>Commit your code and push it to Github</h4>



<p class="exercice"><strong>Exercise 4</strong> : Register yourself on Github. Then create a private git repository on Github. Finally push you angular project to Github.</p>



<p>The <code>ng new</code> command already initialised a local git repository. If you have any pending change, you have to <code>commit</code> them. A commit validates and stores a list of changes (files created, updates&#8230;) and a message describing those changes. </p>


<pre class="wp-block-code" aria-describedby="shcb-language-14" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># list all changes currently not committed. Check if you see some "untracked files" that need to be persisted.</span>
git status

<span class="hljs-comment"># you probably want to commit new files in your repository.</span>
<span class="hljs-comment"># git add accepts a list of files or folder.</span>
<span class="hljs-comment"># '.' designates the current directory.</span>
git add .

<span class="hljs-comment"># commit every pending change with a message</span>
git commit -a -m <span class="hljs-string">"configure linter and typescript"</span>

<span class="hljs-comment"># follow the Github guide to push commits to remote for the first time</span>
git remote add origin https:<span class="hljs-comment">//github.com/{GITHUB_USERNAME}/{REPOSITORY_NAME}.git</span>
git branch -M main
git push -u origin main</code></div><small class="shcb-language" id="shcb-language-14"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="905" height="637" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-github-repository-exploration.gif" alt="" class="wp-image-1074"/><figcaption>At this step, your code is on Github. You can explore tracked files, show commit history, list changes in a particular commit, and so much more !</figcaption></figure>



<h4>Start using GitFlow and git-hf</h4>



<p>All the code is currently committed on main branch (previously called master branch). In the GitFlow workflow, the main branch is dedicated to the production code only.</p>



<p>This TPs series will use feature branches, develop and main. Each time you start a new feature (ex. adding authentification), you will start a feature branch. Once you completed your changes, open a pull request on github and merge the code to develop. Once the code on develop is well tested, it can be merged on main branch.</p>



<p class="exercice"><strong>Exercise 5</strong> : Initialise git hf with the following command. Ensure you select &lsquo;main&rsquo; as primary branch (not master). You can find <a href="https://datasift.github.io/gitflow/index.html" target="_blank" rel="noreferrer noopener">documentation here</a>.</p>


<pre class="wp-block-code"><div><code class="hljs">git hf init -a</code></div></pre>


<h2>Setup back-end infrastructure</h2>



<p>Before cloning the repository, remember we want <code>frontend</code> and <code>learning-materials</code> in the same location. So ensure you see <code>frontend</code> folder when you write <code>ls</code> command. If not, use the <code>cd</code> command.</p>



<p class="exercice"><strong>Exercise 6</strong> : create a folder dedicated to practical works and clone <a href="https://github.com/TruffeCendree/learning-materials" target="_blank" rel="noreferrer noopener">my git repository</a> in it.</p>



<p>This git repository is a <a href="https://en.wikipedia.org/wiki/Monorepo" target="_blank" rel="noreferrer noopener">monorepo</a>. It contains learning materials for multiple modules. You must focus on <code>learning-materials/frontend-web-development</code> folder.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-15" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># change directory to the folder containing the backend infrastructure (docker-compose.yml)</span>
<span class="hljs-built_in">cd</span> learning-materials/frontend-web-development</code></div><small class="shcb-language" id="shcb-language-15"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 7</strong>: Inside this folder, you will find <code>docker-compose.yml</code>. The file contains the configuration of back-end services (mariadb database, phpmyadmin, the back-end api&#8230;). Those services discuss together over an internal network and use passwords. Replace password as requested in the <code>docker-compose.yml</code> file.</p>



<p>Do you know what is a safe password ? How long should they be ? ANSSI (Agence Nationale de la Sécurité des Systèmes d&rsquo;Information) provides explanations and a <a href="https://www.ssi.gouv.fr/administration/precautions-elementaires/calculer-la-force-dun-mot-de-passe/" target="_blank" rel="noreferrer noopener">strength calculator</a>. I recommend generating random and unique password for each account (not just in this module 🧐).</p>



<p class="exercice"><strong>Exercise 8</strong>: Start the mariadb database using the following command. On first launch, wait until the database reported a complete initialisation (highlighted in output).</p>


<pre class="wp-block-code" aria-describedby="shcb-language-16" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash shcb-code-table shcb-line-numbers"><span class='shcb-loc'><span><span class="hljs-comment"># only launch mariadb services defined in docker-compose.yml</span>
</span></span><span class='shcb-loc'><span>$ docker-compose up mariadb
</span></span><span class='shcb-loc'><span>Starting frontend-web-development_mariadb_1 ... <span class="hljs-keyword">done</span>
</span></span><span class='shcb-loc'><span>Attaching to frontend-web-development_mariadb_1
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52+00:00 [Note] [Entrypoint]: Entrypoint script <span class="hljs-keyword">for</span> MySQL Server 1:10.5.8+maria~focal started.
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52+00:00 [Note] [Entrypoint]: Switching to dedicated user <span class="hljs-string">'mysql'</span>
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52+00:00 [Note] [Entrypoint]: Entrypoint script <span class="hljs-keyword">for</span> MySQL Server 1:10.5.8+maria~focal started.
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] mysqld (mysqld 10.5.8-MariaDB-1:10.5.8+maria~focal) starting as process 1 ...
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] InnoDB: Using Linux native AIO
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] InnoDB: Uses event mutexes
</span></span><span class='shcb-loc'><span>[...] truncated
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Warning] <span class="hljs-string">'proxies_priv'</span> entry <span class="hljs-string">'@% root@d05a66d49a70'</span> ignored <span class="hljs-keyword">in</span> --skip-name-resolve mode.
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] Reading of all Master_info entries succeeded
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] Added new Master_info <span class="hljs-string">''</span> to <span class="hljs-built_in">hash</span> table
</span></span><mark class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] mysqld: ready <span class="hljs-keyword">for</span> connections.
</span></mark><mark class='shcb-loc'><span>mariadb_1     | Version: <span class="hljs-string">'10.5.8-MariaDB-1:10.5.8+maria~focal'</span>  socket: <span class="hljs-string">'/run/mysqld/mysqld.sock'</span>  port: 3306  mariadb.org binary distribution
</span></mark></code></div><small class="shcb-language" id="shcb-language-16"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 9</strong> : Once database server is ready, exit docker (using <code>Ctrl + C</code>). Then start the full stack. The backend API should notify a successful startup.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-17" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash shcb-code-table shcb-line-numbers"><span class='shcb-loc'><span>$ docker-compose up
</span></span><span class='shcb-loc'><span>Building backend
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>[... truncated]
</span></span><span class='shcb-loc'><span>Successfully built 48950e9da763
</span></span><span class='shcb-loc'><span>Successfully tagged frontend-web-development_backend:latest
</span></span><span class='shcb-loc'><span>WARNING: Image <span class="hljs-keyword">for</span> service backend was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>Starting frontend-web-development_mariadb_1 ... <span class="hljs-keyword">done</span>
</span></span><span class='shcb-loc'><span>Creating frontend-web-development_backend_1    ... <span class="hljs-keyword">done</span>
</span></span><span class='shcb-loc'><span>Creating frontend-web-development_phpmyadmin_1 ... <span class="hljs-keyword">done</span>
</span></span><span class='shcb-loc'><span>Attaching to frontend-web-development_mariadb_1, frontend-web-development_phpmyadmin_1, frontend-web-development_backend_1
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>[... truncated]
</span></span><span class='shcb-loc'><span>mariadb_1     | Version: <span class="hljs-string">'10.5.8-MariaDB-1:10.5.8+maria~focal'</span>  socket: <span class="hljs-string">'/run/mysqld/mysqld.sock'</span>  port: 3306  mariadb.org binary distribution
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>[... truncated]
</span></span><span class='shcb-loc'><span>phpmyadmin_1  | [Sun Jan 24 14:01:37.687410 2021] [core:notice] [pid 1] AH00094: Command line: <span class="hljs-string">'apache2 -D FOREGROUND'</span>
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>[... truncated]
</span></span><span class='shcb-loc'><span>backend_1     | &gt; frontend-web-development@1.0.0 db:prepare:prod /app
</span></span><span class='shcb-loc'><span>backend_1     | &gt; NODE_ENV=<span class="hljs-built_in">test</span> node -e <span class="hljs-string">"require('./build/server/mysql-store').default.rebuildDatabase('prod').then(() =&gt; process.exit()).catch(err =&gt; { console.error(err); process.exit(1) })"</span>
</span></span><span class='shcb-loc'><span>backend_1     | 
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:53.387Z backend:mysql-store Upgrading SQL triggers...
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:53.401Z backend:mysql-store Triggers updated successfully
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 14:01:53 4 [Warning] Aborted connection 4 to db: <span class="hljs-string">'unconnected'</span> user: <span class="hljs-string">'root'</span> host: <span class="hljs-string">'172.24.0.3'</span> (Got an error reading communication packets)
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 14:01:53 5 [Warning] Aborted connection 5 to db: <span class="hljs-string">'cleaningshop'</span> user: <span class="hljs-string">'root'</span> host: <span class="hljs-string">'172.24.0.3'</span> (Got an error reading communication packets)
</span></span><span class='shcb-loc'><span>backend_1     | 
</span></span><span class='shcb-loc'><span>backend_1     | &gt; frontend-web-development@1.0.0 db:prepare:<span class="hljs-built_in">test</span> /app
</span></span><span class='shcb-loc'><span>backend_1     | &gt; NODE_ENV=<span class="hljs-built_in">test</span> node -e <span class="hljs-string">"require('./build/server/mysql-store').default.rebuildDatabase('test').then(() =&gt; process.exit()).catch(err =&gt; { console.error(err); process.exit(1) })"</span>
</span></span><span class='shcb-loc'><span>backend_1     | 
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.288Z backend:mysql-store Upgrading SQL triggers...
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.307Z backend:mysql-store Triggers updated successfully
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.549Z backend:mysql-store Upgrading SQL triggers...
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.577Z backend:mysql-store Triggers updated successfully
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.582Z backend:app App listening on port 8080...
</span></span></code></div><small class="shcb-language" id="shcb-language-17"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>Let’s analyse logs above:</p>



<ul><li>Lines 2 to 7: docker-compose builds the backend using scripts in <code>Dockerfile</code> (more explanation about Dockerfile <a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noreferrer noopener">here</a>).</li><li>Lines 9 to 11: containers are booting.</li><li>Line 15: database reported a complete initialisation.</li><li>Line 18: phpmyadmin reported a complete initialisation.</li><li>Lines 22 and 30: the backend API creates databases and load schema.</li><li>Line 36: the backend API reported a complete initialisation. </li></ul>



<p>You now have 2 locally exposed services you can reach from the browser:</p>



<ul><li>https://thomas-veillard.fr:8080/ for the HTTP API server. </li><li>https://thomas-veillard.fr:8081/ for phpmyadmin, to explore data stored into the DB</li></ul>



<h2>HTTP Server overview</h2>



<p>HTTP server hosts the API and serves static files from <code>../../frontend/dist</code> (path relative to <code>docker-compose.yml</code>. That is why the location relative to <code>frontend</code> project was so important).</p>



<p>If you properly built the angular project and started the web server via docker-compose, you can now reach <code>https://thomas-veillard.fr:8080/</code> in your browser. You will be welcomed with your own frontend application.</p>



<h2>API documentation and playground</h2>



<p>The API is self-documented and up to date. Open it at https://thomas-veillard.fr:8080/docs.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="835" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-1024x835.gif" alt="" class="wp-image-969" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-1024x835.gif 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-300x245.gif 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-768x626.gif 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>API playground and documentation demonstration</figcaption></figure>



<p>During database population, some seeds were generated. These built-in accounts are designed for testing purposes:</p>



<ul><li><strong>Operator</strong> (operator@cleaning.com / seedpass)</li><li><strong>Customer</strong> (customer@cleaning.com / seedpass)</li><li><strong>Employee</strong> (employee@cleaning.com / seedpass)</li></ul>



<div class="exercice" style="padding-bottom: 0; margin-bottom: 1em">
<p><strong>Exercise 10</strong> : Through the playground, manually execute the following scenario:</p>

<code>POST /auth/login</code>
<p>Connect yourself as operator.</p>

<code>GET /api/users/me</code>
<p>Query some information about your own account.</p>

<code>GET /api/users</code>
<p>List all users on the shop. That is only possible because you are operator.</p>

<code>POST /auth/logout</code>
<p>Close your session.</p>

<code>??? find paths and arguments yourself</code>
<p>
Try to call any endpoint behind authentication.<br>
Register yourself as customer using public API.
</p>
</div>



<p class="exercice"><strong>Exercise 11</strong> : Same exercise, but this time you will use <a href="https://www.postman.com/" target="_blank" rel="noreferrer noopener">Postman</a>. Why ? Because the API designer will not always implement a playground&#8230;</p>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/">1. Setup your practical environment</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>4. Using web tools to build something else</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/using-web-technologies-to-build-something-else/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:02:36 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1440</guid>

					<description><![CDATA[<p>For desktops and phones Since front-end technologies were so convenient, developers found ways to reuse web technologies in other contexts. This targets specially desktop and phone app. The idea is always the same: to write an application using HTML/CSS/JS and bundle it inside a webview. Everything related to the browser UI is hidden. The user &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/using-web-technologies-to-build-something-else/" class="more-link">Continuer la lecture de <span class="screen-reader-text">4. Using web tools to build something else</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/using-web-technologies-to-build-something-else/">4. Using web tools to build something else</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>For desktops and phones</h4>



<p>Since front-end technologies were so convenient, developers found ways to reuse web technologies in other contexts. This targets specially desktop and phone app.</p>



<p>The idea is always the same: to write an application using HTML/CSS/JS and bundle it inside a webview. Everything related to the browser UI is hidden. The user only see what the developer wants to show.</p>



<p>Once packaged, the user does not see any difference compared to another software. It installs itself in the same way as native software. On Android, the application can be exported as an APK/AAB file and shipped via Google Play. On iOS, you submit an IPA file to the App Store Connect.</p>



<blockquote class="wp-block-quote"><p>Write once, run everywhere. 🎉</p></blockquote>



<p>This sentence summarises another benefit of sharing your codebase between the website version and the desktop/phone version. You only have a single codebase to maintain, so features are immediately available on all platforms. Finally, you may conditionally enable some features depending on the running environment capabilities.</p>



<p>Users may expect more features in an app that they installed compared to the web version. Effectively, by packaging your application using <code>Electron</code> or <code>Cordova</code>, you got access to advanced features and OS integrations. That is possible because <code>Electron</code> and <code>Cordova</code> trust your code.</p>



<p> Conversely, the browser has to deal with security issues. It always considers the website as mistrusted code running on your computer. It must sandbox and protect itself from it. For that reason, APIs like direct access to filesystems from the website are unavailable. </p>



<h4>For command line and back-end</h4>



<p>Nowadays, Javascript can run outside the browser. The leader platform is Node.js, built on top of the Chromium Javascript engine (V8). Node.js powers various cli tools (including those we will use in this module) and HTTP servers.</p>



<p>For developers, using the same languages for front-end and back-end improve productivity.</p>



<ul><li>There is only a single language to master.</li><li>Your stack is consistent and you may reuse dependencies across front and back.</li><li>You can share code between front and back.</li></ul>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/using-web-technologies-to-build-something-else/">4. Using web tools to build something else</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>3. How rich and interactive is this UI ?</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/how-rich-interactive-and-complex-is-this-ui/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 08:38:14 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1394</guid>

					<description><![CDATA[<p>The layout The « add server » page&#8217;s layout is composed of 4 parts: a header, containing site identity, notification centre and accesses to other parts of the customer portal ; a left menu, to navigate between the cloud portal features ; a content area, where the form takes place ; a floating footer summarizing the delivery. &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/how-rich-interactive-and-complex-is-this-ui/" class="more-link">Continuer la lecture de <span class="screen-reader-text">3. How rich and interactive is this UI ?</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/how-rich-interactive-and-complex-is-this-ui/">3. How rich and interactive is this UI ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-image size-large"><img src="https://thomas-veillard.fr/wp-content/uploads/2021/02/How-rich-can-be-a-web-ui-.gif" alt="" class="wp-image-1395"/><figcaption>The control panel of Hetzner Cloud, which is a nice example of Single Page Application.</figcaption></figure>



<h4>The layout</h4>



<p>The « add server » page&rsquo;s layout is composed of 4 parts:</p>



<ul><li>a header, containing site identity, notification centre and accesses to other parts of the customer portal ;</li><li>a left menu, to navigate between the cloud portal features ;</li><li>a content area, where the form takes place ;</li><li>a floating footer summarizing the delivery.</li></ul>



<h4>The form</h4>



<p>The form itself is highly interactive. Actions available at a step depends on a combination of previous choices. It opens modals containing another embedded form, computes the total price on the client side, prints warnings for misconfigurations, etc. All computations related to content are powered by Javascript.</p>



<h4>The style</h4>



<p>Fonts, colours, backgrounds, gradients, border radiuses, block sizes, margins, paddings, text positioning and so much more are handled by the browser rendering engine for you. </p>



<p>Imagine how complex it could be to round corners and center text of the following block if you had to deal with raw pixels&#8230; But that is so simple with CSS.</p>



<style>
.my-rounded-block {
  background-color: #ffecb8;
  border: 1px solid #795548;
  border-radius: 3px;
  text-align: center;
}
</style>

<p class="my-rounded-block">Example of paragraph with background and rounded border.</p>



<div class="wp-block-columns">
<div class="wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-18" data-shcb-language-name="CSS" data-shcb-language-slug="css"><div><code class="hljs language-css"><span class="hljs-selector-class">.my-rounded-block</span> {
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffecb8</span>;
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#795548</span>;
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;
  <span class="hljs-attribute">text-align</span>: center;
}</code></div><small class="shcb-language" id="shcb-language-18"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">CSS</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">css</span><span class="shcb-language__paren">)</span></small></pre></div>



<div class="wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-19" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-rounded-block"</span>&gt;</span>
  Example of paragraph with background and rounded border.
<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-19"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre></div>
</div>



<h4>Animations</h4>



<p>Building animations from scratch is something difficult. You must write mathematical functions describing the transformation, then compute each frame and render them. Your goal is to achieve 60 images per second, which requires optimisations.</p>



<p>Thanks to CSS3, animations are now easy to build. You just describe an initial and final state, and apply a built-in transformation function. The browser handle the rest. It even selects the best hardware available for the task and does concessions to maintain the framerate.</p>



<p>Animations give feedback to the user. They also make the UI interaction fluid. Some examples:</p>



<ul><li>The colour of a button changes on hover, on focus or on click.</li><li>Newly created elements inside the page are highlighted on append.</li></ul>



<p>This example illustrates perfectly why web technologies are so efficient for UI/UX compared to dinosaurs 🦖. (Hi JAVA and its Swing UI framework !)</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/how-rich-interactive-and-complex-is-this-ui/">3. How rich and interactive is this UI ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>2. Why are web technologies so popular ?</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/why-are-web-technologies-so-popular/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sun, 24 Jan 2021 08:24:00 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1342</guid>

					<description><![CDATA[<p>They are cross-platform. End user just needs a browser. The primary homes of front-end technologies are browsers themselves. Those browsers exist in almost any operating system. That is true for computers (Windows, MacOs, GNU/Linux&#8230;) as for phones and pads (Android, iOS&#8230;). If the end user is running an up-to-date browser, it immediately access all web &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/why-are-web-technologies-so-popular/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Why are web technologies so popular ?</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/why-are-web-technologies-so-popular/">2. Why are web technologies so popular ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>They are cross-platform. End user just needs a browser.</h4>



<p>The primary homes of front-end technologies are browsers themselves. Those browsers exist in almost any operating system. That is true for computers (Windows, MacOs, GNU/Linux&#8230;) as for phones and pads (Android, iOS&#8230;).</p>



<p>If the end user is running an up-to-date browser, it immediately access all web applications published on the Internet.</p>



<h4>They are well known, mature and still evolving.</h4>



<p>The web is not born yesterday. So the community learned from its experience. Nowadays, the web is a good place for standards. Standards ensure your projects will still work in decades if you strictly rely on them.</p>



<p>Have you seen the <a href="http://info.cern.ch/" target="_blank" rel="noreferrer noopener">first website ever built</a> ? It is still online and fully functional because it followed standards.</p>



<p>Of course, the web continues to grow and standards to evolve.</p>



<h4>Building rich and responsive UI is easy.</h4>



<p>The core business of web browsers is to render pages. As you can expect, browsers perform very well at this task.</p>



<p>From the point of view of web developers, you first have to write your content (with HTML). Then, you build the layout and apply styles thanks to CSS. Those two languages are quick and easy to learn. And they are so powerful (specially CSS which handles all the complexity).</p>



<h4>Javascript allows complex interaction inside the browser.</h4>



<p>Javascript comes from the old days of the Web. At this time, HTML and CSS were produced on server. Javascript purpose was to add a bit of dynamicity on the client-side. For example, it allowed:</p>



<ul><li>to animate elements (now replaced by CSS3 animations) ;</li><li>to apply minor changes to the page on user interaction (like showing or hiding a block when the clicks a button).</li></ul>



<p>Last decade, the language and its ecosystem have matured. A lot of frameworks help developers to produce all HTML and CSS using only Javascript. Even when a user clicks a link, the new page is produced and replaced this way.</p>



<blockquote class="wp-block-quote"><p>We call that kind of applications « Single Page Application ».</p></blockquote>



<p>If building and rendering the page can be done on client-side, is there still a place for servers ? It depends on your need. Some tasks, like authentication and authorisation can only run in trusted environments. Some other requires infrastructure, like files and contents sharing.</p>



<h4>Ecosystem is rich of tools</h4>



<p>During this module, you will discover some tools. First of all, your browser includes a lot of utilities like an element inspector, a JavaScript debugger, a network analyser, etc. You will also import and manage dependencies (that contains reusable code) using package managers. And so much more.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/why-are-web-technologies-so-popular/">2. Why are web technologies so popular ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>1. Prerequisites</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/introduction/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sun, 24 Jan 2021 08:23:21 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=884</guid>

					<description><![CDATA[<p>This course is about creating front-end applications, with modern web technologies. You will discover that such a rich environment, learn good practices, develop quality code, write modular code&#8230; Skills This teaching assumes you know the basics of HTML and CSS. If that is not the case, please consider the following resources. They are quick and &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/introduction/" class="more-link">Continuer la lecture de <span class="screen-reader-text">1. Prerequisites</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/introduction/">1. Prerequisites</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>This course is about creating front-end applications, with modern web technologies. You will discover that such a rich environment, learn good practices, develop quality code, write modular code&#8230;</p>



<h4>Skills</h4>



<p>This teaching assumes you know the basics of HTML and CSS. If that is not the case, please consider the following resources. They are quick and basic.</p>



<ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started" target="_blank" rel="noreferrer noopener">Getting started with HTML</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works" target="_blank" rel="noreferrer noopener">How CSS works</a></li></ul>



<h4>Tools</h4>



<p>For end users, Front-end web technologies only require a modern browser. In the same way, developers could use almost any operating system for building apps. Nonetheless, your experience may drastically differ, and some tools harder to install or unavailable.</p>



<p>You are free to use Windows or MacOS. Or you could install a GNU/Linux distribution in a virtual machine. My demonstrations will occur on an Ubuntu system.</p>



<p>Before the first lecture, please:</p>



<ul><li>bring your own computer, you will need it;</li><li>install <a href="https://nodejs.org/en/" target="_blank" rel="noreferrer noopener">Node.js</a>, as it is required for building applications. Use <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer noopener">nvm</a> for installing it;</li><li>install a decent IDE or editor for web development like VSCode or WebStorm;</li></ul>



<p>During practical works, you will install and use much more tools. For convenience, I already packaged some of them and my learning materials using Docker. </p>


<a href=https://docs.google.com/presentation/d/1cjTmJwYxGxT5aW4noNiNxUYFBbvRMG_i9r1tHBjxlFY/edit?usp=sharing target="_blank">
  <div style="display: flex; align-items: center; padding: 1em; border-radius: 3px; border: 1px solid #f5ba16; background: #f7f7f7">
    <div style="margin-right: 0.5em"><img src="/wp-content/uploads/2021/01/google_slide.svg" /></div>
    <div>Open lecture slides</div>
  </div>
</a>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/introduction/">1. Prerequisites</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>2. Instantanés de VM et changement d&#8217;environnement de bureau (TP)</title>
		<link>https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/2-utiliser-les-instantanes-de-vm-et-changer-denvironnement-de-bureau-tp/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 19 Jan 2021 18:19:05 +0000</pubDate>
				<category><![CDATA[Chapitre 2. Les interfaces utilisateur]]></category>
		<category><![CDATA[Théorie des systèmes d’exploitation et pratique de GNU/Linux]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=566</guid>

					<description><![CDATA[<p>Introduction Au cours de cette séance de TP, vous prendrez un instantané de votre machine virtuelle sous Ubuntu. Vous apporterez ensuite des modifications à cette machine en installant un nouvel environnement graphique. Enfin, vous aurez la possibilité de restaurer votre VM exactement telle qu&#8217;elle était avant vos modifications. Prérequis Avoir suivi le cours sur les &#8230; <a href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/2-utiliser-les-instantanes-de-vm-et-changer-denvironnement-de-bureau-tp/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Instantanés de VM et changement d&#8217;environnement de bureau (TP)</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/2-utiliser-les-instantanes-de-vm-et-changer-denvironnement-de-bureau-tp/">2. Instantanés de VM et changement d&rsquo;environnement de bureau (TP)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h3>Introduction</h3>



<p>Au cours de cette séance de TP, vous prendrez un instantané de votre machine virtuelle sous Ubuntu. Vous apporterez ensuite des modifications à cette machine en installant un nouvel environnement graphique. Enfin, vous aurez la possibilité de restaurer votre VM exactement telle qu&rsquo;elle était avant vos modifications.</p>



<h4>Prérequis</h4>



<ul><li>Avoir suivi le cours sur <a href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/1-les-interfaces-graphiques/">les interfaces graphiques</a>.</li><li>Disposer d&rsquo;une machine virtuelle Ubuntu 20.04, telle qu&rsquo;installée dans le TP <a href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-1-introduction/4-installation-dubuntu-dans-une-machine-virtuelle-tp/">« Installation d’Ubuntu dans une machine virtuelle »</a>.</li></ul>



<h4>Objectifs pédagogiques</h4>



<ul><li>Prendre et restaurer un instantané de machine virtuelle.</li><li>Comprendre la différence entre un instantané et une sauvegarde.</li><li>Installer un logiciel et ses dépendances avec APT.</li><li>Se familiariser avec Gnome et KDE.</li></ul>



<h3>Partie 1 : les instantanés</h3>



<p>Vous allez d&rsquo;abord expérimenter les instantanés de machines virtuelles. Il s&rsquo;agit d&rsquo;un formidable outil de productivité. Je vous recommande d&rsquo;en user systématiquement avant d&rsquo;effectuer une action que vous pourriez regretter. Ils vous permettront un retour en arrière tel que le système était au moment de l&rsquo;instantané.</p>



<p>Avec VirtualBox, vous pouvez créer un instantané des disques et de l&rsquo;état d’exécution de la machine virtuelle. Voici quelques scénarii :</p>



<ul><li>Vous prenez un instantané du disque. Puis vous installez une mise à jour logicielle. La mise à jour se passe mal et le système ne redémarre plus. Finalement, vous pourriez restaurer la machine virtuelle dans un état fonctionnel antérieur à la mise à jour.</li><li>Vous prenez un instantané du disque et de l&rsquo;exécution de la machine. Vous fermez malencontreusement un programme. En restaurant votre dernier instantané, votre programme sera à nouveau ouvert (comme s&rsquo;il n&rsquo;avait jamais été fermé).</li></ul>



<p>Vous allez expérimenter ces fonctionnalités au travers des prochains exercices.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="975" height="567" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/Vues-journaux-et-instantanees-de-VirtualBox.gif" alt="" class="wp-image-646"/><figcaption>Démonstration de l&rsquo;accès aux vues « instantanés » et « journaux » d&rsquo;une machine virtuelle sur VirtualBox.</figcaption></figure>



<p class="exercice"><strong>Exercice 1</strong> : En vous assurant que la machine virtuelle est éteinte, prenez un premier instantané. Nommez le « Fraîchement installé, à l&rsquo;arrêt ». Un fichier a été créé dans le dossier « TP Ubuntu/Snapshots » ? Quelle est son extension ? Déduisez le type de données qu&rsquo;il contient.</p>



<p class="exercice"><strong>Exercice 2</strong> : Démarrez maintenant la machine virtuelle. Allez jusqu&rsquo;à l&rsquo;écran de déverrouillage. Prenez un second instantané et nommez le « Fraîchement installé, en cours d’exécution ». Observez les changements dans le dossier « TP Ubuntu/Snapshots ». Combien de nouveaux fichiers ont été créés ? Quelles sont leurs extensions. Que peut bien contenir le fichier avec l&rsquo;extension « .sav » ?</p>



<p class="exercice"><strong>Exercice 3</strong> : Connectez-vous à votre compte sur Ubuntu. Ouvrez plusieurs logiciels de votre choix. Ensuite, prenez un nouvel instantané et nommez le « Fraîchement installé, en cours d’exécution et connecté ».</p>



<p class="exercice"><strong>Exercice 4</strong> : Éteignez proprement la machine virtuelle (depuis l&rsquo;interface d&rsquo;Ubuntu, sans passer par le bouton « fermer » de la fenêtre de VirtualBox).</p>



<p>En consultant la liste des instantanés, vous devriez obtenir le résultat ci-dessus (horodatage mis à part, évidemment).</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="573" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/Liste-des-instantanes-1024x573.png" alt="" class="wp-image-652" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/Liste-des-instantanes-1024x573.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Liste-des-instantanes-300x168.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Liste-des-instantanes-768x430.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Liste-des-instantanes.png 1047w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>État attendu à la fin de l&rsquo;exercice 4. Trois instantanés ont été créés et VM à l&rsquo;arrêt. </figcaption></figure>



<p class="exercice"><strong>Exercice 5</strong> : Virtualbox signale que l&rsquo;état actuel est modifié. À votre avis, à quelles modifications fait-il référence ?</p>



<p class="exercice"><strong>Exercice 6</strong> : Restaurez l&rsquo;instantané « Fraîchement installé, en cours d’exécution et connecté ». Décochez au besoin la case « créer un instantané de l&rsquo;état actuel de la machine ». L&rsquo;état actuel n&rsquo;est plus considéré comme modifié. Cela valide-t-il votre hypothèse de l&rsquo;exercice 5 ?</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" width="440" height="276" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/Avertissement-virtualbox-avant-restauration-de-snapshot.png" alt="" class="wp-image-656" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/Avertissement-virtualbox-avant-restauration-de-snapshot.png 440w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Avertissement-virtualbox-avant-restauration-de-snapshot-300x188.png 300w" sizes="(max-width: 440px) 100vw, 440px" /><figcaption>Avertissement de VirtualBox avant de restaurer un instantané qui écraserait des changements non validés dans un autre instantané.</figcaption></figure></div>



<p class="exercice"><strong>Exercice 6</strong> : Démarrez à nouveau la machine virtuelle. Vous retrouverez votre session et les vos différents logiciels dans l&rsquo;état exact où vous les aviez laissés. Comment cela est-il possible alors que vous aviez éteint la machine ?</p>



<h3>Partie 2 : plusieurs environnements de bureau</h3>


<div class="exercice" style="margin-bottom: 1em;">
<p><strong>Exercice 7</strong> : Installez KDE, sachant que :</p>
<ul style="margin-left: 1em;">
<li>le paquet <code>kde-plasma-desktop</code> permet d&rsquo;installer l&rsquo;environnement de bureau KDE;</li>
<li>que vous avez déjà installé les paquets <code>gcc</code> et <code>make</code> dans le précédent TP (<a href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-1-introduction/4-installation-dubuntu-dans-une-machine-virtuelle-tp/" data-wplink-url-error="true">Installation d’Ubuntu dans une machine virtuelle</a>);</li>
</ul>
<p>Juste avant de confirmer l&rsquo;installation, prenez note de l&rsquo;espace disque supplémentaire nécessaire. Pourquoi autant d&rsquo;espace libre est-il nécessaire ?</p>
<p>Vérifiez que le système peut procéder à l&rsquo;installation. Sinon, vous pouvez :</p>
<ul style="margin-left: 1em; margin-bottom: 0;">
<li>désinstaller des logiciels inutiles. Vous pouvez le faire graphiquement avec le logiciel « Ubuntu Software »;</li>
<li>préférer l&rsquo;installation du paquet <code>xfce4</code>, une autre interface beaucoup plus légère.</li>
</ul>
</div>


<p>Une fois KDE ou LXCE installé, vous pouvez changer de gestionnaire de bureau à la volée. Il faudra toutefois fermer la session active et la rouvrir comme montré sur l&rsquo;animation ci-dessous.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="938" height="764" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/Passage-de-Gnome-a-KDE.gif" alt="" class="wp-image-680"/><figcaption>Démonstration du passage de l&rsquo;interface Gnome à KDE.</figcaption></figure>



<p class="exercice"><strong>Exercice 8</strong> : N&rsquo;hésitez pas à expérimenter les deux environnements et à les comparer.</p>



<p class="exercice"><strong>Exercice 9</strong>: Le disque virtuel ne faisant que 10 Go, il reste presque plus d&rsquo;espace libre. Pour éviter les problèmes dans les prochains TP, restaurez votre premier instantané. Supprimez les autres pour libérer de l&rsquo;espace disque sur l&rsquo;hôte.</p>



<p>Félicitation, vous avez retrouvé votre machine virtuelle telle qu&rsquo;elle était en début de séance ! Bien que ce TP n&rsquo;ait laissé aucune trace sur votre VM, j&rsquo;espère que vous en retiendrez ses enseignements 🤔.</p>



<p class="exercice"><strong>Exercice 10</strong>: Au fait, sauriez-vous expliquer les différences entre un instantané et une sauvegarde ?</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/2-utiliser-les-instantanes-de-vm-et-changer-denvironnement-de-bureau-tp/">2. Instantanés de VM et changement d&rsquo;environnement de bureau (TP)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>1. Les interfaces graphiques</title>
		<link>https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/1-les-interfaces-graphiques/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Wed, 13 Jan 2021 18:29:03 +0000</pubDate>
				<category><![CDATA[Chapitre 2. Les interfaces utilisateur]]></category>
		<category><![CDATA[Théorie des systèmes d’exploitation et pratique de GNU/Linux]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=509</guid>

					<description><![CDATA[<p>Ce chapitre est l&#8217;un des rares abordant la question des interfaces graphiques. En effet, ce cours se concentrera plutôt sur l&#8217;usage de Linux sur les serveurs. Toutefois, en commençant par ce sujet, j&#8217;espère adoucir la courbe d&#8217;apprentissage pour ceux et celles qui n&#8217;auraient pas expérimenté la ligne de commande auparavant. Aussi, pour bien comprendre les &#8230; <a href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/1-les-interfaces-graphiques/" class="more-link">Continuer la lecture de <span class="screen-reader-text">1. Les interfaces graphiques</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/1-les-interfaces-graphiques/">1. Les interfaces graphiques</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Ce chapitre est l&rsquo;un des rares abordant la question des interfaces graphiques. En effet, ce cours se concentrera plutôt sur l&rsquo;usage de Linux sur les serveurs. Toutefois, en commençant par ce sujet, j&rsquo;espère adoucir la courbe d&rsquo;apprentissage pour ceux et celles qui n&rsquo;auraient pas expérimenté la ligne de commande auparavant.</p>



<p>Aussi, pour bien comprendre les avantages et inconvénients de chaque solution, ne vaut-il pas les avoir toutes deux expérimentées ? Et puis, je rappelle que ce cours doit vous apporter une culture sur l&rsquo;écosystème qui gravite autour de Linux.</p>



<h2>Du choix pour l&rsquo;environnement de bureau</h2>



<p>Vous souvenez-vous de la grande diversité des distributions GNU/Linux ? Sans tomber dans les mêmes extrêmes, il y a également un large choix de gestionnaires de bureau. De quoi faire plaisir à tous ceux qui ont envie de changement et veulent personnaliser leur environnement de travail.</p>



<p>Par chance, les différents gestionnaires de bureau proposent des expériences vraiment variées. En contrepartie, l&rsquo;expérience utilisateur change radicalement d&rsquo;une installation à l&rsquo;autre. Même les solutions techniques sous-jacentes diffèrent. Cela aboutit parfois à démultiplier les efforts de développement.</p>



<h4>Gnome 3</h4>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="576" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/activities-overview-1024x576.jpg" alt="" class="wp-image-583" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/activities-overview-1024x576.jpg 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/01/activities-overview-300x169.jpg 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/activities-overview-768x432.jpg 768w, https://thomas-veillard.fr/wp-content/uploads/2021/01/activities-overview-1536x864.jpg 1536w, https://thomas-veillard.fr/wp-content/uploads/2021/01/activities-overview-2048x1152.jpg 2048w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>L&rsquo;interface Gnome Shell, source: <a href="https://www.gnome.org/gnome-3/">Gnome</a></figcaption></figure>



<p>Gnome Shell est l&rsquo;interface par défaut d&rsquo;Ubuntu 20.04 et de Fedora, entre autres. Il supporte de multiples espaces de travail, des extensions, etc.</p>



<p>La fondation Gnome développe de nombreux logiciels, graphiquement et techniquement très bien intégrés à Gnome Shell, tels que :</p>



<ul><li>un éditeur de paramètres</li><li>un moniteur système (équivalant du gestionnaire de tâche sous Windows)</li><li>un courrielleur (gnome-evolution)</li><li>une boutique applicative (gnome-software)</li><li>un explorateur de fichiers (nautilus)</li><li>un bus de communication interprocessus (d-bus)</li><li>etc.</li></ul>



<p>Ces logiciels sont construits avec la bibliothèque C GTK, elle aussi développée par la fondation Gnome. GTK est une bibliothèque « cross plateform ». À ce titre, elle est aussi présente sur MacOS et Windows.</p>



<p>Gnome Shell a activement recours à l&rsquo;accélération matérielle (carte graphique) est réputé assez consommateur en ressources.</p>



<h4>KDE</h4>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="576" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/plasma-launcher-1024x576.png" alt="" class="wp-image-585" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/plasma-launcher-1024x576.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/01/plasma-launcher-300x169.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/plasma-launcher-768x432.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/01/plasma-launcher-1536x864.png 1536w, https://thomas-veillard.fr/wp-content/uploads/2021/01/plasma-launcher.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>Capture d&rsquo;écran de l&rsquo;interface KDE Plasma, source <a href="https://kde.org/" target="_blank" rel="noreferrer noopener">KDE</a></figcaption></figure>



<p>L&rsquo;interface Plasma de KDE paraîtra plus familière aux utilisateurs de Windows, que ce soit par son « menu démarré » ou la disposition de sa « barre de tâches ».</p>



<p>KDE n&rsquo;en est pas moins une interface hautement personnalisable et extensible. Elle est construite sur la bibliothèque QT.</p>



<p>Sur beaucoup de points, KDE et Gnome sont similaires. Les deux projets ont activement développé des logiciels s&rsquo;appuyant sur les mêmes fondations techniques que leurs gestionnaires de bureaux.</p>



<p>Heureusement, un programme développé pour KDE fonctionne sur Gnome, et inversement. Toutefois, dans ces situations, on retrouvera sur la même machine des dépendances des deux environnements. Cet excédent de binaires dépasse facilement plusieurs centaines de mégaoctets sur le disque.</p>



<h4>Les environnements légers</h4>



<p>Gnome et KDE sont les principaux représentants, mais ils partagent la place avec LXDE et Xfce. Ces alternatives visent la sobriété et une consommation de ressource moindre.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="795" height="600" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/795px-LXDE_desktop_full.png" alt="" class="wp-image-588" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/795px-LXDE_desktop_full.png 795w, https://thomas-veillard.fr/wp-content/uploads/2021/01/795px-LXDE_desktop_full-300x226.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/795px-LXDE_desktop_full-768x580.png 768w" sizes="(max-width: 795px) 100vw, 795px" /><figcaption>L&rsquo;interface LXDE est plutôt minimaliste. Source <a href="https://wiki.lxde.org/en/File:LXDE_desktop_full.png" target="_blank" rel="noreferrer noopener">lxde.org</a></figcaption></figure>



<h2>Les couches de l&rsquo;interface graphique</h2>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="768" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/Schema_des_couches_de_linterface_graphique-1024x768.png" alt="" class="wp-image-590" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/Schema_des_couches_de_linterface_graphique-1024x768.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Schema_des_couches_de_linterface_graphique-300x225.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Schema_des_couches_de_linterface_graphique-768x576.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Schema_des_couches_de_linterface_graphique.png 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>Les différentes couches pour construire une interface sous GNU/Linux.<br>Source <a href="https://fr.wikipedia.org/wiki/Gestionnaire_de_fen%C3%AAtres" target="_blank" rel="noreferrer noopener">Wikipédia</a></figcaption></figure>



<h4>Le matériel</h4>



<p>Les traitements graphiques sont consommateurs de ressources de calcul. Bien que le processeur soit à même d&rsquo;effectuer ces rendus, on préfère déléguer ce genre de tâches à des cartes d&rsquo;accélération matérielle.</p>



<p>On parle d&rsquo;accélération matérielle quand une tâche est assurée par un circuit spécialisé plutôt qu&rsquo;un processeur générique. La carte graphique en est une. Elle excelle en traitements parallélisés (donc pas que les images ou la 3D). À l&rsquo;inverse, un processeur est bien meilleur pour les tâches séquentielles.</p>



<h4>Le noyau</h4>



<p>Comme d&rsquo;habitude, le noyau contrôle le matériel et expose une couche d&rsquo;abstraction aux périphériques de plus haut niveau. Cette couche d&rsquo;abstraction est une API appelée le <a href="https://en.wikipedia.org/wiki/Direct_Rendering_Manager" target="_blank" rel="noreferrer noopener">Direct Rendering Manager (DRM)</a>. Elle reste de très bas niveau (comme le sous-entend le terme « direct ») et vise surtout à permettre la coopération de plusieurs processus.</p>



<h4>Le système de fenêtrage</h4>



<p>Le système de fenêtrage consomme l&rsquo;API DRM du noyau et expose à son tour une API de plus haut niveau. Cette dernière permet par exemple de rendu de formes géométriques et de polices. En prime, il gère la redirection de clavier et de la souris vers la fenêtre active.</p>



<p>Sous Linux, X11 est le logiciel de référence. Il se fait toutefois progressivement remplacer par Wayland, qui apportera plus de sécurité en isolant mieux les fenêtres entre elles. Mais Wayland ne supporte pas encore toutes les fonctionnalités de X11.</p>



<p>Comme nous le verrons dans un TP, X11 fonctionne sur un modèle de client-serveur. C&rsquo;est à dire qu&rsquo;il fonctionne comme un processus autonome et qu&rsquo;il expose son API via une communication interprocessus (capable de transiter sur le réseau). L&rsquo;autre processus qui utilise cette API est qualifié de client. X11 et le processus client sont complètement indépendants : ils peuvent être sur des machines différentes.</p>



<h4>Le gestionnaire de fenêtres</h4>



<p>Le gestionnaire de fenêtres fonctionne en coopération avec le système de fenêtrage. Il permet de positionner et de décorer les fenêtres. La décoration d&rsquo;une fenêtre consiste à afficher une bordure, un titre, des boutons de réduction, etc.</p>



<h4>L&rsquo;interface graphique (ou gestionnaire de bureau)</h4>



<p>On a vu des exemples d&rsquo;interface graphique en début de séance. Elles créent l&rsquo;environnement dans lequel existent les fenêtres. Cet environnement est composé d&rsquo;un lanceur d&rsquo;application (ex. un équivalent du « menu démarrer » de Windows), d&rsquo;un bureau, d&rsquo;une zone où retrouver les fenêtres réduites, d&rsquo;un espace d&rsquo;affichage des notifications, etc.</p>



<p>Le gestionnaire de bureau contrôle le système de fenêtrage via son API. Pour rappel, cette API permet d&rsquo;afficher un texte, de dessiner des lignes et des rectangles. Construire une belle fenêtre à partir de ces primitives est fastidieux. Pour simplifier cette tâche, les éditeurs de bureaux développent des bibliothèques (comme QT et GTK). Grâce à elles, créer un bouton se fait en une seule instruction. Elles prennent aussi en charge les thèmes (couleurs, taille de textes). Ces bibliothèques peuvent être réutilisées par des logiciels tiers pour construire leurs interfaces, comme s&rsquo;ils assemblaient des briques préexistantes.</p>



<h2>Que retenir ?</h2>



<ul><li>Contrairement à Windows ou MacOS, l&rsquo;environnement graphique de GNU/Linux peut être installé, désinstallé ou remplacé par l&rsquo;utilisateur. Plusieurs environnements peuvent cohabiter entre eux.</li><li>Il existe plusieurs environnements graphiques. Gnome et KDE sont les plus largement diffusés.</li><li>Les bibliothèques contiennent des fonctionnalités facilement réutilisables. On avait déjà évoqué la bibliothèque standard C. Dans cette séance, vous avez découvert d&rsquo;autres. Par exemple, GTK et QT servent à construire des interfaces graphiques.</li><li>Sous GNU/Linux, le rendu de la fenêtre est fait par X11 ou Wayland. Ce sont des applications client-serveur. X11 peut fonctionner sur une machine distante (transparence réseau), autorisant l&rsquo;export de fenêtres lors d&rsquo;une session distante (on y revient lors d&rsquo;un TP).</li><li>Bien que le CPU soit capable de faire un rendu graphique, on lui préfère des circuits spécialisés comme une carte ou un contrôleur graphiques. Cela s&rsquo;appelle l&rsquo;accélération matérielle.</li><li>Le matériel est toujours utilisé au travers du noyau. Toutefois, la couche d’abstraction mise en place par le noyau reste de bas niveau (ex. DRM). Les éditeurs préfèrent utiliser des API et des bibliothèques de plus haut niveau.</li></ul>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-2-les-interfaces-utilisateur/1-les-interfaces-graphiques/">1. Les interfaces graphiques</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>5. Quizz de fin de chapitre</title>
		<link>https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-1-introduction/5-quizz-de-fin-de-chapitre/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Wed, 06 Jan 2021 22:02:31 +0000</pubDate>
				<category><![CDATA[Chapitre 1. Introduction]]></category>
		<category><![CDATA[Théorie des systèmes d’exploitation et pratique de GNU/Linux]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=357</guid>

					<description><![CDATA[<p>Testez vos connaissances acquises lors de ce chapitre. En cliquant sur le bouton « voir les réponses » en fin de quiz, vous accéderez également aux explications détaillées. Vous pouvez considérer ces explications comme un complément du cours principal. Parmi ces choix, lequel ou lesquels sont des systèmes d&#8217;exploitation open source&#160;? Microsoft Windows est un système d&#8217;exploitation &#8230; <a href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-1-introduction/5-quizz-de-fin-de-chapitre/" class="more-link">Continuer la lecture de <span class="screen-reader-text">5. Quizz de fin de chapitre</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-1-introduction/5-quizz-de-fin-de-chapitre/">5. Quizz de fin de chapitre</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p style="margin-bottom: 3em;">Testez vos connaissances acquises lors de ce chapitre. En cliquant sur le bouton « voir les réponses » en fin de quiz, vous accéderez également aux explications détaillées. Vous pouvez considérer ces explications comme un complément du cours principal.</p>


<h4>Parmi ces choix, lequel ou lesquels sont des systèmes d&rsquo;exploitation open source&nbsp;?</h4>


<div style='margin-bottom: 2em'><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-0' id='quizz-0-0' data-ok='0' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-0-0' style='text-align: left'>Windows</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-0' id='quizz-0-1' data-ok='0' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-0-1' style='text-align: left'>MacOs</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-0' id='quizz-0-2' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-0-2' style='text-align: left'>GNU/Linux</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-0' id='quizz-0-3' data-ok='0' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-0-3' style='text-align: left'>LibreOffice</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-0' id='quizz-0-4' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-0-4' style='text-align: left'>Ubuntu</label></div></div>

<div class="hidden-until-responded">
<p><strong>Microsoft Windows</strong> est un système d&rsquo;exploitation propriétaire, dont l&rsquo;utilisation est soumise à des licences payantes.</p>
<p>D&rsquo;un côté, des versions OEM sont conçues pour les intégrateurs et fabricants de PC. Le client final en ignore le coût, car il est intégré au prix de l&rsquo;ordinateur neuf. Les licences OEM sont solidaires de la machine et ne peuvent pas être migrées sur un autre ordinateur.</p>
<p>De l&rsquo;autre, les clients peuvent acheter des licences au détail. Ces dernières concernent tout particulièrement les entreprises exploitant l&rsquo;édition Windows Server.</p>
<p>En effet, Microsoft a adopté une tarification fonction de la quantité de cœurs CPU et du nombre d&rsquo;utilisateurs connectés simultanés. Dans le cas des serveurs, les tarifs des licences peuvent dépasser la valeur d&rsquo;achat du matériel. Malheureusement pour les entreprises, la politique de Microsoft vis-à- vis des licences a connu plusieurs remaniements, avec parfois de lourds impacts financiers.</p>
<p><strong>MacOS</strong> est un système d&rsquo;exploitation de la famille Unix. Il est commercialisé par Apple, qui n&rsquo;autorise son installation que sur ses propres modèles d&rsquo;ordinateurs. Même combat pour iOS.</p>
<p><strong>GNU/Linux</strong> est l&rsquo;union des projets <strong>GNU</strong> et <strong>Linux</strong>. Les deux projets utilisent la GPL (General Public Licence). Il s&rsquo;agit d&rsquo;une licence libre (donc qui va au-delà d&rsquo;une licence open-source en matière de liberté du code et des usages). Notez au passage que l&rsquo;on doit le projet GNU et la licence GPL au même instigateur : Richard Stallman !</p>
<p><strong>Libreoffice</strong> est hors course&#8230; C&rsquo;est une suite bureautique, donc n&rsquo;a rien à voir avec un OS.</p>
<p><strong>Ubuntu</strong> est une distribution GNU/Linux, au même titre que Debian.</p>
</div>


<h4>Quelle(s) solution(s) ai-je si mon système GNU/Linux ne reconnait pas un composant matériel ?</h4>


<div style='margin-bottom: 2em'><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-1' id='quizz-1-0' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-1-0' style='text-align: left'>Remplacer ce composant par un modèle supporté.</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-1' id='quizz-1-1' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-1-1' style='text-align: left'>Utiliser une version plus récente du noyau Linux.</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-1' id='quizz-1-2' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-1-2' style='text-align: left'>Installer ou activer un module noyau, en particulier un pilote.</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-1' id='quizz-1-3' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-1-3' style='text-align: left'>Récupérer la référence exacte de mon modèle et faire une recherche.</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-1' id='quizz-1-4' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-1-4' style='text-align: left'>Récupérer et analyser les journaux de mon système.</label></div></div>

<div class="hidden-until-responded">
<p>Parfois, certains composants se montrent récalcitrants sous Linux. Plusieurs raisons peuvent l&rsquo;expliquer.</p>
<ul>
<li>Le composant est peut-être trop récent, et votre version du noyau ne le supporte pas encore. Certaines distributions laissent leurs utilisateurs choisir entre le noyau le plus stable, et un second plus récent. Ubuntu, par exemple, propose <a href="https://wiki.ubuntu.com/Kernel/LTSEnablementStack">la Hardware Enablement Stack (HWE)</a>.</li>
<li>Le matériel est exotique, ou du moins la base d&rsquo;utilisateur n&rsquo;est pas assez développée pour justifier des développements de drivers. Les cartes Wifi et Bluetooth rentrent parfois dans cette catégorie. Linux ayant du mal à percer sur le marché des ordinateurs personnels. Donc cette gamme n&rsquo;est pas totalement supportée. D&rsquo;ailleurs, le support logiciel de ce composant pourrait ne jamais venir, ne vous laissant pas d&rsquo;autre choix que de le remplacer.</li>
</ul>
<p>Finalement, toutes les propositions étaient admissibles. Certaines sont toutefois plus abordables que d&rsquo;autres.&nbsp;</p>
</div>


<h4>Combien d&rsquo;utilisateurs au maximum peuvent utiliser une machine Linux ?</h4>


<div style='margin-bottom: 2em'><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-2' id='quizz-2-0' data-ok='0' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-2-0' style='text-align: left'>Un seul utilisateur</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-2' id='quizz-2-1' data-ok='0' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-2-1' style='text-align: left'>Jusqu&rsquo;à 5 utilisateurs</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-2' id='quizz-2-2' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-2-2' style='text-align: left'>Un très grand nombre</label></div></div>

<div class="hidden-until-responded">
<p>GNU/Linux est un système multi-utilisateur, ce qui exclut de fait le premier choix. Chaque utilisateur est désigné par un identifiant numérique unique appelé « uid ». Il semblerait que depuis la version 2.6 du noyau, cet identifiant soit codé sur 4 octets (source <a href="https://serverfault.com/questions/201136/maximum-number-of-users-on-linux">ServerFault</a>). Il y aurait donc 2^(4*8) = 2^32 = plus de 4 milliards d&rsquo;uids disponibles. Autant dire que les limitations de la machine (RAM, Disque, CPU) seraient atteintes bien avant que la réserve d&rsquo;uids disponibles ne se tarisse !</p>
<p>Par ailleurs, juste après son installation, votre système a déjà probablement dépassé la dizaine d&rsquo;utilisateurs, en incluant les comptes de services. Chaque utilisateur a une ligne dans le fichier /etc/passwd. Vous pouvez donc facilement compter le nombre d&rsquo;utilisateurs sur votre système.</p>
</div>


<h4>Qu&rsquo;est-ce qu&rsquo;un processus ?</h4>


<div style='margin-bottom: 2em'><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-3' id='quizz-3-0' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-3-0' style='text-align: left'>Un programme en cours d&rsquo;exécution</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-3' id='quizz-3-1' data-ok='0' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-3-1' style='text-align: left'>Un utilisateur procédurié, qui remet en cause la politique du système</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-3' id='quizz-3-2' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-3-2' style='text-align: left'>Une succession d&rsquo;activités qui aboutissent à un résultat</label></div></div>

<div class="hidden-until-responded">
<p>Le terme « processus » a effectivement plusieurs sens.</p>
<ul id="block-295d0153-5d85-4908-ac0e-ecee90967860" class="block-editor-rich-text__editable block-editor-block-list__block wp-block is-selected rich-text" tabindex="0" role="group" contenteditable="true" aria-multiline="true" aria-label="Bloc&nbsp;: Liste" data-block="295d0153-5d85-4908-ac0e-ecee90967860" data-type="core/list" data-title="Liste">
<li>Dans le langage courant, un processus est un ensemble d&rsquo;étapes qui transforment des entrées en des résultats souhaités. Dans ce contexte, vous entendrez aussi parler de procédures. Il s&rsquo;agit cette fois-ci de règles à respecter pour obtenir le résultat souhaité. Elles servent également de critères d&rsquo;observation du processus, notamment lors d&rsquo;audits.</li>
<li>Dans le contexte du système d&rsquo;exploitation, un processus est défini comme un programme en cours d&rsquo;exécution. Un processus appartient à l&rsquo;utilisateur qui l&rsquo;a lancé et mobilise des ressources (temps de calcul, mémoire vive&#8230;). Avant d&rsquo;être lancé, un programme n&rsquo;est jamais qu&rsquo;un fichier au format ELF (Executable and Linkable Format) sur le disque. Un chapitre entier sera dédié aux processus.</li>
</ul>
</div>


<h4>Au sens strict du terme, Linux désigne :</h4>


<div style='margin-bottom: 2em'><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-4' id='quizz-4-0' data-ok='0' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-4-0' style='text-align: left'>Seulement le noyau d&rsquo;un système GUI/Linux</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-4' id='quizz-4-1' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-4-1' style='text-align: left'>Seulement le noyau d&rsquo;un système GNU/Linux</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-4' id='quizz-4-2' data-ok='0' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-4-2' style='text-align: left'>Seulement le noyau et les utilitaires de base</label></div></div>

<div class="hidden-until-responded">
<p>Et oui ! Linux n&rsquo;est que le noyau d&rsquo;un système GNU/Linux. J&rsquo;ai consacré la moitié du <a href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-1-introduction/bref-historique-de-gnu-linux/" data-wplink-url-error="true">poste sur la genèse de Linux</a> à ce propos.</p>
</div>


<h4>La licence open source assure que :</h4>


<div style='margin-bottom: 2em'><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-5' id='quizz-5-0' data-ok='0' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-5-0' style='text-align: left'>Le logiciel est gratuit</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-5' id='quizz-5-1' data-ok='0' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-5-1' style='text-align: left'>Le code source est téléchargeable sur internet</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-5' id='quizz-5-2' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-5-2' style='text-align: left'>Que n&rsquo;importe qui peut utiliser le logiciel</label></div></div>

<div class="hidden-until-responded">
<ul>
<li>Un logiciel open-source n&rsquo;est pas obligatoirement gratuit. Il vous apporte seulement la garantie que son code source est facilement consultable. Sinon, de grandes entreprises comme Red Hat n&rsquo;auraient pas pu bâtir d&rsquo;activité lucrative de vente de licences pour leur distribution Linux. Red Hat, c&rsquo;est l&rsquo;un des plus grands contributeurs à Linux et son écosystème. Mais c&rsquo;est aussi une entreprise valorisée à 34 milliards de dollars lors de <a href="https://www.lefigaro.fr/secteur/high-tech/2018/10/29/32001-20181029ARTFIG00098-pourquoi-ibm-rachete-red-hat-pour-34-milliards-de-dollars.php">son rachat par IBM</a>. Chapeau (rouge) bas pour ce succès !</li>
<li>La diffusion des sources sur internet est devenue la normalité, notamment pour des raisons de commodité et de simplicité. Mais un logiciel n&rsquo;est pas tenu d&rsquo;en faire son canal de diffusion pour être éligible à une licence open-source. Il doit seulement garantir que l&rsquo;accès à ce code est facile.</li>
</ul>
</div>


<h4>Lesquelles de ces propositions sont justes ?</h4>


<div style='margin-bottom: 2em'><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-6' id='quizz-6-0' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-6-0' style='text-align: left'>Linux est en situation de quasi-monopole sur le segment du HPC (High Performance Computing).</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-6' id='quizz-6-1' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-6-1' style='text-align: left'>Linux est populaire sur les téléphones et les tablettes.</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-6' id='quizz-6-2' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-6-2' style='text-align: left'>Android est une distribution Linux, bien que profondément modifiée.</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-6' id='quizz-6-3' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-6-3' style='text-align: left'>La plupart des serveurs Linux n&rsquo;ont pas d&rsquo;interface graphique.</label></div><div style='display: flex; align-items: center; margin-bottom: 0.2em'><input type='checkbox' name='quizz-6' id='quizz-6-4' data-ok='1' style='margin-left: 0.5em; margin-right: 0.6em'/><label for='quizz-6-4' style='text-align: left'>La plupart des serveurs Linux ne peuvent pas être contrôlés avec une souris.</label></div></div>

<div class="hidden-until-responded">
<p>Toutes ces propositions étaient exactes. Je vous ressors la petite infographique d&rsquo;Intel sur le sujet, déjà présentée à la fin de la séance <a href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-1-introduction/bref-historique-de-gnu-linux/" data-wplink-url-error="true">sur la genèse de Linux.</a></p>
<p><img loading="lazy" class="alignnone wp-image-468 size-full" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/Linux-by-the-numbers.png" alt="" width="1024" height="512" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/Linux-by-the-numbers.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Linux-by-the-numbers-300x150.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/Linux-by-the-numbers-768x384.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p>En complément de cette infographie, vous pouvez vous documenter sur la part de marché d&rsquo;Android sur téléphones et tablettes. Bien qu&rsquo;Android ne soit pas considéré comme une distribution GNU/Linux, il n&rsquo;en reste pas moins un OS pourvu d&rsquo;un noyau Linux.</p>
<p>Enfin, concernant la dernière affirmation, la plupart des serveurs n&rsquo;ont effectivement pas d&rsquo;interface graphique. On a brièvement parlé de bash dans ce chapitre. C&rsquo;est sur lui (et sur d&rsquo;autres shells répondants aux mêmes besoins) que les administrateurs système s’appuient. Il est populaire parce qu&rsquo;il est devenu un standard de fait, commun à toutes les distributions. Aussi, il est léger et a une surface d&rsquo;attaque réduite. Souvenez-vous de la <a href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-1-introduction/des-distributions-linux-en-veux-tu-en-voila/" data-wplink-url-error="true">taille d&rsquo;Alpine (qui incluait bash) par rapport à Ubuntu Desktop</a> qui incorporait l&rsquo;interface Gnome Shell. La différence de taille sur disque est corrélée à une moindre consommation de ressources par Alpine. La surface d&rsquo;attaque est également drastiquement réduite.</p>
</div>

  <style>
    h4 {
      font-size: 1em !important;
    }

    .hidden-until-responded {
      margin-bottom: 4em;
      background-color: #f2f5f2;
      padding: 1em;
      padding-bottom: 0;
      border: 1px solid green;
      border-radius: 3px;
    }

    .hidden-until-responded ul {
      margin-left: 1em;
    }

    .hidden-until-responded ul li {
      margin-bottom: 0.5em;
    }
  </style>

  <p style="text-align: center">
    <button id="submit-quizz-button">Voir les réponses</button>
  </p>

  <script>
    document.getElementById('submit-quizz-button').addEventListener('click', function () {
      this.style.display = 'none'
      document.querySelectorAll('.hidden-until-responded').forEach(function (elem) { elem.style.display = 'block' })

      document.querySelectorAll('input[name^="quizz-"]').forEach(function (checkbox) {
        const label = document.querySelector('label[for="' + checkbox.id + '"]')

        if ((checkbox.checked ? '1' : '0') === checkbox.getAttribute('data-ok')) {
          label.innerText = '✅ ' + label.innerText 
        } else {
          label.innerText = '❌ ' + label.innerText
        }

        checkbox.disabled = true
      })
      
    });

    document.querySelectorAll('.hidden-until-responded').forEach(function (elem) { elem.style.display = 'none' })
  </script>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/theorie-des-systemes-dexploitation-et-pratique-de-gnu-linux/chapitre-1-introduction/5-quizz-de-fin-de-chapitre/">5. Quizz de fin de chapitre</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
