<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Archives des D√©veloppement web c√¥t√© client - Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/category/developpement-web-cote-client/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/category/developpement-web-cote-client/</link>
	<description>Mes cours et supports p√©dagogiques pour l&#039;enseignement de l&#039;ing√©nierie informatique.</description>
	<lastBuildDate>Sat, 20 Feb 2021 12:53:13 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1</generator>
	<item>
		<title>5. Que peut faire le web aujourd&#8217;hui ?</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 20 Feb 2021 10:43:49 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[D√©veloppement web c√¥t√© client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1973</guid>

					<description><![CDATA[<p>Lorsqu&#8217;on fait r√©f√©rence √† HTML5, on pense d&#8217;abord √† une certaine version du langage de balise utilis√© pour structurer les contenus. Toutefois, ce nom d√©signe aussi l&#8217;ensemble des HTML5 API. Vous trouverez un aper√ßu de ces nombreuses fonctionnalit√©s sur le site¬†https://whatwebcando.today./ Vous pourriez d√©couvrir par exemple que votre application peut d√©l√©guer le processus de paiement &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/" class="more-link">Continuer la lecture de <span class="screen-reader-text">5. Que peut faire le web aujourd&#8217;hui ?</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/">5. Que peut faire le web aujourd&rsquo;hui ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Lorsqu&rsquo;on fait r√©f√©rence √† HTML5, on pense d&rsquo;abord √† une certaine version du langage de balise utilis√© pour structurer les contenus. Toutefois, ce nom d√©signe aussi l&rsquo;ensemble des <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5" target="_blank" rel="noreferrer noopener">HTML5 API</a>. </p>



<p>Vous trouverez un aper√ßu de ces nombreuses fonctionnalit√©s sur le site¬†<a href="https://whatwebcando.today/" target="_blank" rel="noreferrer noopener">https://whatwebcando.today/</a>. Vous pourriez d√©couvrir par exemple que votre application peut d√©l√©guer le processus de paiement √† votre navigateur !</p>



<figure class="wp-block-image size-large"><img decoding="async" width="658" height="515" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Your-browser-can-process-payments.png" alt="" class="wp-image-1790" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/02/Your-browser-can-process-payments.png 658w, https://thomas-veillard.fr/wp-content/uploads/2021/02/Your-browser-can-process-payments-300x235.png 300w" sizes="(max-width: 658px) 100vw, 658px" /><figcaption>D√©monstration de la <a href="https://whatwebcando.today/payments.html" target="_blank" rel="noreferrer noopener">Payments API</a>, qui permet au site web de d√©l√©guer tout le processus de commande et de paiement en ligne. Cela inclut l&rsquo;affichage du d√©tail des prix, l&rsquo;enregistrement des cartes bancaires et le traitement du paiement.</figcaption></figure>



<h4>Exemple d&rsquo;APIs exploitant le r√©seau</h4>



<p>De nos jours, les applications web peuvent √©mettre et recevoir en temps r√©el des messages du serveur. En fonction de vos besoins, vous pourriez utiliser :</p>



<ul><li>Les <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" target="_blank" rel="noreferrer noopener">WebSockets</a> pour une communication √† double sens ;</li><li>Les <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events" target="_blank" rel="noreferrer noopener">server-sent events</a> pour recevoir des notifications depuis le serveur (unidirectionnel et l&rsquo;infrastructure est plus simple que les websockets).</li></ul>



<h4>Exemples d&rsquo;API pour le multim√©dia</h4>



<p>Votre navigateur supporte √† coup s√ªr la visioconf√©rence gr√¢ce √† l&rsquo;API <a href="https://developer.mozilla.org/fr/docs/WebRTC" target="_blank" rel="noreferrer noopener">WebRTC</a>. Celle-ci permet la r√©ception et diffusion de flux en temps r√©el et tire avantage des codecs et enregistrements de flux expos√©s par d&rsquo;autres API (cam√©ra, microphone, voire partage d&rsquo;√©cran).</p>



<p>Toujours sur le plan des traitements multim√©dias, le navigateur sait proc√©der √† des rendus 2D et 3D acc√©l√©r√©s par carte graphique gr√¢ce √† la <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="noreferrer noopener">Canvas API</a> et la <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API" target="_blank" rel="noreferrer noopener">WebGL API</a>.</p>



<h4>Votre navigateur est un v√©ritable moteur de bases de donn√©es</h4>



<p>Il y a plusieurs fa√ßons de sauvegarder des donn√©es c√¥t√© client. Entre autres :</p>



<ul><li>Les <a href="https://developer.mozilla.org/fr/docs/Web/HTTP/Cookies" target="_blank" rel="noreferrer noopener">cookies</a> sont de petits fichiers textes que le serveur d√©pose dans le navigateur. Celui-ci les renvoie syst√©matiquement lors de futures requ√™tes HTTP(s) vers les domaines autoris√©s.</li><li>Les <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer noopener">localStorage</a> et <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage" target="_blank" rel="noreferrer noopener">sessionStorage</a> sont des bases de donn√©es cl√©s/valeurs destin√©es √† conserver de petits volumes de donn√©es. Des objets plus complexes peuvent √™tre enregistr√©s s&rsquo;ils sont s√©rialis√©s avec <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/JSON/stringify" target="_blank" rel="noreferrer noopener">JSON.stringify</a> par exemple.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noreferrer noopener">IndexedDB</a> est une base de donn√©es relationnelle et transactionnelle dans laquelle vous pouvez sauvegarder plusieurs gigaoctets de donn√©es ü§©. √Ä partir d&rsquo;un certain volume (d√©pendant du navigateur), l&rsquo;application devra demander le consentement de l&rsquo;utilisateur.</li></ul>



<h4>En conclusion</h4>



<p>Le navigateur est un environnement d&rsquo;ex√©cution tr√®s riche en fonctionnalit√©s. Chacune d&rsquo;elles est impl√©ment√©e dans le respect de standards, dont notamment les HTML5 API Standards.</p>



<p>Malheureusement, votre base d&rsquo;utilisateur est h√©t√©rog√®ne. Avant d&#8217;employer toute solution, vous devriez v√©rifier son taux d&rsquo;adoption par le march√©. Le r√©f√©rentiel <a href="https://caniuse.com/" target="_blank" rel="noreferrer noopener">https://caniuse.com/</a> vous y aidera. Il agr√®ge les parts de march√© de chaque navigateur, version par version.</p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/que-peut-faire-le-web-aujourdhui/">5. Que peut faire le web aujourd&rsquo;hui ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>4. Utiliser les technologies web pour construire autre chose qu&#8217;un site.</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 20 Feb 2021 09:22:35 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[D√©veloppement web c√¥t√© client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1944</guid>

					<description><![CDATA[<p>Pour les ordinateurs de bureau et les t√©l√©phones Puisque les technologies du web front-end sont si pratiques pour la construction d&#8217;interfaces, les d√©veloppeurs ont mis au point des stratag√®mes afin de les utiliser dans d&#8217;autres contextes. En particulier, ils souhaitent en user pour leurs applications sur PC, tablettes et t√©l√©phones. Peu importe la plateforme, l&#8217;id√©e &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/" class="more-link">Continuer la lecture de <span class="screen-reader-text">4. Utiliser les technologies web pour construire autre chose qu&#8217;un site.</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/">4. Utiliser les technologies web pour construire autre chose qu&rsquo;un site.</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Pour les ordinateurs de bureau et les t√©l√©phones</h4>



<p>Puisque les technologies du web front-end sont si pratiques pour la construction d&rsquo;interfaces, les d√©veloppeurs ont mis au point des stratag√®mes afin de les utiliser dans d&rsquo;autres contextes. En particulier, ils souhaitent en user pour leurs applications sur PC, tablettes et t√©l√©phones. </p>



<p>Peu importe la plateforme, l&rsquo;id√©e est souvent la m√™me. Il s&rsquo;agit d&rsquo;√©crire une application en HTML/CSS/JS et de l&#8217;empaqueter dans une webview. Tous les √©l√©ments relatifs √† l&rsquo;interface d&rsquo;un navigateur classique sont masqu√©s (pas de barre d&rsquo;adresse, de bouton de retour, etc.). L&rsquo;int√©gration avec le syst√®me est aussi renforc√©e gr√¢ce √† de nouvelles APIs.</p>



<p>Une fois empaquet√©e, l&rsquo;application propose une exp√©rience similaire aux autres logiciels. Elle peut fournir un programme d&rsquo;installation autonome (sous Windows ou MacOS), un paquet (.deb sous Debian, .rpm sous RHEL) ou une diffusion sur les boutiques (Google Play, App Store).</p>



<blockquote class="wp-block-quote"><p>Write once, run everywhere. üéâ</p><cite>Il s&rsquo;agit √† l&rsquo;origine du <a href="https://en.wikipedia.org/wiki/Write_once,_run_anywhere" target="_blank" rel="noreferrer noopener">slogan de Java</a>.</cite></blockquote>



<p>Cette citation r√©sume un autre b√©n√©fice de mutualiser la base de code entre plusieurs impl√©mentations (ex. un site web, une application PC et t√©l√©phone). Vous n&rsquo;avez alors qu&rsquo;une seule base de code et plusieurs cibles de construction. En cons√©quence, toute nouveaut√© ou correction est imm√©diatement disponible sur ces plateformes. Toutefois, rien ne vous emp√™che d&rsquo;activer conditionnellement certaines fonctionnalit√©s en fonction de la plateforme.</p>



<p>Les utilisateurs pourraient exiger davantage de fonctionnalit√©s d&rsquo;une application install√©e en comparaison √† sa version site. Electron et Cordova vous offrent cette possibilit√© via une plus forte int√©gration avec le syst√®me et des API suppl√©mentaires. Ce n&rsquo;est envisageable uniquement car Cordova et Electron font confiance √† votre code, contrairement √† un navigateur qui doit s&rsquo;en prot√©ger.</p>



<p>En effet, le navigateur fait face √† des enjeux de s√©curit√©. Il consid√®re chaque site comme un programme non fiable, voire potentiellement malveillant. Les m√©canismes de protection sont nombreux : sandbox, demande de permissions, API restreintes, etc. C&rsquo;est typiquement pour cette raison que le syst√®me de fichier n&rsquo;est pas expos√© √† un site web, mais pleinement accessible dans le contexte d&rsquo;Electron.</p>



<h4>Pour le terminal (ligne de commande) et les serveurs</h4>



<p>De nos jours, Javascript peut s&rsquo;ex√©cuter en dehors d&rsquo;un navigateur. Node.js est l&rsquo;environnement de r√©f√©rence. Il est bas√© sur le moteur V8 de Chromium qu&rsquo;il √©tend avec de nouvelles API. De nombreux outils en ligne de commandes et serveurs HTTP s&rsquo;en servent.</p>



<p>Pour les d√©veloppeurs, utiliser le m√™me langage entre le front-end et back-end am√©liore nettement la productivit√©. C&rsquo;est aussi un chemin rapide pour devenir ¬´¬†full-stack¬†¬ª.</p>



<ul><li>Il n&rsquo;y a qu&rsquo;un seul √† langage et √©cosyst√®me √† ma√Ætriser (donc plus de temps pour approfondir le sujet).</li><li>La stack technique est consistante et des briques (code, d√©pendances&#8230;) peuvent √™tre mutualis√©es entre le front-end et le back-end.</li></ul>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/utiliser-les-technologies-web-pour-construire-autre-chose-quun-site/">4. Utiliser les technologies web pour construire autre chose qu&rsquo;un site.</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>3. √Ä quelle point cette interface est-elle √©labor√©e ?</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 20 Feb 2021 07:09:08 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[D√©veloppement web c√¥t√© client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1896</guid>

					<description><![CDATA[<p>La disposition et mise en page (layout) La disposition et la mise en page consistent √† dimensionner et positionner les blocs. La page de commande d&#8217;un nouveau serveur est compos√©e de 4 principaux blocs : l&#8217;ent√™te accueille l&#8217;identit√© du service (logo), le centre de notifications et la navigation vers les autres portails ; le menu &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/" class="more-link">Continuer la lecture de <span class="screen-reader-text">3. √Ä quelle point cette interface est-elle √©labor√©e ?</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/">3. √Ä quelle point cette interface est-elle √©labor√©e ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1058" height="692" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/How-rich-can-be-a-web-ui-.gif" alt="" class="wp-image-1406"/><figcaption>L&rsquo;interface de gestion d&rsquo;Hetzner Cloud est un bel exemple de Single Page Application.</figcaption></figure>



<h4>La disposition et mise en page (layout)</h4>



<p>La disposition et la mise en page consistent √† dimensionner et positionner les blocs. La page de commande d&rsquo;un nouveau serveur est compos√©e de 4 principaux blocs :</p>



<ul><li>l&rsquo;ent√™te accueille l&rsquo;identit√© du service (logo), le centre de notifications et la navigation vers les autres portails ;</li><li>le menu de gauche permet de naviguer dans l&rsquo;interface de gestion du projet ;</li><li>le corps de la page (espace qui centralise l&rsquo;attention de l&rsquo;utilisateur) contient le formulaire ;</li><li>le pied de page flottant r√©sume l&rsquo;√©tat actuel de la commande.</li></ul>



<h4>Le formulaire dynamique</h4>



<p>Le formulaire lui-m√™me est hautement interactif. Les actions disponibles √† une √©tape d√©pendent d&rsquo;une combinaison de choix ant√©rieurs. Il ouvre des sous-formulaires dans des fen√™tres contextuelles, calcule et affiche le prix dans le pied de page, averti en cas de mauvaise configuration, etc. </p>



<p>Ponctuellement, Javascript collecte quelques informations aupr√®s du serveur comme la liste des volumes existants pour les proposer √† la s√©lection. Il n&rsquo;en demeure pas moins que l&rsquo;int√©gralit√© des calculs, de la construction de la page et de son rendu sont r√©alis√©s c√¥t√© client. Au moment o√π j&rsquo;√©cris cet article, la console est bas√©e sur Angular. Cela tombe bien, car nous utiliserons le m√™me cadriciel dans ce cours.</p>



<h4>Le style</h4>



<p>Le moteur de rendu du navigateur prend en charge les polices, les couleurs, les fonds color√©s ou textur√©s, les d√©grad√©s, les marges internes et externes, les bordures et leurs coins arrondis, le positionnement du texte et tant d&rsquo;autres √©l√©ments de style.</p>



<p>Imaginez un bloc sur fond jaune √† bordure marron, dont le texte est centr√© et les coins sont arrondis. Avec CSS, seulement quatre petites r√®gles sont requises. Mais combien de lignes de code vous faudrait-il pour produire le m√™me r√©sultat en manipulant directement un tableau 2D de pixels ?</p>





<p class="my-rounded-block">Example of paragraph with background and rounded border.</p>



<div class="is-layout-flex wp-container-5 wp-block-columns">
<div class="is-layout-flow wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="CSS" data-shcb-language-slug="css"><div><code class="hljs language-css"><span class="hljs-selector-class">.my-rounded-block</span> {
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffecb8</span>;
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#795548</span>;
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;
  <span class="hljs-attribute">text-align</span>: center;
}</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Langage du code¬†:</span> <span class="shcb-language__name">CSS</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">css</span><span class="shcb-language__paren">)</span></small></pre></div>



<div class="is-layout-flow wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-rounded-block"</span>&gt;</span>
  Example of paragraph with background and rounded border.
<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Langage du code¬†:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre></div>
</div>



<h4>Les animations</h4>



<p>Cr√©er une animation √† partir de z√©ro est difficile. Il faut poser des formules math√©matiques d√©crivant la transformation de la cible en fonction du temps. Ensuite, il faut calculer chacune des images tout en visant un d√©bit stable de 60 images par seconde. Cela implique beaucoup d&rsquo;optimisations, d&rsquo;autant plus que les animations peuvent coexister.</p>



<p>Heureusement, CSS3 vient encore une fois √† la rescousse. Il suffira de lui d√©crire les √©tats initiaux et finaux de l&rsquo;√©l√©ment √† animer. Le navigateur s&rsquo;occupe du reste, notamment du choix du mat√©riel le plus adapt√© (comme un acc√©l√©rateur graphique si disponible) et des √©ventuelles concessions pour maintenir un d√©bit d&rsquo;images satisfaisant.</p>



<p>Les animations donnent un retour √† l&rsquo;utilisateur, lui procurant le sentiment que l&rsquo;interface est r√©active et pr√™te √† accepter de nouvelles instructions.</p>



<ul><li>Le changement de couleur d&rsquo;un bouton au survol de la souris invite l&rsquo;utilisateur √† interagir avec.</li><li>Une animation de chargement l&rsquo;avertit que l&rsquo;application travaille normalement, m√™me si le r√©sultat est un peu long √† obtenir.</li></ul>



<p>Finalement, cet exemple d&rsquo;application illustre parfaitement l&rsquo;efficacit√© du couple HTML/CSS pour la construction d&rsquo;interfaces graphiques. Rien √† voir, donc, avec des dinosaures ü¶ñ comme swing de Java !</p>
<style class="advgb-styles-renderer">
.my-rounded-block {
  background-color: #ffecb8;
  border: 1px solid #795548;
  border-radius: 3px;
  text-align: center;
}
</style><p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/a-quelle-point-cette-interface-est-elle-elaboree/">3. √Ä quelle point cette interface est-elle √©labor√©e ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>2. Pourquoi les technologies web sont-elles si populaires ?</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Wed, 17 Feb 2021 07:29:03 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[D√©veloppement web c√¥t√© client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1863</guid>

					<description><![CDATA[<p>Elles sont portables d‚Äôun OS √† l‚Äôautre. L‚Äôutilisateur final a juste besoin d‚Äôun navigateur. Les technologies web front-end ont avant tout √©t√© con√ßues pour les navigateurs. Ces derniers fonctionnent sur presque n&#8217;importe quel syst√®me d&#8217;exploitation. C&#8217;est aussi bien valable pour les PC (Windows, MacOS, GNU/Linux&#8230;) que les t√©l√©phones (iOS, Android&#8230;). Du moment que l&#8217;utilisateur final &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Pourquoi les technologies web sont-elles si populaires ?</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/">2. Pourquoi les technologies web sont-elles si populaires ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Elles sont portables d‚Äôun OS √† l‚Äôautre. L‚Äôutilisateur final a juste besoin d‚Äôun navigateur.</h4>



<p>Les technologies web front-end ont avant tout √©t√© con√ßues pour les navigateurs. Ces derniers fonctionnent sur presque n&rsquo;importe quel syst√®me d&rsquo;exploitation. C&rsquo;est aussi bien valable pour les PC (Windows, MacOS, GNU/Linux&#8230;) que les t√©l√©phones (iOS, Android&#8230;).</p>



<p>Du moment que l&rsquo;utilisateur final emploie un navigateur √† jour, il acqui√®re imm√©diatement l&rsquo;acc√®s √† toutes les applications publi√©es sur Internet sous la forme de sites web.</p>



<h4> Elles sont ma√Ætris√©es, matures et continuent d‚Äô√©voluer.</h4>



<p>Internet n&rsquo;est pas n√© hier. Ses acteurs ont appris de leurs exp√©riences et ont capitalis√© sur les technologies et les outils.</p>



<p>Aujourd&rsquo;hui, le web est plut√¥t r√©git par des standards (au moins pour les briques fondamentales).  Si votre application respecte elle-m√™me strictement ces standards, alors il est certain qu&rsquo;elle fonctionnera encore dans des d√©c√©nies.</p>



<p>Prenez pour exemple <a href="http://info.cern.ch/" target="_blank" rel="noreferrer noopener">le premier site jamais construit</a> et publi√© sur internet. Il est toujours en ligne et parfaitement fonctionnel parce qu&rsquo;il s&rsquo;appuyait sur des standards.</p>



<p>Bien s√ªr, ces technologies continuent d&rsquo;√©voluer pour r√©pondre aux nouveaux besoins. Il suffit de comparer n&rsquo;importe quel site moderne au premier du CERN pour s&rsquo;en convaincre.</p>



<h4>La cr√©ation de riches interfaces est facile</h4>



<p>Historiquement, la principale mission d&rsquo;un navigateur est de proc√©der au rendu de pages web. C&rsquo;est une t√¢che √† laquelle ils excellent.</p>



<p>En tant que d√©veloppeur, il vous suffit de construire la structure et son contenu en HTML. Quelques centaines de r√®gles CSS permettent ensuite d&rsquo;appliquer un style et une disposition. Toute la complexit√© du rendu est ensuite prise en charge par de navigateur.</p>



<h4>Javascript rend cette interface dynamique et interactive</h4>



<p>Au d√©but du web, le HTML et le CSS √©taient produits par les serveurs. Javascript n&rsquo;avait pour objectif que d&rsquo;ajouter un peu de dynamisme c√¥t√© client. Il servait principalement √† :</p>



<ul><li>animer des √©l√©ments (maintenant de la responsabilit√© de CSS) ;</li><li>r√©agir √† des √©v√©nements et modifier ponctuellement la page (par exemple afficher ou cacher un bloc quand l&rsquo;utilisateur clique sur un bouton).</li></ul>



<p>Cette derni√®re d√©cennie, le langage et son √©cosyst√®me ont m√ªri. Beaucoup de cadriciels et de biblioth√®ques aident les d√©veloppeurs √† construire l&rsquo;int√©gralit√© de leurs applications clientes en JS. Celles-ci sont alors responsables de produire contenus et styles, en plus de g√©rer la navigation. Lorsque l&rsquo;utilisateur clique sur un lien interne, Javascript capture l&rsquo;√©v√©nement, puis g√©n√®re et remplace la page actuelle.</p>



<blockquote class="wp-block-quote"><p>On les appelle des ¬´¬†<em>Single Page Application¬†¬ª</em>.</p></blockquote>



<p>Si tout le processus de construction et de rendu des pages se fait c√¥t√© client, y-a-t-il encore besoin de serveurs ? Cela d√©pendra des besoins de l&rsquo;application. Certaines t√¢ches, comme l&rsquo;authentification et l&rsquo;autorisation des acc√®s, sont r√©serv√©s √† des environnements de confiance. D&rsquo;autres routines peuvent n√©cessiter une infrastructure pour la persistance et la diffusion de donn√©es. </p>



<h4>L&rsquo;√©cosyst√®me est riche en outils</h4>



<p>Les outils am√©liorent la productivit√©, le confort ou la qualit√©. C&rsquo;est pourquoi tant d&rsquo;efforts et d&rsquo;√©nergies sont d√©pens√©s √† les maintenir. Ils sont particuli√®rement abondant en d√©veloppement web.</p>



<p>Vous d√©couvrirez naturellement certains d&rsquo;entres-eux au cours du module. En particulier, l&rsquo;inspecteur de DOM, de r√©seau, de m√©moire ou le d√©bogueur Javascript int√©gr√©s √† votre navigateur vous seront d&rsquo;une grande aide. Vous apprendrez aussi √† importer et g√©rer du code tiers gr√¢ce aux gestionnaires de d√©pendances. Et bien plus encore !</p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/pourquoi-les-technologies-web-sont-elles-si-populaires/">2. Pourquoi les technologies web sont-elles si populaires ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>1. Introduction et pr√©requis</title>
		<link>https://thomas-veillard.fr/developpement-web-cote-client/cours/introduction-2/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 16 Feb 2021 06:46:28 +0000</pubDate>
				<category><![CDATA[Cours]]></category>
		<category><![CDATA[D√©veloppement web c√¥t√© client]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1831</guid>

					<description><![CDATA[<p>Ce cours enseigne comment cr√©er des applications web c√¥t√© client en utilisant les technologies modernes. Objectifs p√©dagogiques Construire des interfaces web modernes de type Single Page Application, en utilisant Angular comme cadriciel. Comprendre le paradigme de programmation orient√©e √©v√©nement (Event Driven Development). G√©rer votre code source et collaborer en √©quipe gr√¢ce √† git et √† &#8230; <a href="https://thomas-veillard.fr/developpement-web-cote-client/cours/introduction-2/" class="more-link">Continuer la lecture de <span class="screen-reader-text">1. Introduction et pr√©requis</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/introduction-2/">1. Introduction et pr√©requis</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Ce cours enseigne comment cr√©er des applications web c√¥t√© client en utilisant les technologies modernes.</p>



<h4>Objectifs p√©dagogiques</h4>



<ul><li>Construire des interfaces web modernes de type <code>Single Page Application</code>, en utilisant Angular comme cadriciel.</li><li>Comprendre le paradigme de programmation orient√©e √©v√©nement (Event Driven Development).</li><li>G√©rer votre code source et collaborer en √©quipe gr√¢ce √† git et √† un workflow comme Git Flow.</li><li>G√©rer les d√©pendances de votre projet avec npm.</li><li>√âcrire du code source de qualit√© (bonnes pratiques, modularit√©, typage statique avec TS&#8230;).</li><li>D√©couvrir le riche √©cosyst√®me des applications web (usages, outils, avantages et inconv√©nients).</li></ul>



<h4>Comp√©tences</h4>



<p>Cet enseignement a √©t√© construit en supposant que vous connaissiez les bases de HTML et CSS, en plus d&rsquo;avoir l&rsquo;exp√©rience de l&rsquo;algorithmique et de la programmation. Si ce n&rsquo;est pas le cas, faites un tour sur ces ressources (rapides et faciles) :</p>



<ul><li><a href="https://developer.mozilla.org/fr/docs/Apprendre/HTML/Introduction_%C3%A0_HTML/Getting_started" target="_blank" rel="noreferrer noopener">Commencer avec le HTML</a></li><li><a href="https://developer.mozilla.org/fr/docs/Learn/CSS/First_steps/How_CSS_works" target="_blank" rel="noreferrer noopener">CSS, comment √ßa marche ?</a></li></ul>



<h4>Outils</h4>



<p>Les utilisateurs finaux n&rsquo;ont besoin que d&rsquo;un navigateur r√©cent pour ex√©cuter les applications web clientes (front-end).  Le choix de tel ou tel syst√®me d&rsquo;exploitation n&rsquo;a plus tant d&rsquo;importance dans ce contexte.</p>



<p>Dans une moindre mesure, c&rsquo;est aussi vrai pour les d√©veloppeurs. La plupart (mais pas tous) des outils fonctionnent sur les principaux OS. Toutefois, l&rsquo;exp√©rience de d√©veloppement peut beaucoup varier d&rsquo;un OS √† l&rsquo;autre et certaines t√¢ches seront parfois plus compliqu√©es.</p>



<p>Pour ce module, vous √™tes libre d&rsquo;utiliser Windows, MacOS ou Linux. Si vous utilisez Windows, vous pourriez rencontrer des difficult√©s √† installer Docker (utilis√© pour les TP).</p>



<p>Mes d√©monstrations seront r√©alis√©es sur Ubuntu, une distribution Linux. En cas de difficult√©s √† mettre en place votre environnement de travail, vous pourriez installer Linux dans une machine virtuelle. Il sera alors plus simple de le mettre en place.</p>



<p><strong>Pour le premier cours, veuillez s&rsquo;il vous plait :</strong></p>



<ul><li>apporter syst√©matiquement votre ordinateur.</li><li>installer <a href="https://nodejs.org/fr/" target="_blank" rel="noreferrer noopener">Node.js</a>, indispensable pour la construction et l&#8217;empaquetage d&rsquo;application web. Sous Linux, pr√©f√©rez l&rsquo;installation avec <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer noopener">nvm</a>.</li><li>installer un √©diteur ou un IDE adapt√© au d√©veloppement web, comme VSCode ou WebStorm.</li></ul>



<p>Pendant les travaux pratiques, vous installerez encore beaucoup d&rsquo;autres outils. Afin de gagner du temps et en confort, j&rsquo;ai empaquet√© la plupart de ces outils et des ressources p√©dagogiques avec Docker.</p>


<a href=https://docs.google.com/presentation/d/1cjTmJwYxGxT5aW4noNiNxUYFBbvRMG_i9r1tHBjxlFY/edit?usp=sharing target="_blank">
  <div style="display: flex; align-items: center; padding: 1em; border-radius: 3px; border: 1px solid #f5ba16; background: #f7f7f7">
    <div style="margin-right: 0.5em"><img src="/wp-content/uploads/2021/01/google_slide.svg" /></div>
    <div>Ouvrir le support de pr√©sentation</div>
  </div>
</a>
<p>L‚Äôarticle <a rel="nofollow" href="https://thomas-veillard.fr/developpement-web-cote-client/cours/introduction-2/">1. Introduction et pr√©requis</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
