<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Modern web development &#8211; Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/category/front-end-web-development/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/</link>
	<description>Mes cours et supports pédagogiques pour l&#039;enseignement de l&#039;ingénierie informatique.</description>
	<lastBuildDate>Mon, 11 Oct 2021 16:27:41 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.3</generator>
	<item>
		<title>02. Vue: practical activity, part n°2 (for your information)</title>
		<link>https://thomas-veillard.fr/front-end-web-development/vue/02-vue-practical-activity-part-n2/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Mon, 11 Oct 2021 05:11:51 +0000</pubDate>
				<category><![CDATA[03. VueJS]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=3522</guid>

					<description><![CDATA[<p>Learning outcomes Getting started with Oauth2, OpenID, etc. Understand the need for a state management in your app. Exploring various state management strategies. Discuss pros and cons of various state management patterns. The expected result At the end of the tutorial, the user will be able to login with its Microsoft account. The application will &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/vue/02-vue-practical-activity-part-n2/" class="more-link">Continuer la lecture de <span class="screen-reader-text">02. Vue: practical activity, part n°2 (for your information)</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/02-vue-practical-activity-part-n2/">02. Vue: practical activity, part n°2 (for your information)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Getting started with Oauth2, OpenID, etc.</li><li>Understand the need for a state management in your app.</li><li>Exploring various state management strategies.</li><li>Discuss pros and cons of various state management patterns.</li></ul>



<h4>The expected result</h4>



<p>At the end of the tutorial, the user will be able to login with its Microsoft account. The application will fetch and display its identity (basically its id, email and name). The current user identity is something you need in the whole app, so you will explore and discuss various ways to manage this.</p>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> During this tutorial, you will only grant access to your basic profile (name and email). API secrets stay in your browser, except when calling the API of course. You can revoke permissions at any time in the confidentiality screen of your Microsoft account.</p>



<h4>Oauth2, OpenID, Microsoft Graph API&#8230; What is it?</h4>



<p>In the continuation of the previous tutorial, the application will gain access to the Microsoft Graph API. This one give access to a large panel of microsoft&rsquo;s SaaS products, including Outlook.</p>



<p>The <strong>Microsoft Graph API</strong> acts on the side of a logged-in user, that must grant permission to the application. The<strong> Oauth2 protocol </strong>is responsive to the authentification and collection user&rsquo;s confirmation before granting a set of permissions to the application. In the terminology of Oauth2, a permission is called a <strong>scope</strong>.</p>



<p>Once authorised, the application gets an <strong>access token</strong> (aka. <strong>Bearer</strong>). This is just a long random string you must provide within each API query. The API knows everything about it (which user, scopes, application&#8230;). This short living key is strictly confidential and expires in about 1 hour, unless the user manually revokes it. Note that the oauth2 protocol also allows the app renewing it without user interaction.</p>



<p><strong>OpenID</strong> is another protocol built on top of Oauth2. It allows the user to share its identity (just the name and email) to the application. This way, the application just trusts the identity provider. This is widely used to implement <strong>SSO</strong> (aka. <strong>Single Sign On</strong>), allowing using a single account to sign-in on any application supporting this identity provider.</p>



<h4>The SigninButton component</h4>



<p>Let&rsquo;s build a <code>SigninButton</code> responsive of retrieving an <strong>access token</strong> and the associated user identity. Microsoft provides a library making this process easier: <a href="https://www.npmjs.com/package/@azure/msal-browser" target="_blank" rel="noreferrer noopener">@azure/msal-browser</a>.</p>



<p>Acquiring the user authorisation and fetching identity from the API is typically an async task that lasts a few seconds. So it is an opportunity to use <code>AsyncButton</code>.</p>



<p>Additionally, the SPA should be registered on Azure Active Directory portal. But do not worry too much about it, since I have already done it. Each integration (the name given to an external application registered on Azure AD) has a <strong>clientId</strong> used in Oauth2 protocol.</p>



<p>From a security and maintainability perspective, you should never let secrets and configurations hardcoded in your code. Instead, extract them to a configuration file ignored by git. Even better, allow those settings to be different depending on the environment (ex. test, development, staging, production&#8230;). The Vue assets pipeline has a built-in feature for this: <a href="https://cli.vuejs.org/guide/mode-and-env.html" target="_blank" rel="noreferrer noopener">env variables</a>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># file: .env.developent.local</span>
VUE_APP_OAUTH_CLIENT_ID=e8137439<span class="hljs-number">-4</span>d1d<span class="hljs-number">-462</span>d-a85f-f81cfea8f0d8</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p><i class="fas fa-exclamation-circle" style="color: #d32f2f; margin-right: 0.5em"></i> Unfortunately, changes appyed to .env files cannot be watched by the cli. Each time, you must restart the building process (ex. npm run serve).</p>



<p class="question"><strong>Question 1</strong>: Why you should not commit credentials on git?</p>



<p class="question"><strong>Question 2</strong>: Why may you want different configurations depending on the environment? Give an example.</p>



<p class="exercice"><strong>Exercice 1</strong>: I already wrote helpers on top of msla (see the file <code>src/lib/microsoftGraph.js</code> above). Import them for use in your <code>SigninButton</code> component.  For now, <code>SigninButton</code> stores the resolved user inside its own state (the <code>data</code> property of your component) and displays it in the template.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 1: add SigninButton »</p>


<pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// file src/lib/microsoftGraph.js</span>
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> msal <span class="hljs-keyword">from</span> <span class="hljs-string">'@azure/msal-browser'</span>

<span class="hljs-comment">/**
 * List the requested scopes (aka. the requested permissions)
 */</span>
<span class="hljs-keyword">const</span> requestedScopes = {
  <span class="hljs-attr">scopes</span>: [<span class="hljs-string">"User.Read"</span>]
}

<span class="hljs-keyword">const</span> msalInstance = <span class="hljs-keyword">new</span> msal.PublicClientApplication({
  <span class="hljs-attr">auth</span>: {
    <span class="hljs-attr">clientId</span>: process.env.VUE_APP_OAUTH_CLIENT_ID
  },
  <span class="hljs-attr">cache</span>: {
    <span class="hljs-attr">cacheLocation</span>: <span class="hljs-string">"sessionStorage"</span>
  }
})

<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">signInAndGetUser</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> authResult = <span class="hljs-keyword">await</span> msalInstance.loginPopup(requestedScopes)
  msalInstance.setActiveAccount(authResult.account)
  <span class="hljs-keyword">return</span> authResult.account
}</code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="1060" height="836" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/signin-button.gif" alt="" class="wp-image-3576"/></figure>



<h4>State management for the current user</h4>



<p>Currently, the identity fetched from Microsoft Graph is stored inside the local state of the  <code>SigninButton</code> component.</p>



<figure class="wp-block-image size-large"><img src="https://thomas-veillard.fr/wp-content/uploads/2021/09/user-stored-in-the-signin-button-component.png" alt="" class="wp-image-3586"/><figcaption>Screensheet of vue-devtools, showing the data property of <code>SigninButton</code>.</figcaption></figure>



<p>This means, only that component is currently aware of the connected user:</p>



<ul><li>If the component is unmounted, its internal state is, of course, lost.</li><li>Only children of <code>SigninButton</code> may potentially get access to that user through <code>props</code>. </li></ul>



<p>The current user identity is typically something that should be shared across the whole application (aka. a global state). Any component may read it and a few one (the existing <code>SigninButton</code>, a potential <code>SignoutButton</code>&#8230;) needs to update it.</p>



<p class="has-text-align-center">***</p>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> Now, we want to display the current user name fetched by <code>SigninButton</code> inside the template of <code>HomePage</code>. Let&rsquo;s explore 3 ways to accomplish this.</p>



<h5><span style="color:#a2870d" class="has-inline-color">First solution, use props and events through component tree.</span></h5>



<p>Before going further, read first <a href="https://v3.vuejs.org/guide/component-basics.html#base-example" target="_blank" rel="noreferrer noopener">Components Basics</a>, <a href="https://v3.vuejs.org/guide/component-props.html#prop-types" target="_blank" rel="noreferrer noopener">Props</a> and <a href="https://v3.vuejs.org/guide/component-custom-events.html" target="_blank" rel="noreferrer noopener">Custom Events</a>.</p>



<p>The first solution massively uses props and events. The user object is stored at the root of the component tree (inside the <code>App</code> component). Any child that has to read the user object should receive it through props. If the child is nested, every component of the branch must pass the <code>user</code> prop down.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1294" height="727" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/props-goes-down.gif" alt="" class="wp-image-3609"/><figcaption>Animated flow of props propagation from <code>App</code> to deeply nested children.</figcaption></figure>



<p>Then, the user interacts with the <code>SigninButton</code>. Once <code>SigninButton</code> knows the user identity, it emits a custom event called <code>userChanged</code>. Events travel the component tree from bottom to top. Each parent component should handle or propagate the event (or it will be discarded). Eventually, the event reaches to root component <code>App</code>, which uses it to update its internal state. This triggers a new rendering and the updated identity travels again the tree down through props.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1294" height="727" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/event-goes-up.gif" alt="" class="wp-image-3613"/><figcaption>Animated flow of events going up, getting handled in App and trigering a view update.</figcaption></figure>


<a href=https://docs.google.com/presentation/d/1FhBhkHADZAE-DtDQU2qk6MczPhqDVYRIyk7ysPOFdA8/edit#slide=id.gebafa763cd_0_119 target="_blank">
  <div style="display: flex; align-items: center; padding: 1em; border-radius: 3px; border: 1px solid #f5ba16; background: #f7f7f7">
    <div style="margin-right: 0.5em"><img src="/wp-content/uploads/2021/01/google_slide.svg" /></div>
    <div>Open the animations in Google Slide</div>
  </div>
</a>



<p></p>



<p class="exercice"><strong>Exercise 2</strong>: Use props to share the user with both  <code>SigninComponent</code> and <code>HomePage</code>. Then use events to update the shared user from <code>SigninComponent</code>. Eventually, display the user name in <code>HomePage</code>.</p>



<p class="question"><strong>Question 3</strong>: Is it the best way of doing things? Why?</p>



<p><strong>Spoiler</strong>: Of course, not. In addition to the reason you may have already found, there is a performance penalty. Did you notice <code>BaseLayout</code> was rendered again because its props changed? But <code>BaseLayout</code> does not need the <code>user</code> props for itself. It just forwards it to children&#8230;</p>



<h5><span style="color:#a2870d" class="has-inline-color">Second solution, use <code>provide</code> and <code>inject</code>.</span></h5>



<p>Read the official documentation carefully for <a href="https://v3.vuejs.org/guide/component-provide-inject.html" target="_blank" rel="noreferrer noopener">Provide &amp; Inject</a>.</p>



<p class="exercice"><strong>Exercise 4</strong>: Replace every needed <code>user</code> props by an <code>inject</code> and remove transitional props that are not useful anymore. For now, you can keep the <code>userChanged</code> event chain. Be sure to make your <code>inject</code> reactive.</p>



<p class="question"><strong>Question 4</strong>: What is the bug if the <code>inject</code> is not reactive?</p>



<p>Actually, you provide the <code>user</code> objet to the <code>App</code> children, whatever how deep are the consumer components. But updating the value of <code>user</code> inside <code>App</code> still requires to manually propagate events through some component branches.</p>



<p>There are various ways, just by using <code>provide</code> and <code>inject</code>, to trigger a change from a deeply nested component without emitting a chain of events. One of them is to provide a setter, which is just a function. This will be demonstrated by the teacher.</p>



<h5><span style="color:#a2870d" class="has-inline-color">Third solution, use a store library like vuex.</span></h5>



<p>The third proposed solution is using a store library. With stores, your global state is both readable and writable anywhere in your application. The business logic related to data manipulation is extracted to those stores. One of those libraries, <a href="https://next.vuex.vuejs.org/#what-is-a-state-management-pattern" target="_blank" rel="noreferrer noopener">Vuex</a>, is specially crafted to work with Vue and its internals.</p>



<blockquote class="wp-block-quote is-style-default"><p>Vuex helps us deal with shared state management with the cost of more concepts and boilerplate. It&rsquo;s a trade-off between short term and long term productivity.</p><cite>Quoted from vuex documentation: « When Should I Use It? »</cite></blockquote>



<p>According to this quote, vuex is probably not necessary for our dead-simple application. Using props, custom events, provide and inject may gracefully to cover our needs.</p>



<p>But it is still revelant to explore Vuex from a pedagogical point of view. So let&rsquo;s give it a try for this tutorial series.</p>



<p class="exercice"><strong>Exercise 5</strong>: Move the <code>user</code> property from the <code>App</code> component state to a store managed with vuex. Drop the event chain and let <code>SigninButton</code> directly call a <a href="https://next.vuex.vuejs.org/guide/mutations.html" target="_blank" rel="noreferrer noopener">mutation</a> in the store.</p>



<p class="question"><strong>Question 5</strong>: Build a comparison table between the various state management strategies available, especially about pro and cons. Optionally, feel free to explore other ways not covered in that tutorial.</p>



<p class="question"><strong>Question 6</strong>: Imagine a developer in your team proposes to exclusively manage the state with stores. Therefore, it recommends not to rely on <code>props</code> and <code>provide</code> anymore. Would you accept this? An argued response is expected.</p>



<h4>Client-side routing</h4>



<p><i class="fas fa-exclamation-circle" style="color: #d32f2f; margin-right: 0.5em"></i> Unfortunately, we are running out of time. Client-side routing was supposed to be the main part of the next tutorial. Instead, this section will cover the basis of vue-router.</p>



<figure class="wp-block-table is-style-stripes"><table><tbody><tr><td>/</td><td>Displays the <code>HomePage</code> component as it is currently defined.</td></tr><tr><td>/conversations</td><td>Displays the <code>ConversationsIndexPage</code> component that displays the more recent conversations inside the user&rsquo;s mailbox.</td></tr><tr><td>/conversations/:id</td><td>Displays the <code>ConversationShowPage</code> component that fetches and render the content of a given conversation (id retrived from the API).</td></tr></tbody></table><figcaption>Expected routes at the end of the tutorial</figcaption></figure>



<p class="exercice"><strong>Exercise 7</strong>: Install vue-router v4+ according to <a href="https://next.router.vuejs.org/installation.html" target="_blank" rel="noreferrer noopener">official documentation</a>. Make sure to pick the version compatible with Vue3, so vue-router v4 or higher.</p>



<p class="exercice"><strong>Exercise 8</strong>: Using the <a href="https://next.router.vuejs.org/guide/" target="_blank" rel="noreferrer noopener">Getting Started</a> guide, add <code>/</code> and <code>/conversations</code> routes. Define the router in its own module (ex. <code>src/router/index.js</code>). For now, the <code>ConversationsIndexPage</code> should just contain a placeholder (a small message to visually see that the route works fine).</p>



<p><strong>Tips</strong>: for the previous question, you need:</p>



<ul><li>to add <code>src/router/index.js</code> and export a router built with <code>createRouter()</code>.</li><li>to import the router in <code>src/main.js</code> and call <code>.use(router)</code> somewhere&#8230;</li><li>to use <code>&lt;router-view /&gt;</code> instead of <code>&lt;home-page /&gt;</code> somewhere&#8230;</li><li>to create another component for the new page.</li></ul>



<p class="exercice"><strong>Exercise 9</strong>: You probably tested your routes by directly changing the URL. Now, you will add a link in the header that targets the <code>/conversations</code> routes. That link should only be visible for logged users. Its must use the <code>&lt;router-link /&gt;</code>.</p>



<div class="wp-block-columns">
<div class="wp-block-column question">
<p><strong>Question 7</strong>: What is the performance difference between:</p>



<ul style="margin-left: 1em; margin-bottom: 0"><li><code>&lt;a href="/conversations"&gt;Conversation&lt;/a&gt;</code></li><li><code>&lt;router-link to="/conversations"&gt;Conversations&lt;/router-link&gt;</code></li></ul>
</div>
</div>



<p class="exercice"><strong>Exercise 10</strong>: In the case the user tries to access <code>/conversations</code> without being logged-in, it should be redirected to the home page. Use a <a href="https://router.vuejs.org/guide/advanced/navigation-guards.html#global-before-guards" target="_blank" rel="noreferrer noopener">guard</a> to implement this behaviour.</p>



<p class="exercice"><strong>Exercise 11</strong>: Implement the <code>/conversations/:id</code> route. For now, the newly created <code>ConversationShowPage</code> component should access the id given in the URL and display it inside the template.</p>



<p>At this step, the routing capabilities are fine. The next step would be to really fetch conversations from Outlook using the API and eventually display them in the UI. Unfortunately, we do not have anymore in-class session for that.</p>



<p><strong>Tips</strong>: If you want to complet the tutorial yourself, you must ask another authorisation for the API. The scope <em><code>Mail.Read</code></em> is need to fetch mails (see <code>src/lib/microsoftGraph.js</code>).</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/02-vue-practical-activity-part-n2/">02. Vue: practical activity, part n°2 (for your information)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>01. Vue: practical activity, part n°1</title>
		<link>https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 04 Sep 2021 16:36:06 +0000</pubDate>
				<category><![CDATA[03. VueJS]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=3243</guid>

					<description><![CDATA[<p>Learning outcomes Understand how Vue CLI is related to other well-known tools (webpack, babel&#8230;). Practise the Vue&#8217;s essentials (basic components, templates, scoped styles&#8230;). Organise your source code in various files and folders. Build reusable components (isolation, single responsibility, props and slots). Do not repeat yourself (DRY!) Work with Promise and events inside a Vue application. &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/" class="more-link">Continuer la lecture de <span class="screen-reader-text">01. Vue: practical activity, part n°1</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/">01. Vue: practical activity, part n°1</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Understand how Vue CLI is related to other well-known tools (webpack, babel&#8230;).</li><li>Practise the Vue&rsquo;s essentials (basic components, templates, scoped styles&#8230;).</li><li>Organise your source code in various files and folders.</li><li>Build reusable components (isolation, single responsibility, props and slots).</li><li>Do not repeat yourself (DRY!)</li><li>Work with Promise and events inside a Vue application.</li><li>Import third party packages providing components with npm.</li><li>Commit and reset staged changes with git.</li></ul>



<h4>Expected result</h4>



<p>At the end of the tutorial series, you got a lightweight SPA client for exploring mails and contacts from the Outlook product, through the Microsoft Graph API. This SPA targets both computers and phones, requiring responsive capabilities and appreciating resilience to network issues.</p>



<p>The first tutorial of the Vue&rsquo;s series focuses on setting up the project, understanding tools behind the Vue CLI (those discussed in the last tutorial), setting up the layout and adding some shared reusable components.</p>



<h4>Prepare your development environment</h4>



<p>In a general manner, your productivity and code quality are affected by used tools. Personally:</p>



<ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer noopener">vscode</a> as my primary code editor, especially suitable for JavaScript development.</li><li><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur" target="_blank" rel="noreferrer noopener">Vetur</a> is a vscode extension enabling syntax and language servers for <code>.vue</code> files.</li><li><a href="https://devtools.vuejs.org/" target="_blank" rel="noreferrer noopener">vue-devtools</a> extends browser&rsquo;s debugging capabilities (beta channel for Vue3).</li><li><a href="https://cli.vuejs.org/" target="_blank" rel="noreferrer noopener">Vue CLI</a> for managed vue projects (from project creation to distribution).</li><li>npm, node, typescript and the rest of well-known JS tools&#8230;</li></ul>



<h4>About the use of git with Moodle delivery</h4>



<p>The Vue CLI automatically initiates a local git repository unless you explicitly refuse it. After each question, I strongly recommend you commit your work with a meaningful message. This provides at least 2 immediate benefits:</p>



<ul><li>You can discard any change to your project since the last commit (for example, the last completed question). So, in the case you went in the wrong direction for a particular question, you can rollback to last clean state. This makes you confident while refactoring or deleting code.</li><li>As a teacher, I can « time travel » inside your code and see how it was at the end of some question.</li></ul>



<p>Because of the graded nature of the tutorial, you cannot push your code on a public repository. On another side, sharing with me access to your private Github repository is a time consuming and error-prone.</p>



<p>Instead, you will just upload the zip archive through the Moodle « assignment activity ». <span class="has-inline-color has-medium-pink-color">While building your zip, be sure to include the <code>.git</code> folder</span>. To be safe, just compress the parent folder and check the output archive.</p>



<h4>Vue project setup</h4>



<p class="question"><strong>Question 1</strong>: That is the main difference between local installation and global installation of packages with npm? What kind of packages do you generally install locally? What kind is generally installed globally?</p>


<pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># example of command to install the vue cli locally</span>
npm install @vue/cli

<span class="hljs-comment"># example of command to install the vue cli globally</span>
npm install -g @vue/cli</code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>According to the <a href="https://cli.vuejs.org/guide/installation.html" target="_blank" rel="noreferrer noopener">docs</a>, the global installation is best suitable for Vue CLI.</p>



<p class="exercice"><strong>Exercise 1</strong>: Create a new Vue project (called <code>vue-oauth-microsoft-graph</code>). Opt for the Vue3 recipe that relies on webpack and babel for the build chain.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> The Vue CLI as already committed the newly generated project.</p>



<p class="question"><strong>Question 2</strong>: Webpack is internally used by the Vue CLI. Why is it required to deal with both multiple JavaScript files and special extensions like <code>.vue</code>?</p>



<p>Babel is configured by default with <code>@vue/cli-plugin-babel/preset</code>, as specified in <code>babel.config.js</code>. By reading the package&rsquo;s documentation, you see it uses the <code>browserslist</code> configuration defined in <code>package.json</code>.</p>



<p class="question"><strong>Question 3</strong>: What is the role of babel and how <code>browserslist</code> may configure its output?</p>



<p class="question"><strong>Question 4</strong>: What is eslint and which set of rules are currently applied? The eslint configuration may be defined in a <code>eslint.config.js</code> or in <code>package.json</code> depending on the setup.</p>



<p><strong>Tips</strong>: additionally to the previous tools installed by Vue CLI, you can enable static type checking in your project. See the appendix at the end of the tutorial. Of course, it is optional.</p>



<p class="exercice"><strong>Exercise 2</strong>: Run <code>npm run serve</code> and open the app in your browser. Remember that npm looks at the <code>package.json</code> file (specially the <code>scripts</code> object) to find which command to execute.</p>



<p>Did you notice that <code>npm run serve</code> launches a program called  <code>vue-cli-service</code>? This is a cli locally installed by npm inside the <code>node_modules</code> folder. This dependency is dedicated to development experience, so it is a <code>devDependencies</code> in your <code>package.json</code>.</p>



<p class="exercice"><strong>Exercise 3:</strong> The newly generated project contains a few placeholders. Cleanup your project so it does not contain neither useless assets, nor the hello world. In other words, delete <code>HelloWorld.vue</code>, its related assets and all its references. As at the end of each exercise, the vue cli should not report any error or warning.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 3: remove vue CLI placeholders »</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="376" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders-1024x376.png" alt="" class="wp-image-3762" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders-1024x376.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders-300x110.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders-768x282.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders.png 1501w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>On the left, the vue app with placeholders. On the right, result after cleanup.</figcaption></figure>



<p>By default, only the <code>src/components</code> folder is intended for storing <code>.vue</code> files (aka. vue components). But we are free to use other directories depending on the nature of each component. Let&rsquo;s add <code>src/pages</code> to our code base.</p>



<ul><li><code>src/pages</code> contains top level components that produce a particular page (ex. the home page, the index of mails page, the contact page&#8230;). Those components are intended to be mounted with vue-router in the future.</li><li><code>src/components</code> contains shared components required by pages or other components (ex. navigation headers, buttons, user&rsquo;s cards, short preview of an email&#8230;).</li></ul>



<p class="exercice"><strong>Exercise 4</strong>: Create the <code>HomePage</code> component inside the right folder. Do not spend too much time on the template content, as it could be a simple sentence. Import it inside <code>App.vue</code>.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 4: create HomePage component »</p>



<h4>Base layout</h4>



<p><i class="fas fa-exclamation-circle" style="color: #d32f2f; margin-right: 0.5em"></i> While my original intent was using Vuetify to not spent unnecessary time styling component, Vuetify for Vue 3 is still under active development. Sorry! 😇</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="435" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/image-1024x435.png" alt="" class="wp-image-3378" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/09/image-1024x435.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/09/image-300x128.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/09/image-768x327.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/09/image.png 1296w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>Basic possible visual at the end of the next exercise and its components tree.</figcaption></figure>



<p><strong>Tips</strong>: If you wish to use <a href="https://fontawesome.com/" target="_blank" rel="noreferrer noopener">font awesome</a> icons with Vue 3, <a href="https://stackoverflow.com/questions/66389974/using-font-awesome-in-vue-3" target="_blank" rel="noreferrer noopener">take a look at this thread</a>.</p>



<p class="exercice"><strong>Exercise 5</strong>: Let&rsquo;s begin with the root component, formally <code>App</code> (in <code>src/App.vue</code>). Replace its template with the following content and create the missing components. Add some content to the header (ex. fake home link, fake user name&#8230;) and legal credits to the footer. Eventually, polish the looks and feels with scoped CSS.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-comment">&lt;!-- template of file src/App.vue --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">base-header</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">home-page</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">base-footer</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-comment">&lt;!-- do not remove the &lt;script /&gt; markup --&gt;</span></code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 5: create BaseHeader and BaseFooter »</p>



<p class="question"><strong>Question 5</strong>: What is the difference between scoped and non-scoped CSS?</p>



<p class="exercice"><strong>Exercise 6</strong>: In order to keep the root component <code>App</code> as simple as possible, extract everything related to the layout into a <code>BaseLayout</code> component. Using the <a href="https://v3.vuejs.org/guide/component-slots.html#slot-content" target="_blank" rel="noreferrer noopener">slot API</a>,  allow <code>BaseLayout</code> to receive children (to be rendered between the header and the footer).</p>



<p><strong>Tips</strong>: If you integrated font awesome, try extracting most logic out of <code>App</code>. When it comes to configure third party dependencies, I generally work with ES-modules inside a <code>src/lib</code> folder. Example: <code>src/lib/fontAwesome.js</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-comment">&lt;!-- template tag of src/App.vue --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">home-page</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 6: create BaseLayout that uses slot API »</p>



<h4>Reusable BaseButton</h4>



<p>For the need of the UI, let&rsquo;s create a <code>BaseButton</code> component. Basically, this is just a styled <code>&lt;button&gt;</code>. Its usage should be mostly the same (possibility to pass children, styles, classes, <code>role="button"</code> or <code>role="submit"</code>&#8230;).</p>



<p class="question"><strong>Question 6</strong>: How behaves non-prop attributes (aka. HTML attributes) passed down to a component, when its template has a single root element? <strong>Tips</strong>: it is well documented by vue, but you can also try it youself by passing the <code>style</code> attribute with a straight visual effect.</p>



<p class="exercice"><strong>Exercise 7</strong>: Implement such a <code>BaseButton</code>, animated on hover and focus. Do not forget the disabled state. You may try these buttons on your <code>HomePage</code> for now.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" width="539" height="124" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button.gif" alt="" class="wp-image-3490"/></figure></div>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 7: create BaseButton with primary color »</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="850" height="166" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button-used-in-header.gif" alt="" class="wp-image-3804"/><figcaption>Tips: it makes sense to use them in the navigation in header.</figcaption></figure>



<p class="exercice"><strong>Exercise 8</strong>: Add the <code>color</code> prop to <code>BaseButton</code>. This prop accepts one of <code>'primary', 'warn' or 'danger'</code> values. It defaults to  <code>primary</code> and you should validate the given value matches the enum. Then, dynamically apply styles to the button based on that prop.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" width="331" height="219" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button-with-color.png" alt="" class="wp-image-3493" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button-with-color.png 331w, https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button-with-color-300x198.png 300w" sizes="(max-width: 331px) 100vw, 331px" /></figure></div>



<p><strong>Tips</strong>: in a first time, ensure you can pass the props from <code>PageHeader</code> template to the <code>BaseButton</code> component (ex. by temporary rendering the color name in the template). Then, use that value to apply some conditional styles (2 proposed solutions above). Remember the DRY principal (Don&rsquo;t Repeat Yourself) and do not duplicate code sections.</p>



<div class="wp-block-advgb-accordions advgb-accordion-wrapper">
<div class="wp-block-advgb-accordion-item advgb-accordion-item" style="margin-bottom:15px"><div class="advgb-accordion-header" style="background-color:#000;color:#eee;border-style:solid;border-width:1px;border-radius:2px"><span class="advgb-accordion-header-icon"><svg fill="#fff" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24"><path fill="none" d="M0,0h24v24H0V0z"></path><path d="M12,5.83L15.17,9l1.41-1.41L12,3L7.41,7.59L8.83,9L12,5.83z M12,18.17L8.83,15l-1.41,1.41L12,21l4.59-4.59L15.17,15 L12,18.17z"></path></svg></span><h4 class="advgb-accordion-header-title" style="color:inherit">Solution 1: using CSS classes (simpler)</h4></div><div class="advgb-accordion-body" style="border-style:solid !important;border-width:1px !important;border-color:undefined !important;border-top:none !important;border-radius:2px !important">
<p>You may split your scoped CSS in 2 parts: the styles common to all components, and specific classes for each color in the palette. So, the component&rsquo;s style could look like:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">
<span class="hljs-selector-class">.button</span> {
  <span class="hljs-comment">/* css properties common to all buttons */</span>
}

<span class="hljs-selector-class">.button-primary</span> {
  <span class="hljs-comment">/* css properties specific to the primary color */</span>
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#42b983</span>;
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p>Finally, you just need to conditionally bind the CSS classes (<a href="https://v3.vuejs.org/guide/class-and-style.html" target="_blank" rel="noreferrer noopener">explained here</a>).</p>
</div></div>



<div class="wp-block-advgb-accordion-item advgb-accordion-item" style="margin-bottom:15px"><div class="advgb-accordion-header" style="background-color:#000;color:#eee;border-style:solid;border-width:1px;border-radius:2px"><span class="advgb-accordion-header-icon"><svg fill="#fff" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24"><path fill="none" d="M0,0h24v24H0V0z"></path><path d="M12,5.83L15.17,9l1.41-1.41L12,3L7.41,7.59L8.83,9L12,5.83z M12,18.17L8.83,15l-1.41,1.41L12,21l4.59-4.59L15.17,15 L12,18.17z"></path></svg></span><h4 class="advgb-accordion-header-title" style="color:inherit">Solution 2: using CSS variables &amp; computed properties</h4></div><div class="advgb-accordion-body" style="border-style:solid !important;border-width:1px !important;border-color:undefined !important;border-top:none !important;border-radius:2px !important">
<p>Declare in a single place the allowed values for the colour enum and its corresponding colours. On my side, I just declared the above object and always take it as a single source of truth in <code>BaseComponent</code>. In other words, this object contains the colour palette indexed by names I use as reference everywhere in the component.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> colorPalette = {
  <span class="hljs-attr">primary</span>: { <span class="hljs-attr">bg</span>: <span class="hljs-string">'#42b983'</span>, <span class="hljs-attr">hoverBg</span>: <span class="hljs-string">'#4cce93'</span>, <span class="hljs-attr">focusBorder</span>: <span class="hljs-string">'#47d696'</span> },
  <span class="hljs-attr">warn</span>: { <span class="hljs-attr">bg</span>: <span class="hljs-string">'#ff5722'</span>, <span class="hljs-attr">hoverBg</span>: <span class="hljs-string">'#ff7043'</span>, <span class="hljs-attr">focusBorder</span>: <span class="hljs-string">'#ff8a65'</span> },
  <span class="hljs-attr">danger</span>: { <span class="hljs-attr">bg</span>: <span class="hljs-string">'#e53935'</span>, <span class="hljs-attr">hoverBg</span>: <span class="hljs-string">'#ef5350'</span>, <span class="hljs-attr">focusBorder</span>: <span class="hljs-string">'#e57373'</span> },
}</code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Then, you need <a href="https://stackoverflow.com/questions/42872002/in-vue-js-component-how-to-use-props-in-css" target="_blank" rel="noreferrer noopener">a way to apply variables to your CSS</a>. In short, this is a conjugaison of <a href="https://v3.vuejs.org/guide/class-and-style.html" target="_blank" rel="noreferrer noopener">style binding</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties" target="_blank" rel="noreferrer noopener">CSS variables</a>, <a href="https://v3.vuejs.org/guide/computed.html" target="_blank" rel="noreferrer noopener">computed properties</a> and scoped styles.</p>
</div></div>
</div>



<p style="margin-top: -0.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 8: color palette and prop for BaseButton »</p>



<h4>Reusable AsyncButton</h4>



<p>Now, let&rsquo;s add <code>AsyncButton</code> built on top of <code>BaseButton</code>. It prevents the user from clicking multiple times on the button while a Promise is in progress. That Promise is returned by the parent&rsquo;s <code>onClick</code> listener.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" width="539" height="124" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/async-button.gif" alt="" class="wp-image-3510"/></figure></div>



<p>Here you have its source code (if you did not install FontAwesome, just replace the <code>&lt;font-awesome-icon /&gt;</code> by a simple text, while preserving the <code>v-if</code> directive.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-8" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">base-button</span>
    <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"isPending"</span>
    <span class="hljs-attr">:color</span>=<span class="hljs-string">"color"</span>
    @<span class="hljs-attr">click.stop.prevent</span>=<span class="hljs-string">"handleClick"</span>
  &gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">font-awesome-icon</span> 
      <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isPending"</span>
      <span class="hljs-attr">:icon</span>=<span class="hljs-string">"['fas', 'circle-notch']"</span>
      <span class="hljs-attr">pulse</span>
    /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">base-button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> BaseButton <span class="hljs-keyword">from</span> <span class="hljs-string">'./BaseButton.vue'</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-attr">name</span>: <span class="hljs-string">'AsyncButton'</span>,
  <span class="hljs-attr">components</span>: { BaseButton },
  <span class="hljs-attr">inheritAttrs</span>: <span class="hljs-literal">false</span>,

  <span class="hljs-attr">props</span>: {
    <span class="hljs-attr">color</span>: {
      <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,
      <span class="hljs-attr">default</span>: <span class="hljs-string">'primary'</span>
    }
  },

  data () {
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">isPending</span>: <span class="hljs-literal">false</span>
    }
  },

  <span class="hljs-attr">methods</span>: {
    handleClick () {
      <span class="hljs-keyword">const</span> originalOnClick = <span class="hljs-comment">/** @type {() =&gt; Promise&lt;void&gt;} */</span> (<span class="hljs-keyword">this</span>.$attrs.onClick)
      <span class="hljs-keyword">this</span>.isPending = <span class="hljs-literal">true</span>
      originalOnClick().finally(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> { <span class="hljs-keyword">this</span>.isPending = <span class="hljs-literal">false</span> })
    }
  }
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-8"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 9</strong>: Add a button to the <code>HomePage</code> that is disabled for 2 seconds each time it is clicked. According to the above code, this just means the <code>@click</code> event listener attached to the instance of <code>AsyncComponent</code> instance returns a Promise that waits for 2 seconds before resolving. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer noopener">You can create such a Promise using its constructor and a setTimeou</a>t. Also, please <a href="https://v3.vuejs.org/guide/events.html#method-event-handlers" target="_blank" rel="noreferrer noopener">write the event handler inside a dedicated method</a> since at is a bit complex.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 9: add AsyncButton »</p>



<p class="exercice"><strong>Exercise 10</strong>. Change the behaviour of the previous button, so its waiting time increases by one second each it is clicked. Because <code>AsyncButton</code> waits for any promise, whatever how long it takes to resolve, you do not need and you should not change it. Instead, keep trace of the number of clicks in the internal state (data) of the <code>HomePage</code> component (<a href="https://v3.vuejs.org/guide/events.html#listening-to-events" target="_blank" rel="noreferrer noopener">see the counter app example</a>) and use it while forging new promises.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 10: slowing down the button on click »</p>



<p class="question"><strong>Question 7</strong>: Analyse how works the <code>AsyncButton</code>. How the child component is aware of the returned Promise by the parent onClick handler? When is executed the callback passed to <code>.finally()</code>? Why use <code>.finally()</code> instead of <code>.then()</code>? Etc.</p>



<p class="question"><strong>Question 8</strong>: Which bug is introduced if <code>inheritAttrs: false</code> is missing or set to <code>true</code> in <code>AsyncButton</code>? Why?</p>



<h4>To continue</h4>



<p>Next time, you will handle Oauth2 authentication against the Microsoft Graph API, fetch the user identity, use it at various locations of the UI and eventually implement some routes. Maybe improved state management will also be useful&#8230;</p>



<p class="has-text-align-center">***</p>



<h4>Appendix: about static type checking</h4>



<p>In the previous tutorial, I introduced you static type checking with straightforward JavaScript and JSDoc. Badly, the <code>tsc</code> command does not handle <code>.vue</code> files. Despite the fact that it is partially working,  it does not worth the vue&rsquo;s typescript integration.</p>



<p>A more robust approach would be moving the whole project to <code>typescript</code>. With the Vue CLI, it is just running <code>vue add typescript</code> at the beginning of the journey. Be sure every change is committed, since this command override some files without warning.</p>



<p>Migrating to TypeScript at the beginning of the tutorial is not a big deal. Most types are already built in the Vue module. Eventually, the whole project is checked on serve and on build.</p>



<p>Since TypeScript may save your time, catch bugs and give you bonus grade to the project, why not giving it a try?</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/">01. Vue: practical activity, part n°1</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Project</title>
		<link>https://thomas-veillard.fr/front-end-web-development/project/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Mon, 23 Aug 2021 17:59:03 +0000</pubDate>
				<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=3194</guid>

					<description><![CDATA[<p>Topic Build a web application to book, rent or buy something of your choice, like: A train ticket office. Using public API, it may find routes between 2 train stations at some date and time. Then, the customer can book required tickets. A product shop. The application displays the catalogue, allows both sorting and filtering &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/project/" class="more-link">Continuer la lecture de <span class="screen-reader-text">Project</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/project/">Project</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Topic</h4>



<p>Build a web application to book, rent or buy something of your choice, like:</p>



<ul><li><strong>A train ticket office</strong>. Using public API, it may find routes between 2 train stations at some date and time. Then, the customer can book required tickets.</li><li><strong>A product shop</strong>. The application displays the catalogue, allows both sorting and filtering by various criteria. Each product has a dedicated presentation. Additionally, the customer may fill a cart and provide its delivery address.</li><li><strong>A clearing booking app</strong>. Allows customers to find available cleaners near their home at some date and time. Then, the customer picks a proposal, fills its address&#8230;</li><li><strong>A VPS builder</strong>. The customer builds its own VPS instance by selecting some amount of RAM, disk, CPU, IO bandwidth, additional volumes&#8230; The final configuration should be valid (ex. disallow too much RAM if not enough v-core, etc.).</li></ul>



<h4>The rules</h4>



<ul><li>Can be done alone or in groups of 2 students.</li><li>Use Vue.js, Angular or React. You are free to use any library you want.</li><li>Use <a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noreferrer noopener">this</a> git workflow model (at least master and develop branches).</li><li>I will check who commits, and when.</li><li>Document installation steps in README.md.</li><li>Produce a short demo video of your application in action.</li><li>Use API over HTTP (a public API, a mock server or your own backend).</li><li>Build various views (pages, modals&#8230;). At least 5 busy pages.</li><li>Setup various routes using vue-router or such a lib (ex. <code>/products/:productId</code>).</li></ul>



<h4>README.md</h4>



<p>I will follow steps in your README to build and run your project. For simple front-end projects, it could be really short: (ex. git clone, npm install&#8230;).</p>



<p>But if you implemented a backend or have special requirements, they must be explicit. If setup is complex, please provide an install script (targeting Ubuntu).</p>



<h4>Delivery (for groups G3, G4 and G5)</h4>



<p>Your git repository is your delivery. Just share read-only access with me if the repository is private (my Github username is <code>TruffeCendree</code>). 2 deliveries are planned:</p>



<ul><li><strong>At least one week before any in-class session</strong>, you can submit your work-in-progress for a ungraduated optional review. The number of projects I can review in a short time is of course limited, so please do not wait the last session.</li><li><strong>On Friday, November 5 at 23h59 </strong>for a final review. Code to be graded must be on your master branch.</li></ul>



<h4>Graduation</h4>



<figure class="wp-block-table is-style-stripes"><table><tbody><tr><td><strong>Criteria</strong></td><td><strong>Points</strong></td></tr><tr><td>Git and workflow</td><td>2 points</td></tr><tr><td>User experience (UX), user interface (UI)<br><em>Graded by reviewing your demonstration video.</em></td><td>5 points</td></tr><tr><td>Code quality, maintenability, bugs&#8230;<br><em>You will receive a detailled code review report.</em></td><td>13 points</td></tr></tbody></table></figure>



<h4>Bonuses</h4>



<p>The following list is not exhaustive. Be free to highlight challenges you overcame in a special section of your README.</p>



<ul><li>Write a fully featured backend (higher bonus if built on node.js). Adding a backend does not reduce my expectation on the frontend part.</li><li>Switch from JavaScript to TypeScript (use strict mode, ban the <code>any</code> type).</li><li>Use high quality JSdoc comments, with <code>tsconfig.json</code> setup to check js all files.</li><li>Host your static website online (ex. Firebase Hosting, render.com, aws S3&#8230;).</li><li>Implement error tracking of hosted site with (ex. Sentry, Rollbar, Stackdriver&#8230;).</li><li>Write automatic specs (unit, e2e&#8230;).</li><li>Send emails with your backend (look at the <a href="https://mailcatcher.me/" target="_blank" rel="noreferrer noopener">mailcatcher</a> to mock the STMP server).</li><li>Generate high quality PDF with putteteer or selenium.</li></ul>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/project/">Project</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>11. JavaScript: practical activity n°2</title>
		<link>https://thomas-veillard.fr/front-end-web-development/languages/javascript-practical-activity-n2/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:47 +0000</pubDate>
				<category><![CDATA[02. Languages]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2958</guid>

					<description><![CDATA[<p>Learning outcomes Manage dependencies with npm (install, check updates, find vulnerabilities&#8230;) ; Run cli optionally shipped with your dependencies with npx ; Split your application into multiple ES modules ; Merge those ES-modules into a single bundle and run it into your browser ; Use modern syntax while targeting older browsers using code transpilation ; &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-practical-activity-n2/" class="more-link">Continuer la lecture de <span class="screen-reader-text">11. JavaScript: practical activity n°2</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-practical-activity-n2/">11. JavaScript: practical activity n°2</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Manage dependencies with npm (install, check updates, find vulnerabilities&#8230;) ;</li><li>Run cli optionally shipped with your dependencies with npx ;</li><li>Split your application into multiple ES modules ;</li><li>Merge those ES-modules into a single bundle and run it into your browser ;</li><li>Use modern syntax while targeting older browsers using code transpilation ;</li><li>Use modern features while targeting older browsers using polyfills ;</li><li>Catch bugs and formatting issues using a linter ;</li><li>Introduce JSDoc comments (generate docs, improve IDE suggestion, catch bugs) ;</li><li>Build your application for production (optimisations, source maps&#8230;).</li></ul>



<h4>Download the source code</h4>



<p>I provide you a simple frontend application that renders a few stock price tables and charts. This small project is a specially crafted as a playground for this tutorial.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-download" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  <a href="https://thomas-veillard.fr/wp-content/uploads/2021/08/basic-rate-graph.zip">Download the learning material (source code)</a>
</div>
</div>



<h4>Run the unbundled sources</h4>



<p>Look at the sources under the <code>src</code> folder. The <code>index.js</code> is the entry point (the only script imported inside <code>index-es6-modules.html</code>). It imports the other files it needs via the <code>import ... from ...</code> statement. Each imported file is called a module.</p>



<p>Any module can import and/or export references. Those references could be variables, functions, classes, symbols, etc. For more information, both about the concept and the syntax, I recommend <a href="https://www.sitepoint.com/understanding-es6-modules/" target="_blank" rel="noreferrer noopener">this post about ES6-modules</a>.</p>



<p class="exercice"><strong>Exercise 1:</strong> Open <code>index-es6-modules.html</code> in your browser from the file browser (using « open with Chrome / Firefox / Edge » contextual menu). What is the error revealed inside the browser console?</p>



<div class="exercice"><p><strong>Excercise 2</strong>: Launch a local HTTP server (seen <a href="https://thomas-veillard.fr/front-end-web-development/languages/8-fast-tour-of-javascript-setup/">in the lecture</a>) and run the application from it. Then, inspect the HTTP traffic and record some statistics:</p><ul style="margin-left: 1em; margin-bottom: 0"><li>How many JS files were loaded ?</li><li>How long does it take on average to load one ES6-module ?</li><li>What is the total completion time to load all JS files ?</li><li>Did the browser load JS files sequentially or in parallel ?</li></ul></div><br>



<p><strong>Tips</strong>: your development tools record traffic network only when opened. You may refresh your tab with development tools opened to capture the whole network activity.</p>



<p class="exercice"><strong>Excercise 3</strong>: Discuss the performance penalty of serving ES6-modules as independent files to the browser. How to mitigate this performance issue?</p>



<h4>Getting familiar with npm features</h4>



<p>npm stands for « Node Package Manager ». This utility is shipped with the node.js installer and is a foundation of modern JavaScript ecosystem.</p>



<p>The primary goal of a package manager is making the installation of dependencies easy. Those dependencies may be libraries, frameworks, command line software, etc.</p>



<ul><li>A library can be imported like any ES6-module in your code.</li><li>A command line software is run from the terminal as a standalone software.</li><li>A framework is generally a set of multiple libraries, cli scripts and guidelines, that comes with strong opinions on how to use it.</li></ul>



<p class="has-text-align-center">***</p>



<p>First of all, npm is tightly coupled to the <code>package.json</code> file, which is both a manifest of the project and a configuration file for npm. Both your project using npm, and any dependency you install this way have it. A sample is included into the historical rates explorer app.</p>



<p>Any <code>package.json</code> contains basic information about the project, such as its <code>name</code>, <code>version</code> (which should follow <a href="https://semver.org/" target="_blank" rel="noreferrer noopener">semantic versioning</a> standard), <code>author</code> and <code>license</code>. Such a basic <code>package.json</code> can be created with the command <code>npm init</code>.</p>



<p>Then, you may specify dependencies (each one is identified with a name and an assertion about accepted versions). Just with that information, npm can pull dependencies from the <a href="https://www.npmjs.com/" target="_blank" rel="noreferrer noopener">public registry</a>.</p>



<p>The <code>package.json</code> of the sample app contains 2 groups of dependencies:</p>



<ul><li>those under the <code>dependencies</code> key, that are used by your code at runtime ;</li><li>those under the <code>devDependencies</code> key, that are part of the developer experience (for building your app, check code quality, execute automated testing, etc.).</li></ul>



<p>Depending on the npm&rsquo;s command you use, you can install each or all groups.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-9" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># Installs all dependencies from package.json (dependencies and devDependencies)</span>
npm install

<span class="hljs-comment"># Installs only production dependencies from package.json (ignores devDependencies)</span>
npm install --prod

<span class="hljs-comment"># Installs a new package (called webpack-cli) and appends it to package.json (inside devDependencies)</span>
npm install webpack-cli --save-dev</code></div><small class="shcb-language" id="shcb-language-9"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Excercise 4</strong>: Install dependencies using the <code>npm install</code> command. Dependencies are locally stored inside the <code>node_modules</code> folder. Why is there far more many modules into <code>node_modules</code> that those declared in <code>package.json</code> ?</p>



<p class="has-text-align-center">***</p>



<p>Because dependencies and versions are listed in a single place and installable through a single command, you can ensure every replica of the installation use consistent dependencies.</p>



<p>Another great benefit is automated tasks and analysis you can run on it:</p>



<ul><li>track updates and install them easily (using <code>npm outdated</code>) ;</li><li>be alerted in case of security advice about one of your dependencies (find the command yourself).</li></ul>



<p class="exercice"><strong>Excercise 5</strong>: The rate history app is potentially vulnerable to a high-level security issue through one of its dependencies. Using npm, find all vulnerable packages and associated version.  In which release those bug have been fixed?</p>



<p><strong>Tips</strong>: Before npm exists, developers frequently used CDN (Content Delivery Network) to include libraries. A CDN hosts a JS script you may include just before your own script (ex. by appending <code>&lt;script src="https://CDN_HOST/jquery.min.js" /&gt;</code> to the HTML source). As a result, the library exposes its functions by populating the global scope. Using CDN generally leads to outdated and inconsistent dependency versions across the project, and finally to security issues and technical dept. The bundler (kind of tool we discuss later) cannot optimise your app. For those and various other reasons, <strong>prefer npm over CDN</strong>.</p>



<p class="has-text-align-center">***</p>



<p>Did you notice the <code>scripts</code> key in my <code>package</code>.json? It points to an object whose keys are user-defined names and values are the bash commands to execute. The value can make reference to cli software installed inside <code>node_modules</code>.</p>



<p>For example, running <code>npm run serve-es6-sources</code> will start a local http server (using the <code>http-server</code> package).</p>



<p>Very common script&rsquo;s names are:</p>



<ul><li><code>build</code>: to produce a distributable bundle, sometime with many transformations ;</li><li><code>watch</code>: mostly the same than <code>build</code>, but efficiently re-emits bundle on change ;</li><li><code>test</code>: to execute a suite of automated tests you wrote yourself.</li></ul>



<p>The <code>build</code> script can target both the production (by generating more optimised bundles) and development (by preferring fastly emitted bundles and easier debugging in the browser). The <code>watch</code> script is intended for development, of course.</p>



<h4>Bundle the sources using webpack</h4>



<p class="exercice"><strong>Excercise 6</strong>: Look at the webpack documentation (both <a href="https://webpack.js.org/" target="_blank" rel="noreferrer noopener">home page</a> and the <a href="https://webpack.js.org/concepts/" target="_blank" rel="noreferrer noopener">concepts</a>). What is its primary purpose and how does it fix our performance issue previously encountered with ES6-modules?</p>



<p class="exercice"><strong>Excercise 7</strong>: The <code>webpack.config.js</code> file is ready to build the aggregated bundle in development mode. The entry point is <code>src/index.js</code>. Bundle should be output at <code>dist/index.js</code>. You can run webpack using <code>npm run build</code>.</p>



<p><strong>Tips</strong>: look at the emitted <code>dist/index.js</code> and be sure to understand what webpack did. Remember to question the teacher when necessary.</p>



<p class="exercice"><strong>Exercise 8</strong>: Open <code>index-bundled.html</code> in your browser (could be from the disc or from HTTP server). Does it actually fix the ES-module fetching performance issue ? Please provide some evidence in your answer.</p>



<p class="exercice"><strong>Excercise 9</strong>: Compare webpack&rsquo;s output in development and in production mode.</p>



<h4>The browser compatibility issue</h4>



<p>The 2 major kinds of compatibility issues are <strong>unsupported syntax</strong> and <strong>missing features</strong>.</p>



<ul><li>Fixing an <strong>unsupported syntax</strong> error imply transforming your code not to use that syntax anymore. For example, you could write classes without the <code>class</code> keyword.</li></ul>


<pre class="wp-block-code" aria-describedby="shcb-language-10" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// ES6 code (using the class keyword)</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{
  <span class="hljs-keyword">constructor</span> (id, firstName, lastName) {
    <span class="hljs-keyword">this</span>.id = id
    <span class="hljs-keyword">this</span>.firstName = firstName
    <span class="hljs-keyword">this</span>.lastName = lastName
  }
  
  getName () {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName.toUpperCase() 
  }
}</code></div><small class="shcb-language" id="shcb-language-10"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>

<pre class="wp-block-code" aria-describedby="shcb-language-11" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// Isofunctional ES5 code (defining the same class without using the `class` keyword)</span>

<span class="hljs-keyword">var</span> User = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">User</span>(<span class="hljs-params">id, firstName, lastName</span>) </span>{
        <span class="hljs-keyword">this</span>.id = id
        <span class="hljs-keyword">this</span>.firstName = firstName
        <span class="hljs-keyword">this</span>.lastName = lastName
    }

    User.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName.toUpperCase()
    }

    <span class="hljs-keyword">return</span> User
}())</code></div><small class="shcb-language" id="shcb-language-11"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>But instead of writing old, verbose, ugly and potentially buggy code, it is common to <strong>transpile</strong> from recent syntax to older one. That the purpose of <a href="https://babeljs.io/" target="_blank" rel="noreferrer noopener">babeljs</a>, which can work as a plugin for webpack. This will be one of your next job 🤗.</p>



<ul><li>Fixing a <strong>missing feature</strong> issue is more complicated depending on your use case. You cannot implement yourself the support of NFC hardware if the browser does not have this feature. But you can implement yourself some utility methods introduced recently.</li></ul>



<p>Let&rsquo;s suppose your code uses the <code>array.includes(item)</code> methods, which returns <code>true</code> if <code>item</code> is in <code>array</code>. This method has been introduced in ES7 (released in 2016).</p>



<p>That method can easily be implemented with a one-liner snippet. Then, you can add it to the Array&rsquo;s prototype and make it callable on any array instance.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-12" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// ⛔️ you CANNOT use [1, 2, 3].includes(2) on old browser</span>

<span class="hljs-built_in">Array</span>.prototype.includes = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">search</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.indexOf(search) !== <span class="hljs-number">-1</span>
}

<span class="hljs-comment">// 🚀 you CAN use [1, 2, 3].includes(2) (if array.indexOf() is supported)</span></code></div><small class="shcb-language" id="shcb-language-12"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Tips</strong>: Extending prototypes is generally a bad practice as it leads to conflicts with someone else&rsquo;s code using the same name. Nevertheless, it is allowed to backport missing standard methods (as long as it strictly behaves the same way). Those backported methods are called <strong>polyfills</strong>. Also, the community shares npm package with ready to import polyfills, like the popular <a href="https://github.com/zloirock/core-js" target="_blank" rel="noreferrer noopener">core-js</a>.</p>



<p class="has-text-align-center">***</p>



<p>For the next questions, you need an obsolete browser. More exactly, we will use Internet Explorer 11. If not available on your system, you can:</p>



<ol><li>run a free IE 11 instance on the cloud with <a href="https://www.browserling.com/" target="_blank" rel="noreferrer noopener">browserling.com</a> ;</li><li>forward your local HTTP server with <a href="https://ngrok.com/" target="_blank" rel="noreferrer noopener">ngrok.com</a>.</li></ol>



<p><strong>Tips</strong>: If you need to set up browserling + ngrok combo before the teacher demonstrated their usage, notify him!</p>



<p class="has-text-align-center">***</p>



<p class="exercice"><strong>Exercise 10</strong>: Try the bundled app with Internet Explorer 11. Why IE does it fail to run the bundled app?</p>



<p class="exercice"><strong>Exercice 11</strong>: The following webpack&rsquo;s configuration sends every <code>.js</code> to <code>babel-loader</code>. Babel transforms any syntax not supported by IE 11. Is it enough to ensure compatibility with IE? Why?</p>


<pre class="wp-block-code" aria-describedby="shcb-language-13" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// updated webpack.config.js that integrates babel to assets pipeline.</span>
<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)

<span class="hljs-built_in">module</span>.exports = {
  <span class="hljs-attr">entry</span>: <span class="hljs-string">'./src/index.js'</span>,
  <span class="hljs-attr">mode</span>: <span class="hljs-string">'development'</span>,
  <span class="hljs-attr">target</span>: [<span class="hljs-string">'web'</span>, <span class="hljs-string">'es5'</span>],
  <span class="hljs-attr">output</span>: {
    <span class="hljs-attr">path</span>: path.resolve(__dirname, <span class="hljs-string">'dist'</span>),
    <span class="hljs-attr">filename</span>: <span class="hljs-string">'index.js'</span>
  },
  <span class="hljs-attr">module</span>: {
    <span class="hljs-attr">rules</span>: [
      {
        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.m?js$/</span>,
        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,
        <span class="hljs-attr">use</span>: {
          <span class="hljs-attr">loader</span>: <span class="hljs-string">'babel-loader'</span>,
          <span class="hljs-attr">options</span>: {
            <span class="hljs-attr">targets</span>: <span class="hljs-string">'ie &gt;= 11'</span>,
            <span class="hljs-attr">presets</span>: [<span class="hljs-string">'@babel/preset-env'</span>]
          }
        }
      }
    ]
  }
}</code></div><small class="shcb-language" id="shcb-language-13"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>You also need in import the babel utilties (transformed code uses them):</p>


<pre class="wp-block-code" aria-describedby="shcb-language-14" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// add this at the beginning of index.js</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'regenerator-runtime/runtime'</span></code></div><small class="shcb-language" id="shcb-language-14"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercice 12</strong>: Import the required polyfills from <a href="https://github.com/zloirock/core-js" target="_blank" rel="noreferrer noopener">core-js</a> and <a href="https://github.com/github/fetch" target="_blank" rel="noreferrer noopener">whatwg-fetch</a> in <code>index.js</code>. Now, the app should work on IE 11.</p>



<p class="exercice"><strong>Exercise 13</strong>: List at least 2 issues of transpiling the code and adding polyfills like we did. Try to mention a mitigation or a solution for each issue.</p>



<h4>Hey! Still alive?</h4>



<p>Congratulations for going so far! Despite there is still a lot uncovered learning outcomes, you have completed the mandatory part. The rest of the topics will be explained by the teacher at the end of the activity.</p>



<p>In case you are ahead of time, feel free to reach yourself the above goals:</p>



<ol><li>Catch some code smells and improved code formatting with <a href="https://standardjs.com/" target="_blank" rel="noreferrer noopener">standard.js</a>.</li><li>Generate documentation using JSDoc.</li><li>Test the quality of autocomplete with vscode, intellisense and JSDoc.</li><li>Catch errors using types described in JSDoc comments with the typescript compiler in JS-compatible mode.</li><li>Improve debugging experience for transformed code with source-maps.</li></ol>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-practical-activity-n2/">11. JavaScript: practical activity n°2</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>10. JavaScript: classes</title>
		<link>https://thomas-veillard.fr/front-end-web-development/languages/javascript-classes/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:46 +0000</pubDate>
				<category><![CDATA[02. Languages]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2849</guid>

					<description><![CDATA[<p>The class keyword was introduced in ES6 (2015 revision of the ESMAScript Standard). It is a syntactical sugar to easily create classes. Despite JavaScript is an Object-Oriented language from the beginning, the old way to declare a class is a bit tricky. That the reason this guide focuses on ES6+. We will discuss the older &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-classes/" class="more-link">Continuer la lecture de <span class="screen-reader-text">10. JavaScript: classes</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-classes/">10. JavaScript: classes</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>The <code>class</code> keyword was introduced in ES6 (2015 revision of the ESMAScript Standard). It is a syntactical sugar to easily create classes.</p>



<p>Despite JavaScript is an <strong>Object-Oriented</strong> language from the beginning, the old way to declare a class is a bit tricky. That the reason this guide focuses on ES6+. We will discuss the older browser compatibility in a future lesson.</p>



<p>As expressed in the <a href="https://thomas-veillard.fr/front-end-web-development/introduction/introduction/">Introduction&rsquo;s Prerequires</a>, I assume you are familiar with the object-oriented paradigm and will focus on the implementation details for JavaScript.</p>



<h4>Class constructor</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-15" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
    <span class="hljs-keyword">constructor</span>(id, startDate, endDate, title) {
        <span class="hljs-keyword">this</span>.id = id
        <span class="hljs-keyword">this</span>.startDate = startDate
        <span class="hljs-keyword">this</span>.endDate = endDate
        <span class="hljs-keyword">this</span>.title = title
    }
}

<span class="hljs-keyword">const</span> start = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T08:00:00'</span>)
<span class="hljs-keyword">const</span> end = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T09:30:00'</span>)
<span class="hljs-keyword">const</span> calendarEvent = <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-number">1</span>, start, end, <span class="hljs-string">'Prepare lessons'</span>)</code></div><small class="shcb-language" id="shcb-language-15"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>The constructor is a special function called <code>constructor</code> inside the class definition. It is unique and optional.</p>



<p>It is called every time a new instance (ex.  <code>calendarEvent</code>) is created via the <code>new</code> operator. Its responsibility is to initialise the instance (ex. here, it sets <code>id</code>, <code>startDate</code>, <code>endDate</code> and <code>title</code> instance properties).</p>



<h4>Instance properties</h4>



<p>In the previous example, a few properties are initialised in the constructor. Those properties are publicly accessible using the same syntax as literal objects.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-16" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> calendarEvent = <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-number">1</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'Prepare lessons'</span>)

<span class="hljs-comment">// assignation to an instance property</span>
calendarEvent.startDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T08:00:00'</span>)

<span class="hljs-comment">// both accesses `startDate` and assigns `endDate`</span>
calendarEvent.endDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(calendarEvent.startDate.getTime() + <span class="hljs-number">1</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>)

<span class="hljs-comment">// dynamically access a property by name</span>
<span class="hljs-keyword">const</span> propertyName = <span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.5</span> ? <span class="hljs-string">'startDate'</span> : <span class="hljs-string">'endDate'</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Event <span class="hljs-subst">${propertyName}</span> is <span class="hljs-subst">${calendarEvent[propertyName].toISOString()}</span>`</span>)</code></div><small class="shcb-language" id="shcb-language-16"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Due to the dynamic nature of JavaScript, the instance&rsquo;s property list is not frozen. You can add or delete any keys at any moment.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-17" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> calendarEvent = <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-number">1</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'Prepare lessons'</span>)

<span class="hljs-comment">// notYetExistingAttribute property is created on demand</span>
calendarEvent.notYetExistingAttribute = <span class="hljs-string">'now, it exists'</span>

<span class="hljs-comment">// non existing attributes are just evaluated as `undefined`</span>
<span class="hljs-built_in">console</span>.log(calendarEvent.stillNotYetExists)

<span class="hljs-comment">// this makes JavaScript prone to typo-errors and may lead to silent bugs</span>
<span class="hljs-built_in">console</span>.log(calendarEvent.tiitle) <span class="hljs-comment">// `undefined`, yes it is...</span>

<span class="hljs-comment">// this delete a key</span>
<span class="hljs-keyword">delete</span> calendarEvent.notYetExistingAttribute</code></div><small class="shcb-language" id="shcb-language-17"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Tips</strong>: typo errors are difficult to detect. If your IDE implements static code analysis (such as Intellisense for VSCode), it may provide powerful autocompletion. That reduces the risk of a typo error at the time of writing the code.</p>



<p><strong>Opinion</strong>: I switched all my projects from JavaScript to <strong>TypeScript</strong> to early catch those bugs. TypeScript is a superset of JavaScript with static type checks and a powerful compiler. The TypeScript ecosystem is a great foundation for writing <strong>maintainable</strong> JavaScript. Of course, learning curse from JavaScript to TypeScript is smooth. 🎉 Also, I grant bonus points for students using it. 🎉</p>



<h4>Instance methods</h4>



<p>Methods are functions declared inside the class and are executed in the context of an instance. The instance on which the method is currently called is referenced as <code>this</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-18" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
    <span class="hljs-keyword">constructor</span>(id, startDate, endDate, title) {
        <span class="hljs-keyword">this</span>.id = id
        <span class="hljs-keyword">this</span>.startDate = startDate
        <span class="hljs-keyword">this</span>.endDate = endDate
        <span class="hljs-keyword">this</span>.title = title
    }

    getDuration(unit) {
        <span class="hljs-keyword">const</span> durationMs = <span class="hljs-keyword">this</span>.endDate.getTime() - <span class="hljs-keyword">this</span>.startDate.getTime()

        <span class="hljs-keyword">switch</span> (unit) {
            <span class="hljs-keyword">case</span> <span class="hljs-string">'ms'</span>: <span class="hljs-keyword">return</span> durationMs
            <span class="hljs-keyword">case</span> <span class="hljs-string">'s'</span>: <span class="hljs-keyword">return</span> durationMs / <span class="hljs-number">1000</span>
            <span class="hljs-keyword">case</span> <span class="hljs-string">'min'</span>: <span class="hljs-keyword">return</span> durationMs / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>
            <span class="hljs-keyword">case</span> <span class="hljs-string">'h'</span>: <span class="hljs-keyword">return</span> durationMs / <span class="hljs-number">1000</span> / <span class="hljs-number">3600</span>
            <span class="hljs-attr">default</span>: <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`Unsupported unit <span class="hljs-subst">${unit}</span>`</span>)
        }
    }
}

<span class="hljs-keyword">const</span> start = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T08:00:00'</span>)
<span class="hljs-keyword">const</span> end = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T09:30:00'</span>)
<span class="hljs-keyword">const</span> calendarEvent = <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-number">1</span>, start, end, <span class="hljs-string">'Prepare lessons'</span>)
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Event's duration in hours:"</span>, calendarEvent.getDuration(<span class="hljs-string">'h'</span>))</code></div><small class="shcb-language" id="shcb-language-18"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Static properties</h4>



<p>An instance property is accessible on the instance itself. At the opposite, a class property is accessible from the class.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-19" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// accesses the instance attribute</span>
<span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-comment">/* ... */</span>).instanceAttribute

<span class="hljs-comment">// accesses the class attribute</span>
CalendarEvent.classAttribute</code></div><small class="shcb-language" id="shcb-language-19"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Tips: </strong>I recommend to initialise class attributes immediately after the class definition.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-20" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{ <span class="hljs-comment">/* */</span> }
CalendarEvent.lastGeneratedId = <span class="hljs-number">0</span></code></div><small class="shcb-language" id="shcb-language-20"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Despite the fact that functions are accessible and callable before the declaration, class declaration must be run before being referenced anywhere.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-21" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// Throws Uncaught ReferenceError: CalendarEvent is not defined</span>
CalendarEvent.lastGeneratedId = <span class="hljs-number">0</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{ <span class="hljs-comment">/* */</span> }</code></div><small class="shcb-language" id="shcb-language-21"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Static methods</h4>



<p>Static methods are called against the class instead an instance. They are declared with the <code>static</code> modifier.</p>



<p>Inside the static method&rsquo;s body, the current class is referenced as <code>this</code>. Use it to call another static method from that class or even the constructor.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-22" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-keyword">constructor</span> (id, startDate, endDate, title) {
    <span class="hljs-keyword">this</span>.id = id
    <span class="hljs-keyword">this</span>.startDate = startDate
    <span class="hljs-keyword">this</span>.endDate = endDate
    <span class="hljs-keyword">this</span>.title = title
  }

  <span class="hljs-comment">/**
   * Parses the ical VEVENT definition and returns a new instance.
   * For now, it returns a mock CalendarEvent instance for demonstration purpose.
   */</span>
  <span class="hljs-keyword">static</span> fromIcalEvent (ical) {
    <span class="hljs-comment">// In the context of a static method, `this` references the class itself.</span>
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span> === CalendarEvent) <span class="hljs-comment">// true</span>

    <span class="hljs-comment">// `this` can be used as constructor here</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">this</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)
  }
}

<span class="hljs-keyword">const</span> icalText = <span class="hljs-string">`
BEGIN:VEVENT
DTSTAMP:19960704T120000Z
UID:uid1@example.com
ORGANIZER:mailto:jsmith@example.com
DTSTART:19960918T143000Z
DTEND:19960920T220000Z
STATUS:CONFIRMED
SUMMARY:Prepare teaching
DESCRIPTION:Write lessons and publish them online.
END:VEVENT
`</span>.trim()

<span class="hljs-keyword">const</span> calendarEvent = CalendarEvent.fromIcalEvent(icalText)</code></div><small class="shcb-language" id="shcb-language-22"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Side note:</strong> in JavaScript, a static method is like a static attribute of type &lsquo;function&rsquo;. Even the <code>this</code> behaviour is the same.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-23" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// alternative way to declare a static method</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{ <span class="hljs-comment">/** **/</span> }
CalendarEvent.fromIcalEvent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ical</span>) </span>{
  <span class="hljs-comment">// In the context of a static method, `this` references the class itself.</span>
  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span> === CalendarEvent) <span class="hljs-comment">// true</span>

  <span class="hljs-comment">// `this` can be used as constructor here</span>
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">this</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)
}

<span class="hljs-built_in">console</span>.log(CalendarEvent.fromIcalEvent(<span class="hljs-string">''</span>))</code></div><small class="shcb-language" id="shcb-language-23"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Inheritance</h4>



<p>Let&rsquo;s build a special kind of <code>CalendarEvent</code> I will call <code>TeachingEvent</code>. This one will represent a teaching lesson with a potential graduation and additional teaching resources (ex. lecture slides).</p>


<pre class="wp-block-code" aria-describedby="shcb-language-24" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-keyword">constructor</span> (id, startDate, endDate, title) {
    <span class="hljs-keyword">this</span>.id = id
    <span class="hljs-keyword">this</span>.startDate = startDate
    <span class="hljs-keyword">this</span>.endDate = endDate
    <span class="hljs-keyword">this</span>.title = title
  }

  <span class="hljs-keyword">static</span> fromIcalEvent (ical) {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> <span class="hljs-comment">// body cleared in example for readability</span>
  }

  getDurationInHours () {
    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.endDate.getTime() - <span class="hljs-keyword">this</span>.startDate.getTime()) / <span class="hljs-number">1000</span> / <span class="hljs-number">3600</span>
  }
}

<span class="hljs-comment">/**
* TeachingEvent represents a teaching lesson.
* It extends CalendarEvent (has a id, startDate, endDate and title).
* In addition, it may be graduated (hasAssessment = true) or not (hasAssessment = false).
* Additional resources may be available online on Moodle (moddleUrl = 'https://.../').
*/</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeachingEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-keyword">constructor</span> (id, startDate, endDate, title, hasAssessment, moodleUrl) {
    <span class="hljs-comment">// call the parent constructor. super() call must be the first instruction.</span>
    <span class="hljs-keyword">super</span>(id, startDate, endDate, title)

    <span class="hljs-comment">// assigns the new attributes not handled in parent class</span>
    <span class="hljs-keyword">this</span>.hasAssessment = hasAssessment
    <span class="hljs-keyword">this</span>.moodleUrl = moodleUrl
  }
}</code></div><small class="shcb-language" id="shcb-language-24"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Let&rsquo;s analyse the previous code snippet:</p>



<ul><li>You just need the <code>extends</code> keyword inside child class declaration.</li><li>Parent&rsquo;s constructor and methods are available through the <code>super</code> keyword.</li><li>The child constructor must pass arguments to the parent one (too verbose ?).</li></ul>



<p>Now, let&rsquo;s see what has been inherited:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-25" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> start = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T08:00:00'</span>)
<span class="hljs-keyword">const</span> end = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T09:30:00'</span>)
<span class="hljs-keyword">const</span> teachingEvent = <span class="hljs-keyword">new</span> TeachingEvent(<span class="hljs-number">1</span>, start, end, <span class="hljs-string">'How JS classes works'</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>)

<span class="hljs-comment">// instance properties are inherited</span>
<span class="hljs-built_in">console</span>.log(teachingEvent.id)

<span class="hljs-comment">// instance methods are inherited</span>
<span class="hljs-built_in">console</span>.log(teachingEvent.getDurationInHours())

<span class="hljs-comment">// static methods are inherited as well.</span>
<span class="hljs-comment">// `this` in method's body references the class used to invoke it.</span>
TeachingEvent.fromIcalEvent(<span class="hljs-string">''</span>) <span class="hljs-comment">// outputs TeachingEvent</span>
CalendarEvent.fromIcalEvent(<span class="hljs-string">''</span>) <span class="hljs-comment">// outputs CalendarEvent</span></code></div><small class="shcb-language" id="shcb-language-25"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Tips: </strong> constructors with a lot of arguments may become difficult to invoke or extend. You run at risk of missing a parameter, confusing the order, etc. In such cases, literal objects and object destructuring are profitable. That is particalry true if many properties are nullable, optional or with default values.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-26" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-keyword">constructor</span> ({ id, startDate, endDate, title }) {
    <span class="hljs-keyword">this</span>.id = id
    <span class="hljs-keyword">this</span>.startDate = startDate
    <span class="hljs-keyword">this</span>.endDate = endDate
    <span class="hljs-keyword">this</span>.title = title || <span class="hljs-literal">null</span>
  }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeachingEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-keyword">constructor</span> (params) {
    <span class="hljs-keyword">super</span>(params)
    <span class="hljs-keyword">this</span>.hasAssessment = params.hasAssessment ?? <span class="hljs-literal">false</span>
    <span class="hljs-keyword">this</span>.moodleUrl = params.moodleUrl || <span class="hljs-literal">null</span>
  }
}

<span class="hljs-keyword">const</span> startDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T08:00:00'</span>)
<span class="hljs-keyword">const</span> endDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T09:30:00'</span>)

<span class="hljs-comment">// title, hasAssessment, moodleUrl have default values, so may be omitted.</span>
<span class="hljs-comment">// Properties are well named, so there is no risk of ordering issues.</span>
<span class="hljs-comment">// Later, it is simpler to drop or add a parameter to the constructor.</span>
<span class="hljs-keyword">const</span> teachingEvent = <span class="hljs-keyword">new</span> TeachingEvent({ <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, startDate, endDate })</code></div><small class="shcb-language" id="shcb-language-26"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Ascessors (getters &amp; setters)</h4>



<h5>Please, do not write Java-style ascessors 🙏</h5>



<p>The previous year, some students systematically added <code>getX</code> and <code>setX</code> methods to every class they built. It may make sense in other languages, such as Java, but not in JavaScript. Getters and setters are defined another way&#8230;</p>


<pre class="wp-block-code" aria-describedby="shcb-language-27" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// DON'T: those are Java-style ascessors</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-comment">/** ... */</span>

  getId () {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.id
  }

  setId (id) {
    <span class="hljs-keyword">this</span>.id = id
  }

  getStartDate () {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.startDate
  }

  setStateDate (startDate) {
    <span class="hljs-keyword">this</span>.startDate = startDate
  }
}</code></div><small class="shcb-language" id="shcb-language-27"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Now, let&rsquo;s see why this is not adapted to JavaScript:</p>



<ol><li>JavaScript has a special syntax for writing assessors.</li><li>Outside the class, those assessors looks like normal properties. So, you can replace a property by a read-only getter without syntaxically break the code.</li><li>It unnecessary makes your code more verbose, which imply performance issues. Remember you code should be downloaded and executed by the browser everytime a page is loaded.</li><li>(<em>This assertion will become obselete in future version of JS</em>). Until very recently, there were no concept of <code>private</code> properties. So, the caller was always able to access and mutate the underlying attributes, making the class-encapsulation principal hardly applicable.</li></ol>



<h5>Ascessors example in JavaScript</h5>



<p>Using ascessors, I changed the <code>CalendarEvent</code> class, so:</p>



<ul><li>The property <code>id</code> is initialised in the constructor and is publicly readable but not writable. </li><li>A virtual <code>duration</code> property is both publicly writable and writable. In fact, the getter computes duration in milliseconds as <code>endDate</code> &#8211; <code>startDate</code>. The setter mutates <code>endDate</code>.</li></ul>


<pre class="wp-block-code" aria-describedby="shcb-language-28" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalendarEvent</span> </span>{
  <span class="hljs-keyword">constructor</span> ({ id, startDate, endDate }) {
    <span class="hljs-comment">// By convention, JS developers know fields with '_' are internal.</span>
    <span class="hljs-comment">// Starting from ES2021, using a '#' as prefix will really make it private.</span>
    <span class="hljs-comment">// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields</span>
    <span class="hljs-keyword">this</span>._id = id
    <span class="hljs-keyword">this</span>.startDate = startDate
    <span class="hljs-keyword">this</span>.endDate = endDate
  }

  <span class="hljs-keyword">get</span> id () {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>._id
  }

  <span class="hljs-comment">/**
   * Without a setter, calling `calendarEvent.id = 1`  does nothing:
   * - no change to the instance's properties;
   * - no warning or error emitted.
   * 
   * Not that a getter can be defined without the corresponding setter, and vis-versa.
   */</span>
  <span class="hljs-keyword">set</span> id (_) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Cannot set id for CalendarEvent'</span>)
  }

  <span class="hljs-keyword">get</span> duration () {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.endDate.getTime() - <span class="hljs-keyword">this</span>.startDate.getTime()
  }

  <span class="hljs-keyword">set</span> duration (duration) {
    <span class="hljs-keyword">this</span>.endDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-keyword">this</span>.startDate.getTime() + duration)
  }
}</code></div><small class="shcb-language" id="shcb-language-28"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Then, you can use <code>id</code> and <code>duration</code> virtual attributes with a convenient syntax.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-29" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> startDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T08:00:00'</span>)
<span class="hljs-keyword">const</span> endDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2021-07-31T09:30:00'</span>)
<span class="hljs-keyword">const</span> calendarEvent = <span class="hljs-keyword">new</span> CalendarEvent({ <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, startDate, endDate })

<span class="hljs-built_in">console</span>.log(calendarEvent.id) <span class="hljs-comment">// prints 1</span>
calendarEvent.id = <span class="hljs-number">2</span> <span class="hljs-comment">// throws "Cannot set id for CalendarEvent"</span>

<span class="hljs-built_in">console</span>.log(calendarEvent.duration) <span class="hljs-comment">// prints 5400000 ms (1.5h * 3600 s/h * 1000ms/s)</span>
calendarEvent.duration -= <span class="hljs-number">30</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> <span class="hljs-comment">// substract 30 minutes to duration.</span>
<span class="hljs-built_in">console</span>.log(calendarEvent.endDate) <span class="hljs-comment">// prints '2021-07-31T09:00:00'</span>

calendarEvent._id = <span class="hljs-number">2</span> <span class="hljs-comment">// still possible, but a JS developer knows it is ugly</span></code></div><small class="shcb-language" id="shcb-language-29"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Bonus: any function is also a class&#8230;</h4>



<p>For your personal information, classes were added to the language in 2015 (revision ES6, aka ES2015). But JavaScript is an Object-Oriented language from the beginning&#8230; That is strange, isn&rsquo;t it ?</p>



<p>Without going deeply into that topic, just look at the following example:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-30" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// My function name starts with a capital letter only</span>
<span class="hljs-comment">// because it is semantically a class. More exactly,</span>
<span class="hljs-comment">// it is the constructor of the class.</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CalendarEvent</span> (<span class="hljs-params">id</span>) </span>{
  <span class="hljs-keyword">this</span>.id = id
}

<span class="hljs-keyword">const</span> calendarEvent = <span class="hljs-keyword">new</span> CalendarEvent(<span class="hljs-number">1</span>)
<span class="hljs-built_in">console</span>.log(calendarEvent.id) <span class="hljs-comment">// prints 1</span></code></div><small class="shcb-language" id="shcb-language-30"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>For the rest, please refer yourself to that post: <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes" target="_blank" rel="noreferrer noopener">JS, a prototype-based language?</a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-classes/">10. JavaScript: classes</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>09. JavaScript: practical activity n°1</title>
		<link>https://thomas-veillard.fr/front-end-web-development/languages/javascript-practical-activity-n1/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:45 +0000</pubDate>
				<category><![CDATA[02. Languages]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2775</guid>

					<description><![CDATA[<p>Learning outcomes Work with functions (variable arguments count, default parameters&#8230;) ; Build higher-order functions and look at the array&#8217;s standard methods ; Write code without side effect (ex. not mutating the input or global state) ; Introduce functional programming paradigm ; Create and manipulate literal objects ; Chrome DevTools demonstration (debugger, network tracing&#8230;). Exercise 1. &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-practical-activity-n1/" class="more-link">Continuer la lecture de <span class="screen-reader-text">09. JavaScript: practical activity n°1</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-practical-activity-n1/">09. JavaScript: practical activity n°1</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Work with functions (variable arguments count, default parameters&#8230;) ;</li><li>Build higher-order functions and look at the array&rsquo;s standard methods ;</li><li>Write code without side effect (ex. not mutating the input or global state) ;</li><li>Introduce functional programming paradigm ;</li><li>Create and manipulate literal objects ;</li><li>Chrome DevTools demonstration (debugger, network tracing&#8230;).</li></ul>



<h4>Exercise 1. Implement sum(&#8230;terms)</h4>



<p>Implement a <code>sum</code> function that accepts any count of numerical arguments and returns the sum. It raises a custom error in the absence of any argument.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-31" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-built_in">console</span>.log(sum()) <span class="hljs-comment">// throws Error('At least one number is expected')</span>
<span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>)) <span class="hljs-comment">// prints 1</span>
<span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">// prints 6</span></code></div><small class="shcb-language" id="shcb-language-31"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Exercise 2. Implement filter(array, predicate)</h4>



<p>Implement a <code>filter(array, predicate)</code> function that returns a new array only containing items from <code>array</code> for which <code>predicate(item)</code> is truthy. The original <code>array</code> should not be mutated (no side effect allowed).</p>


<pre class="wp-block-code" aria-describedby="shcb-language-32" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]
<span class="hljs-keyword">const</span> filteredArray = filter(array, item =&gt; item &gt; <span class="hljs-number">2</span>) <span class="hljs-comment">// [3, 4 5]</span></code></div><small class="shcb-language" id="shcb-language-32"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>After you implemented it, take a look to the native <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noreferrer noopener">Array.filter</a>.</p>



<h4>Excercise 3. Implement map(array, transform)</h4>



<p>Implement a <code>map(array, transform)</code> function that returns a new array with each <code>item</code> from <code>array</code> replaced by <code>transform(item)</code>. The original <code>array</code> should not be mutated (no side effect allowed).</p>


<pre class="wp-block-code" aria-describedby="shcb-language-33" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]
<span class="hljs-keyword">const</span> doubled = map(array, item =&gt; item * <span class="hljs-number">2</span>) <span class="hljs-comment">// [2, 4, 6, 8, 10]</span></code></div><small class="shcb-language" id="shcb-language-33"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>After you implemented it, take a look to the native <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noreferrer noopener">Array.map</a>.</p>



<h4>Excercise 4. Basic CSV parsing into literal objects</h4>



<p>I share with you a simplified CSV dump of Apache contributors (<a href="http://flossdata.syr.edu/data/apache/2016/2016-May/" target="_blank" rel="noreferrer noopener">original source</a>). Because of the size of the file, you cannot simply inline it into your JavaScript code. Instead, I provide you a snippet that pulls the file from my website.</p>



<p>From your perspective, the entry point is the <code>processData</code> function.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-34" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// This code downloads a CSV file from my website, reads it as text</span>
<span class="hljs-comment">// and calls `processData(csvText)` on success. Do not worry about</span>
<span class="hljs-comment">// the details about `fetch` for now, as we will cover them later.</span>
fetch(<span class="hljs-string">'https://thomas-veillard.fr/wp-content/uploads/2021/07/apache-contributors-projects.csv'</span>)
  .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.text())
  .then(processData)
  .catch(<span class="hljs-built_in">console</span>.log)

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processData</span> (<span class="hljs-params">csvText</span>) </span>{
  <span class="hljs-comment">// write your code here</span>
}</code></div><small class="shcb-language" id="shcb-language-34"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>For this question, parse <code>csvText</code> as an array of literal objects. Each object represents a contribution from someone to an Apache project. Therefore, each object should have the following properties:</p>



<ul><li><strong>username</strong> of the contributor, originally called <code>svn_id</code> in the CSV ;</li><li><strong>realName</strong> of the contributor, originally called <code>real_name</code> in the CSV ;</li><li><strong>website</strong> of the contributor, which should be <code>null</code> if empty in CSV ;</li><li><strong>projectName</strong>, originally called <code>project_name</code> in the CSV ;</li></ul>



<p>You must provide 2 implementations of the parsing function:</p>



<ol><li><strong>Imperative-style programming</strong>: you can use variables (<code>let</code>, <code>var</code>&#8230;) and <code>control flows</code> such (<code>white</code>, <code>for</code>, <code>if</code>&#8230;).</li><li><strong>Functional-style programming</strong>: you can only use constants (no <code>let</code> or <code>var</code>) and are not allowed to mutate anything (ex <code>array[0] = 0</code> is prohibited). Methods such as <code>Array.map</code> are strongly encouraged.</li></ol>



<h4>Excercise 5. Computes stats about contributions</h4>



<p>Compute and output to console the following metrics. Use of the functional programming paradigm is encouraged.</p>



<ol><li><strong>The first project&rsquo;s name in ascending alphabetic order</strong>. Ensure you compare in a case-insensitive manner and handle diacritics correctly.</li><li><strong>The number of unique contributors</strong>. Unicity may be implemented with <code>array.filter()</code>.</li><li><strong>The average length of contributors&rsquo; name</strong>. Of course, you have to work on unique names. Remember the DRY principal.</li><li><strong>The most active contributor&rsquo;s name</strong> (by number of projects). This is like grouping contribution by contributors&rsquo; name, sorting by contribution count and eventually taking the first&#8230;</li><li><strong>TOP 10 of the most contributed projects</strong>. There is again a groupby under the hook. Let&rsquo;s DRY!</li></ol>



<p><strong>Tips</strong>: There is not any built-in functions on <code>Array</code> to easily take unique values or grouping by criterion. For such processing, I recommend writing helper functions.</p>



<p><strong>Tips</strong>: Try not to repeat yourself (DRY principal).  Some intermediate computations for a metric could be reused for another one. Also, some logic patterns may be factorised as functions (cf. previous tips).</p>



<h4>Bonus: test your code yourself</h4>



<p>It is common to write specs (automatic tests) while producing your code, like I did. I share them, so you can test your own implementations. The test runner is mocha, so it runs your code with node.</p>



<p><strong>Tips</strong>: of course, you need to adapt my tests, so they call your own code. This mainly depends on your code structure&#8230; </p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-download" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  <a href="https://thomas-veillard.fr/wp-content/uploads/2021/09/tp-1-mocha-specs.zip">Download mocha specs (source code)</a>
</div>
</div>



<figure class="wp-block-image size-large"><img loading="lazy" width="718" height="710" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/spec-tp1-output.png" alt="" class="wp-image-3687" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/09/spec-tp1-output.png 718w, https://thomas-veillard.fr/wp-content/uploads/2021/09/spec-tp1-output-300x297.png 300w" sizes="(max-width: 718px) 100vw, 718px" /><figcaption>Expected output when all tests are green.</figcaption></figure>



<h4>Bonus tips</h4>



<p>The previous exercise promoted the writing of helpers like <code>uniq()</code> or <code>groupBy()</code>. Popular libraries such as <a href="https://lodash.com/" target="_blank" rel="noreferrer noopener">lodash</a> implement them already. </p>



<p>Before using them in your frontend projects, think about the weight penalty. At the time of writing, minified size of lodash is about 72kB (to distribute over the network and to execute each time the JS runs in the browser). </p>



<p>In a general manner, lodash&rsquo;s functions cover edge cases that you will probably never meet in your project (which implies extra code). Also, some of them are now obsolete for the latest version of JavaScript.</p>



<p>If the topic interests you, there is <a href="https://youmightnotneed.com/lodash/" target="_blank" rel="noreferrer noopener">good literature</a>.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-practical-activity-n1/">09. JavaScript: practical activity n°1</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>08. JavaScript: higher order functions</title>
		<link>https://thomas-veillard.fr/front-end-web-development/languages/avascript-higher-order-functions/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:44 +0000</pubDate>
				<category><![CDATA[02. Languages]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2726</guid>

					<description><![CDATA[<p>In the previous post, you noticed we can keep track of a function&#8217;s reference inside a variable: Whatever is the way you defined your function, it is always an instance of the Function class. So, functions are objects instances. They can be assigned to variables, passed as arguments, returned as values, mutated&#8230; Higher Order Function &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/languages/avascript-higher-order-functions/" class="more-link">Continuer la lecture de <span class="screen-reader-text">08. JavaScript: higher order functions</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/avascript-higher-order-functions/">08. JavaScript: higher order functions</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>In the previous post, you noticed we can keep track of a function&rsquo;s reference inside a variable:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-35" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// anonymous function assigned to a constant</span>
<span class="hljs-keyword">const</span> sum = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>{ <span class="hljs-keyword">return</span> a + b }

<span class="hljs-comment">// arrow function assigned to a constant</span>
<span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> { <span class="hljs-keyword">return</span> a + b }

<span class="hljs-comment">// arrow function assigned to a constant, with implicit return</span>
<span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b

<span class="hljs-comment">// using the 'Function' constructor</span>
<span class="hljs-keyword">const</span> sum = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'return a + b'</span>)</code></div><small class="shcb-language" id="shcb-language-35"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Whatever is the way you defined your function, it is always an instance of the <code>Function</code> class. So, functions are objects instances. They can be assigned to variables, passed as arguments, returned as values, mutated&#8230;</p>


<pre class="wp-block-code" aria-describedby="shcb-language-36" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span> (<span class="hljs-params">a, b</span>) </span>{ <span class="hljs-keyword">return</span> a + b }

<span class="hljs-comment">// every function is an instance of the Function class</span>
<span class="hljs-built_in">console</span>.log(sum <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Function</span>)

<span class="hljs-comment">// however, typeof returns 'function' instead of 'object'</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> sum)

<span class="hljs-comment">// you can assign function's reference to another variable</span>
<span class="hljs-keyword">const</span> newReference = sum
<span class="hljs-built_in">console</span>.log(newReference === sum) <span class="hljs-comment">// prints true because same reference</span>

<span class="hljs-comment">// you can call it the same way as the original `sum`</span>
<span class="hljs-built_in">console</span>.log(newReference(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));

<span class="hljs-comment">// you can pass a function as a parameter (without executing it)</span>
<span class="hljs-built_in">console</span>.log(newReference)

<span class="hljs-comment">// const, let, and var properties are, of course, still relevant.</span>
newReference = <span class="hljs-string">'test'</span> <span class="hljs-comment">// TypeError: Assignment to constant variable.</span>

<span class="hljs-comment">// like for any object instance, you can dynamically add properties</span>
newReference.someAttribute = <span class="hljs-literal">true</span>

<span class="hljs-comment">// both `newReference` and `sum` reference the same object</span>
<span class="hljs-built_in">console</span>.log(sum.someAttribute) <span class="hljs-comment">// prints true</span></code></div><small class="shcb-language" id="shcb-language-36"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Higher Order Function</h4>



<p>A <strong>Higher Order Function</strong> is a function accepting another function as an argument or returning it as a value. In contrast, any other function is simply called <strong>Single Order Function</strong>.</p>



<p>As you saw in previous examples, manipulating functions as references in dead simple in JavaScript. Developers heavily take advantage of this.</p>



<p>2 commons use cases are <strong>callbacks</strong> and <strong>customisers</strong> (probably not the official term if any official term exists).</p>



<ul><li><strong>Callbacks</strong> are functions to be called once an event occurs.</li></ul>



<p>For example, you can register a function called when the user clicks on a button.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-37" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> button = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'myButton'</span>)

button.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'My button has been clicked 🎉'</span>)
})</code></div><small class="shcb-language" id="shcb-language-37"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<ul><li><strong>Customisers</strong> sightly change the behaviour of generic algorithms.</li></ul>



<p>For example, someone may write a highly optimised sorting function without worrying about how to compare sorted items. Then, the caller just needs to provide a comparator, which would be a function saying if <code>a</code> should be before <code>b</code>.</p>



<p>If <code>compareFunction(a, b)</code> returns a value > than 0, sort <code>b</code> before <code>a</code>.<br>If <code>compareFunction(a, b)</code> returns a value ≤ 0, leave <code>a</code> and <code>b</code> in the same order.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-38" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>]

<span class="hljs-comment">// sorts in numerically ascending order (0, 1, 4, 5)</span>
array.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compareFunction</span> (<span class="hljs-params">a, b</span>) </span>{
  <span class="hljs-keyword">return</span> a - b
})

<span class="hljs-comment">// sorts in numerically descending order (5, 4, 1, 0)</span>
array.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a)</code></div><small class="shcb-language" id="shcb-language-38"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Closures</h4>



<p>Closures makes variables from upper contexts availables into nested functions.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-39" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@returns </span>a function incrementing its input by `incrementStep`
 */</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildIncrementer</span> (<span class="hljs-params">incrementStep</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>{
    <span class="hljs-comment">// `value` is reachable because it is the argument of current function.</span>
    <span class="hljs-comment">// `incrementStep` from parent function is reachable thanks to the closure?</span>
    <span class="hljs-keyword">return</span> value + incrementStep
  }
}

<span class="hljs-keyword">const</span> inc1 = buildIncrementer(<span class="hljs-number">1</span>)
<span class="hljs-keyword">const</span> inc2 = buildIncrementer(<span class="hljs-number">2</span>)

<span class="hljs-built_in">console</span>.log(inc1(<span class="hljs-number">10</span>)) <span class="hljs-comment">// prints 11</span>
<span class="hljs-built_in">console</span>.log(inc2(<span class="hljs-number">10</span>)) <span class="hljs-comment">// prints 12</span>
<span class="hljs-built_in">console</span>.log(inc2(inc1(<span class="hljs-number">10</span>))) <span class="hljs-comment">// prints 13</span></code></div><small class="shcb-language" id="shcb-language-39"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/avascript-higher-order-functions/">08. JavaScript: higher order functions</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>07. JavaScript: function basis</title>
		<link>https://thomas-veillard.fr/front-end-web-development/languages/javascript-function-basis/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:43 +0000</pubDate>
				<category><![CDATA[02. Languages]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2643</guid>

					<description><![CDATA[<p>Various ways to declare a function Consider a simple function that accepts two terms and sum them. Depending on your use case, you have various syntax available. For each of the previous declarations, you can call sum(1, 2) that returns 3. However, their behaviours sightly differ as we will see later. Function parameters Let&#8217;s analyse &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-function-basis/" class="more-link">Continuer la lecture de <span class="screen-reader-text">07. JavaScript: function basis</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-function-basis/">07. JavaScript: function basis</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Various ways to declare a function</h4>



<p>Consider a simple <code>function</code> that accepts  two terms and sum them. Depending on your use case, you have various syntax available.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-40" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// named function</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span> (<span class="hljs-params">a, b</span>) </span>{ <span class="hljs-keyword">return</span> a + b }

<span class="hljs-comment">// anonymous function assigned to a constant</span>
<span class="hljs-keyword">const</span> sum = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>{ <span class="hljs-keyword">return</span> a + b }

<span class="hljs-comment">// arrow function assigned to a constant</span>
<span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> { <span class="hljs-keyword">return</span> a + b }

<span class="hljs-comment">// arrow function assigned to a constant, with implicit return</span>
<span class="hljs-keyword">const</span> sum = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b

<span class="hljs-comment">// using the 'Function' constructor</span>
<span class="hljs-keyword">const</span> sum = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'return a + b'</span>)</code></div><small class="shcb-language" id="shcb-language-40"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>For each of the previous declarations, you can call <code>sum(1, 2)</code> that returns <code>3</code>. However, their behaviours sightly differ as we will see later.</p>



<h4>Function parameters</h4>



<p>Let&rsquo;s analyse the following named function declaration:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-41" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatPrice</span> (<span class="hljs-params">amount, opts = {}</span>) </span>{
 opts.symbol ||= <span class="hljs-string">'€'</span>
 opts.precision ??= <span class="hljs-number">2</span>
 <span class="hljs-keyword">return</span> amount.toFixed(opts.precision) + <span class="hljs-string">' '</span> + opts.symbol
}</code></div><small class="shcb-language" id="shcb-language-41"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>2 named arguments are declared in the parameter list: <code>amount</code> and <code>opts</code>.</p>



<p>In JavaScript, the declared parameters does not have to match those passed at runtime. In other words, those examples do not throw a syntax error:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-42" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript">formatPrice()
formatPrice(<span class="hljs-number">10</span>)
formatPrice(<span class="hljs-number">10</span>, {})
formatPrice(<span class="hljs-number">10</span>, {}, <span class="hljs-string">'not declared'</span>)</code></div><small class="shcb-language" id="shcb-language-42"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>When a parameter is missing, it fallbacks in priority to:</p>



<ul><li>its default value if provided in function declaration (<code>{}</code> in the case of <code>opts</code>).</li><li><code>undefined</code> in last resort (that is the case of <code>amount</code>).</li></ul>



<h5>The <code>arguments</code> variable</h5>



<p>In addition, the runtime parameter list is available inside the function&rsquo;s body as the array-like <code>arguments</code> variable.</p>



<figure class="wp-block-table is-style-stripes small-table"><table><thead><tr><th>Function call</th><th>amount</th><th>opts</th><th>arguments</th></tr></thead><tbody><tr><td><code>formatPrice()</code></td><td><code>undefined</code> *</td><td><code>{}</code></td><td><code>[]</code></td></tr><tr><td><code>formatPrice(10)</code></td><td><code>10</code></td><td><code>{}</code></td><td><code>[10]</code></td></tr><tr><td><code>formatPrice(10, { symbol: '$' })</code></td><td><code>10</code></td><td><code>{symbol: '$'}</code></td><td><code>[10, {symbol: '$'}]</code></td></tr><tr><td><code>formatPrice(10, {}, 'not declared')</code></td><td><code>10</code></td><td><code>{}</code></td><td>&nbsp;<code>[10, {}, "not declared"]</code></td></tr></tbody></table><figcaption>* <code>formatPrice</code> throws a error when calling <code>amount.toFixed()</code> on <code>undefined</code>.</figcaption></figure>







<p>Using <code>arguments</code> in function&rsquo;s body requires use of the <code>function</code> keyword for declaration. That is why <code>arguments</code> is not defined inside an arrow function.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-43" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">withKeyword</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>) <span class="hljs-comment">// OK</span>
}

<span class="hljs-keyword">const</span> arrowFunction = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>) <span class="hljs-comment">// ReferenceError: arguments is not defined</span>
}</code></div><small class="shcb-language" id="shcb-language-43"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h5>The Rest Parameter operator (<code>...</code>)</h5>



<p>Despite the <code>arguments</code> variable is very powerful, it may become error-prone.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-44" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parentFunction1</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">childFunction</span> (<span class="hljs-params"></span>) </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">arguments</span>).join(<span class="hljs-string">','</span>) }
  <span class="hljs-keyword">return</span> childFunction()
}

<span class="hljs-built_in">console</span>.log(parentFunction1(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">// prints ''</span></code></div><small class="shcb-language" id="shcb-language-44"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>

<pre class="wp-block-code" aria-describedby="shcb-language-45" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parentFunction2</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> childFunction = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> { <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">arguments</span>).join(<span class="hljs-string">','</span>) }
  <span class="hljs-keyword">return</span> childFunction()
}

<span class="hljs-built_in">console</span>.log(parentFunction2(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">// prints '1,2,3'</span></code></div><small class="shcb-language" id="shcb-language-45"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>First of all, <code>arguments</code> is an array-like, but not an array. It supports <code>arguments.length</code> and <code>arguments[index]</code>, but not other array&rsquo;s methods like <code>array.join(separator)</code>. That is why I needed <code>Array.from(arguments)</code> in the previous example.</p>



<p>Then, you noticed that switching from <code>function</code> keyword to arrow function changed the behaviour of our code. Remember that an arrow function does not override <code>arguments</code> inside its body!</p>



<p>In addition, <code>arguments</code> is not a meaningful name from business logic perspective.</p>



<p>Hopefully, they are a room for improvement, thanks to the spread operator (<code>...</code>).</p>


<pre class="wp-block-code" aria-describedby="shcb-language-46" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parentFunction</span> (<span class="hljs-params">...joinables</span>) </span>{
  <span class="hljs-keyword">const</span> childFunction = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> { <span class="hljs-keyword">return</span> joinables.join(<span class="hljs-string">','</span>) }
  <span class="hljs-keyword">return</span> childFunction()
}</code></div><small class="shcb-language" id="shcb-language-46"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Finally, if your <code>parentFunction</code> accepted both fixed count of parameters followed by varying length list of parameters, you should work with index offset&#8230; But is it simple with the spread operator.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-47" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">applyOperator</span> (<span class="hljs-params">operator, ...operands</span>) </span>{}
<span class="hljs-built_in">console</span>.log(applyOperator(<span class="hljs-string">'+'</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">// may output 6 once implemented</span></code></div><small class="shcb-language" id="shcb-language-47"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Return value</h4>



<ul><li>If a <code>return</code> statement is executed inside a function body, the function exits with evaluated expression.</li><li>For arrow function without curly brackets around the body expression, return is implicit. Example: <code>const sum = (a, b) =&gt; a + b</code>;</li><li>In absence of explicitly executed or implicit <code>return</code> statement, it fallbacks to <code>undefined</code>.</li></ul>
<style class="advgb-styles-renderer">.small-table { font-size: 80%; margin-bottom: 1em; }</style><p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/javascript-function-basis/">07. JavaScript: function basis</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>06. JavaScript: conditional control flows</title>
		<link>https://thomas-veillard.fr/front-end-web-development/languages/11-javascript-conditional-control-flows/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:42 +0000</pubDate>
				<category><![CDATA[02. Languages]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2482</guid>

					<description><![CDATA[<p>Truthy and falsy values Most control flows contains conditional logic. You express an expression, which is evaluated as a truthy or falsy value. Here a list of falsy values: false ; undefined ; null ; 0 ; NaN ; ''. Everything that is not falsy is truthy. If &#8230; else if &#8230; else Only one &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/languages/11-javascript-conditional-control-flows/" class="more-link">Continuer la lecture de <span class="screen-reader-text">06. JavaScript: conditional control flows</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/11-javascript-conditional-control-flows/">06. JavaScript: conditional control flows</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Truthy and falsy values</h4>



<p>Most control flows contains conditional logic. You express an expression, which is evaluated as a <strong>truthy or falsy</strong> value. Here a list of falsy values:</p>



<ul><li><code>false</code> ;</li><li><code>undefined</code> ;</li><li><code>null</code> ;</li><li><code>0</code> ;</li><li><code>NaN</code> ;</li><li><code>''</code>.</li></ul>



<p>Everything that is not falsy is truthy.</p>



<h4>If &#8230; else if &#8230; else</h4>


<pre class="wp-block-code" aria-describedby="shcb-language-48" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">const</span> betweenZeroIncAndTenExc = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>) <span class="hljs-comment">// [0, 10[</span>

<span class="hljs-keyword">if</span> (betweenZeroIncAndTenExc &lt; <span class="hljs-number">3</span>) {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'0 &lt;= betweenZeroIncAndTenExc &lt; 3'</span>)
} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (betweenZeroIncAndTenExc &lt; <span class="hljs-number">6</span>) {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'3 &lt;= betweenZeroIncAndTenExc &lt; 6'</span>)
} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (betweenZeroIncAndTenExc === <span class="hljs-number">7</span>) {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'betweenZeroIncAndTenExc = 7'</span>)
} <span class="hljs-keyword">else</span> {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'8 &lt;= betweenZeroIncAndTenExc &lt; 10'</span>)
}</code></div><small class="shcb-language" id="shcb-language-48"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<ul><li>Only one of the <code>console.log</code> statements will be executed.</li><li>Only the <code>if </code>block is mandatory. Any count of <code>else if</code> branches are allowed, but the <code>else</code> bloc is unique.</li></ul>



<p>In the current example, curly brackets are optional because each block contains a single statement. That is also true for other control flows.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-49" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">if</span> (betweenZeroIncAndTenExc &lt; <span class="hljs-number">3</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'0 &lt;= betweenZeroIncAndTenExc &lt; 3'</span>)
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (betweenZeroIncAndTenExc &lt; <span class="hljs-number">6</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'3 &lt;= betweenZeroIncAndTenExc &lt; 6'</span>)
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (betweenZeroIncAndTenExc === <span class="hljs-number">7</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'betweenZeroIncAndTenExc = 7'</span>)
<span class="hljs-keyword">else</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'8 &lt;= betweenZeroIncAndTenExc &lt; 10'</span>)</code></div><small class="shcb-language" id="shcb-language-49"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Tips: never mix block with and without curly brackets inside the same control flow. It makes it harder to read.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-50" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// BAD! Never mix block with and without curly inside the same control flow for readability reasons.</span>
<span class="hljs-keyword">if</span> (betweenZeroIncAndTenExc &lt; <span class="hljs-number">3</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'0 &lt;= betweenZeroIncAndTenExc &lt; 3'</span>)
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (betweenZeroIncAndTenExc &lt; <span class="hljs-number">6</span>) {
  <span class="hljs-keyword">const</span> nPlus1 = betweenZeroIncAndTenExc + <span class="hljs-number">1</span>
  <span class="hljs-built_in">console</span>.log(nPlus1)
}</code></div><small class="shcb-language" id="shcb-language-50"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Previous examples only used booleans in conditions, but you could also use any truthy/falsy value:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-51" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// 0 is a falsy value</span>
<span class="hljs-keyword">if</span> (betweenZeroIncAndTenExc) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'betweenZeroIncAndTenExc is not 0'</span>)</code></div><small class="shcb-language" id="shcb-language-51"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Switch case</h4>



<p>The switch-case statement compares an expression to a list of cases. Even if it uses the safer strict comparison (<code>===</code>) internally, some areas of the switch-case control flow are still error-prone. At the same time, these edge cases make the switch so powerful. </p>



<p>Let&rsquo;s discover these behaviours through examples and their if-elseif-else equivalents.</p>



<h5>Example 1: Sometime, a simpler if is better&#8230;</h5>


<pre class="wp-block-code" aria-describedby="shcb-language-52" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> betweenZeroIncAndThreeExc = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">3</span>) <span class="hljs-comment">// [0, 3[</span>

<span class="hljs-comment">// switch-case based condition branches</span>
<span class="hljs-keyword">switch</span> (betweenZeroIncAndThreeExc) {
    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'is equal to 0'</span>)
        <span class="hljs-keyword">break</span>
    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'is equal to 1'</span>)
        <span class="hljs-keyword">break</span>
    <span class="hljs-attr">default</span>:
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Is neither equal to 0 nor 1'</span>);
}

<span class="hljs-comment">// if-elseif-else equivalent</span>
<span class="hljs-keyword">if</span> (betweenZeroIncAndThreeExc === <span class="hljs-number">0</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'is equal to 0'</span>)
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (betweenZeroIncAndThreeExc === <span class="hljs-number">1</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'is equal to 1'</span>)
<span class="hljs-keyword">else</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Is neither equal to 0 nor 1'</span>)</code></div><small class="shcb-language" id="shcb-language-52"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>In this example, the switch case statement is more verbose (mainly due to the repeated <code>break</code> instruction). But it is still interesting for readability if you increase the number of cases.</p>



<h5>Example 2: The <code>break</code> statement, a small word behind big bugs&#8230;</h5>



<p>Please reconsider the previous example, without the <code>break</code> statements. If a case is matched, all following blocks are executed until a <code>break</code> is executed or the end of control flow is reached.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-53" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript shcb-code-table shcb-line-numbers"><span class='shcb-loc'><span><span class="hljs-keyword">const</span> zero = <span class="hljs-number">0</span>;
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span><span class="hljs-comment">// switch-case based condition branches</span>
</span></span><span class='shcb-loc'><span><span class="hljs-keyword">switch</span> (zero) {
</span></span><span class='shcb-loc'><span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'is equal to 0'</span>)
</span></span><span class='shcb-loc'><span>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'is equal to 1'</span>)
</span></span><span class='shcb-loc'><span>    <span class="hljs-keyword">default</span>:
</span></span><span class='shcb-loc'><span>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Is neither equal to 0 nor 1'</span>)
</span></span><span class='shcb-loc'><span>}
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span><span class="hljs-comment">// if-elseif-else equivalent</span>
</span></span><span class='shcb-loc'><span><span class="hljs-keyword">if</span> (zero === <span class="hljs-number">0</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'is equal to 0'</span>)
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span><span class="hljs-keyword">if</span> (zero === <span class="hljs-number">0</span> || zero === <span class="hljs-number">1</span>) {
</span></span><span class='shcb-loc'><span>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'is equal to 1'</span>)
</span></span><span class='shcb-loc'><span>}
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Is neither equal to 0 nor 1'</span>)
</span></span></code></div><small class="shcb-language" id="shcb-language-53"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>

<pre class="wp-block-code" aria-describedby="shcb-language-54" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript">[LOG]: <span class="hljs-string">"is equal to 0"</span> 
[LOG]: <span class="hljs-string">"is equal to 1"</span> 
[LOG]: <span class="hljs-string">"Is neither equal to 0 nor 1"</span> 
[LOG]: <span class="hljs-string">"is equal to 0"</span> 
[LOG]: <span class="hljs-string">"is equal to 1"</span> 
[LOG]: <span class="hljs-string">"Is neither equal to 0 nor 1"</span> </code></div><small class="shcb-language" id="shcb-language-54"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p> Just removing the <code>break</code> statement fully changed the conditional logic. That is probably the bigger risk of using <code>switch-case</code> if you are not aware of its specifications.</p>



<ul><li>Line 5: the <code>case 0</code> is, of course, matched (remember <code>const zero = 0</code>) ;</li><li>Line 6 and 7: each block after <code>case 0</code> is executed because no break statement is found.</li><li>Line 7: whatever was the value of <code>zero</code>, the <code>default</code> case is always executed. It is executed if a previous <code>case</code> matched because of the lack of <code>break</code> statements. And even without matched <code>case</code>, it is still the <code>default</code> one!</li></ul>



<p>But do not throw the baby out with the bathwater! This behaviour is powerful when properly used.</p>



<h5>Example 3: When to use <code>break</code>, and when not.</h5>


<pre class="wp-block-code" aria-describedby="shcb-language-55" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// an HTTP error code is typically a number between 100 and 5xx.</span>
<span class="hljs-keyword">const</span> httpErrorCode = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (<span class="hljs-number">550</span> - <span class="hljs-number">100</span>) + <span class="hljs-number">100</span>);
<span class="hljs-keyword">let</span> httpCodeMessage = <span class="hljs-literal">null</span>;

<span class="hljs-comment">// switch-case based condition branches</span>
<span class="hljs-keyword">switch</span> (httpErrorCode) {
    <span class="hljs-keyword">case</span> <span class="hljs-number">200</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-number">201</span>:
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'This is a known success code'</span>)
        <span class="hljs-keyword">break</span>

    <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'403 and 404 errors may occure in normal operations'</span>)
        <span class="hljs-keyword">break</span>
    
    <span class="hljs-attr">default</span>:
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Unexpected code (cannot occures in normal operation): '</span> + httpErrorCode)
}

<span class="hljs-comment">// if-elseif-else equivalent</span>
<span class="hljs-keyword">if</span> (httpErrorCode === <span class="hljs-number">200</span> || httpErrorCode === <span class="hljs-number">201</span>) {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'This is a known success code'</span>)
} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (httpErrorCode === <span class="hljs-number">403</span> || httpErrorCode === <span class="hljs-number">404</span>) {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'403 and 404 errors may occure in normal operations'</span>)
} <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Unexpected code (cannot occures in normal operation): '</span> + httpErrorCode)
}</code></div><small class="shcb-language" id="shcb-language-55"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>To conclude, missing a <code>break</code>, both when reading and write the code, is easy. You can mitigate this issue, thanks to a proper indentation and some line breaks (like in the previous example). Most of the time, you probably do not need a switch-case.</p>



<p>Once that is said, the <code>switch</code> could sometimes be more readable. Internally, your JS engine may even optimise the switch-case to archive O(n) complexity (useful in performance critical parts of your app).</p>



<h3>Loops</h3>


<pre class="wp-block-code" aria-describedby="shcb-language-56" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]
<span class="hljs-keyword">const</span> object = { <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> }

<span class="hljs-comment">// C-style while</span>
<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;
<span class="hljs-keyword">while</span> (i &lt; array.length) {
  <span class="hljs-built_in">console</span>.log(i)
  i++
}

<span class="hljs-comment">// C-style do...while</span>
<span class="hljs-keyword">do</span> {} <span class="hljs-keyword">while</span> (condition)

<span class="hljs-comment">// C-style loops</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) <span class="hljs-built_in">console</span>.log(i) <span class="hljs-comment">// 0, 1, 2</span>

<span class="hljs-comment">// iterates on array index (note that each key is a string, even if array's index are normally number)</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> array) <span class="hljs-built_in">console</span>.log(i) <span class="hljs-comment">// '0', '1', '2'</span>

<span class="hljs-comment">// iterates on object keys</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> object) <span class="hljs-built_in">console</span>.log(key) <span class="hljs-comment">// 'a', 'b', 'c'</span>

<span class="hljs-comment">// iterates on values</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> value <span class="hljs-keyword">of</span> array) <span class="hljs-built_in">console</span>.log(value) <span class="hljs-comment">// 10, 20, 30</span></code></div><small class="shcb-language" id="shcb-language-56"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Tricks about logical expressions and truthy values</h4>



<p>That are the kind of tricks you frequently find in code snippets&#8230;</p>



<h5>About !!</h5>



<p>Sometimes, you want a <code>boolean</code> instead of a random truthy or falsy value. Think about it like a cast to boolean operation.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-57" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-built_in">console</span>.log(!!<span class="hljs-string">'input is present'</span>) <span class="hljs-comment">// prints true</span>
<span class="hljs-built_in">console</span>.log(!!<span class="hljs-number">0</span>) <span class="hljs-comment">// prints false</span></code></div><small class="shcb-language" id="shcb-language-57"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h5>About <code>||</code></h5>



<p>The <code>||</code> operator returns the first truthy value from left to right and fallbacks to the right falsy value. The result is <strong>NOT</strong> casted to boolean.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-58" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> || <span class="hljs-literal">null</span> || <span class="hljs-number">1</span>) <span class="hljs-comment">// prints 1</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span> || <span class="hljs-literal">undefined</span> || <span class="hljs-number">0</span>) <span class="hljs-comment">// prints 0</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span> || <span class="hljs-number">2</span> || <span class="hljs-number">0</span>) <span class="hljs-comment">// prints 2</span></code></div><small class="shcb-language" id="shcb-language-58"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>This behaviour is commonly used in functions accepting an <code>opts</code> parameter having optional fields. When a field is missing, it fallbacks to a default value instead.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-59" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatPrice</span> (<span class="hljs-params">amount, opts = {}</span>) </span>{
  <span class="hljs-comment">// Example 1: a local variable that fallbacks to 'after'</span>
  <span class="hljs-keyword">const</span> symbolPosition = opts.symbolPosition || <span class="hljs-string">'after'</span>

  <span class="hljs-comment">// Example 2: set symbol to '€' on `opts` object if `opts.symbol`</span>
  <span class="hljs-comment">// is undefined or has a falsy value. Has obvious side effect.</span>
  opts.symbol ||= <span class="hljs-string">'€'</span>

  <span class="hljs-comment">// Example 3: cannot use || because 0 is acceptable but falsy value.</span>
  <span class="hljs-comment">// Instead, ?? operator takes the left operand if is neither</span>
  <span class="hljs-comment">// null or undefined. Else, it takes right operand.</span>
  <span class="hljs-keyword">const</span> precision = opts.precision ?? <span class="hljs-number">2</span>

  <span class="hljs-comment">// Here, format and return the price according to those options</span>
}

<span class="hljs-comment">// opts is optional</span>
<span class="hljs-built_in">console</span>.log(formatPrice(<span class="hljs-number">10</span>))

<span class="hljs-comment">// opts.precision is optional (default 2)</span>
<span class="hljs-built_in">console</span>.log(formatPrice(<span class="hljs-number">10</span>, { <span class="hljs-attr">symbol</span>: <span class="hljs-string">'$'</span>, <span class="hljs-attr">symbolPosition</span>: <span class="hljs-string">'before'</span> }))

<span class="hljs-comment">// 0 ?? 2 === 0, so opts.precision is not overwritten</span>
<span class="hljs-built_in">console</span>.log(formatPrice(<span class="hljs-number">10</span>, { <span class="hljs-attr">round</span>: <span class="hljs-number">0</span> }))

<span class="hljs-comment">// null || 'after' === 'after' because null is a falsy value</span>
<span class="hljs-built_in">console</span>.log(formatPrice(<span class="hljs-number">10</span>, { <span class="hljs-attr">symbol</span>: <span class="hljs-literal">null</span> }))</code></div><small class="shcb-language" id="shcb-language-59"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<h5>About &amp;&amp;</h5>


<pre class="wp-block-code" aria-describedby="shcb-language-60" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// try to print a.b, but do not crash if a is null or undefined</span>
<span class="hljs-built_in">console</span>.log(a &amp;&amp; a.b)

<span class="hljs-comment">// previous code prints false if a = false</span>
<span class="hljs-comment">// previous code prints null if a = null</span>
<span class="hljs-comment">// previous code prints undefined if a = {}</span>
<span class="hljs-comment">// previous code prints 1 if a = { b: 1 }</span></code></div><small class="shcb-language" id="shcb-language-60"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre><p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/11-javascript-conditional-control-flows/">06. JavaScript: conditional control flows</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>05. JavaScript: coercion &#038; comparison</title>
		<link>https://thomas-veillard.fr/front-end-web-development/languages/10-fast-tour-of-javascript-coercion-comparison/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:41 +0000</pubDate>
				<category><![CDATA[02. Languages]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2376</guid>

					<description><![CDATA[<p>This post focus on the difference between ==, !=, === and !== operators. All of them are equality (or difference) comparison operator. Automatic type coercion with == and != a == b returns true if a and b are equal after type coercion. a != b returns true if a and b are different after &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/languages/10-fast-tour-of-javascript-coercion-comparison/" class="more-link">Continuer la lecture de <span class="screen-reader-text">05. JavaScript: coercion &#038; comparison</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/10-fast-tour-of-javascript-coercion-comparison/">05. JavaScript: coercion &#038; comparison</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>This post focus on the difference between <code>==</code>, <code>!=</code>, <code>===</code> and <code>!==</code> operators. All of them are equality (or difference) comparison operator.</p>



<h4>Automatic type coercion with <code>==</code> and <code>!=</code></h4>



<ul><li><code>a == b</code> returns <code>true</code> if a and b are equal after type coercion.</li><li><code>a != b</code> returns <code>true</code> if a and b are different after type coercion.</li></ul>


<pre class="wp-block-code" aria-describedby="shcb-language-61" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> == <span class="hljs-number">1</span>) <span class="hljs-comment">// true</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> == <span class="hljs-number">2</span>) <span class="hljs-comment">// false</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'1'</span> == <span class="hljs-string">'1'</span>) <span class="hljs-comment">// true</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'1'</span> == <span class="hljs-string">'2'</span>) <span class="hljs-comment">// false</span></code></div><small class="shcb-language" id="shcb-language-61"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Until that point, it looks basic. But what appends when comparing mixed types? The automatic type coercion mechanism dynamically casts operands before comparing them.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-62" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> == <span class="hljs-string">'1'</span>) <span class="hljs-comment">// true, internally compares 1 == 1</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> == <span class="hljs-string">'2'</span>) <span class="hljs-comment">// false, internally compares 1 == 2</span></code></div><small class="shcb-language" id="shcb-language-62"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>The complexity of the truth table is evidence that the <code>weak equality operator</code> (aka <code>==</code>) is error-prone. </p>



<figure class="wp-block-image size-large"><img loading="lazy" width="674" height="674" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for-.png" alt="" class="wp-image-2395" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for-.png 674w, https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for--300x300.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for--150x150.png 150w" sizes="(max-width: 674px) 100vw, 674px" /><figcaption>Truth table of the <code>==</code> operator.</figcaption></figure>



<h4>Strict equality operator</h4>



<p>For that reason, it is a good practice to prefer the <code>strong type equality operator</code> (aka. <code>===</code>). This one works a more logical way.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-63" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> === <span class="hljs-number">1</span>) <span class="hljs-comment">// true</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> === <span class="hljs-number">2</span>) <span class="hljs-comment">// false</span>

<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> === <span class="hljs-string">'1'</span>) <span class="hljs-comment">// false, number is not string</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> === <span class="hljs-string">'2'</span>) <span class="hljs-comment">// false, number is not string</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> !== <span class="hljs-string">'1'</span>) <span class="hljs-comment">// true, number is not string</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> !== <span class="hljs-string">'2'</span>) <span class="hljs-comment">// true, number is not string</span></code></div><small class="shcb-language" id="shcb-language-63"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="666" height="657" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for-1-1.png" alt="" class="wp-image-2396" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for-1-1.png 666w, https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for-1-1-300x296.png 300w" sizes="(max-width: 666px) 100vw, 666px" /><figcaption>Truth table of <code>===</code> operator, which is more logical than <code>==</code>.</figcaption></figure>



<p>Except when you are aware of and you need type coercion,<strong> you should prefer the <code>===</code> operator over <code>==</code>.</strong></p>



<h4>Automatic type coercion with other operators</h4>



<p>The type coercion works with any numerical comparison:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-64" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// all these expressions are true (1 is greater than 0).</span>
<span class="hljs-string">'1'</span> &gt; <span class="hljs-number">0</span>    <span class="hljs-comment">// left operand could be a string</span>
<span class="hljs-number">1</span> &gt; <span class="hljs-string">'0'</span>    <span class="hljs-comment">// right operand could be a string</span>
<span class="hljs-string">'1'</span> &gt; <span class="hljs-string">'0'</span>  <span class="hljs-comment">// both left and right are cast as numerics because '&gt;' only accepts numbers</span>

<span class="hljs-comment">// these examples are of course applicable to '&gt;=', '&lt;' and '&lt;='.</span></code></div><small class="shcb-language" id="shcb-language-64"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>More generally, it is also effective with any numeric operator:</p>



<ul><li>power operator (<code>2 ** 0 = 1, 2 ** 1 = 2, 2 ** 2 = 4, 2 ** 3 = 8</code>)</li><li>bitwise operators, like binary union and intersection (<code>1 | 3 = 3, 1 &amp; 3 = 1</code>)</li><li>see mozilla&rsquo;s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators" target="_blank" rel="noreferrer noopener">list of operators in JavaScript</a></li></ul>



<h4>Automatic type coercion with &lsquo;+&rsquo; operator: <span class="has-inline-color has-yellow-color">warning</span></h4>



<p>Some lexems such as &lsquo;+&rsquo; are common to multiple operators, such as &lsquo;+&rsquo;.</p>



<ul><li>&lsquo;string + string&rsquo; is the concatenation operator ;</li><li>&lsquo;number + number&rsquo; the sum operator.</li></ul>



<p>But what appends when mixing operand types?</p>


<pre class="wp-block-code" aria-describedby="shcb-language-65" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-number">1</span> + <span class="hljs-string">'1'</span> <span class="hljs-comment">// '11'</span>
<span class="hljs-string">'1'</span> + <span class="hljs-number">1</span> <span class="hljs-comment">// '11'</span></code></div><small class="shcb-language" id="shcb-language-65"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>So, it could lead to some bugs&#8230;</p>


<pre class="wp-block-code" aria-describedby="shcb-language-66" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">/** wrong, unsafe **/</span>
<span class="hljs-keyword">const</span> yourAge = <span class="hljs-built_in">window</span>.prompt(<span class="hljs-string">'Your age'</span>) <span class="hljs-comment">// user enters '17'</span>

<span class="hljs-comment">// prints 'Next year, you will be 171 years old'.</span>
<span class="hljs-keyword">if</span> (yourAge &lt; <span class="hljs-number">18</span>) <span class="hljs-built_in">window</span>.alert(<span class="hljs-string">'Next year, you will be '</span> + (yourAge + <span class="hljs-number">1</span>) + <span class="hljs-string">' years old'</span>)</code></div><small class="shcb-language" id="shcb-language-66"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>So, my tips is: <strong>when you expect to manipulate numbers, always parse them</strong>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-67" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// using the '+ unary operator'</span>
<span class="hljs-keyword">const</span> number1 = +<span class="hljs-string">'10'</span>    <span class="hljs-comment">// 10</span>
<span class="hljs-keyword">const</span> number2 = +<span class="hljs-string">'10.5'</span>  <span class="hljs-comment">// 10.5</span>

<span class="hljs-comment">// using the parseInt(str, radius) method</span>
<span class="hljs-keyword">const</span> number3 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">'10'</span>, <span class="hljs-number">10</span>)    <span class="hljs-comment">// 10</span>
<span class="hljs-keyword">const</span> number4 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">'10.5'</span>, <span class="hljs-number">10</span>)  <span class="hljs-comment">// 10</span>
<span class="hljs-keyword">const</span> number5 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">'10'</span>, <span class="hljs-number">16</span>)    <span class="hljs-comment">// 16, because the string '10' is analysed a hexadecimal string</span>

<span class="hljs-comment">// using the parseFloat(str) method</span>
<span class="hljs-keyword">const</span> number6 = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">'10.5'</span>)    <span class="hljs-comment">// 10.5</span></code></div><small class="shcb-language" id="shcb-language-67"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre><p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/languages/10-fast-tour-of-javascript-coercion-comparison/">05. JavaScript: coercion &#038; comparison</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
