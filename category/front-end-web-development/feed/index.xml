<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Front-end web development (English) &#8211; Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/category/front-end-web-development/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/</link>
	<description>Mes cours et supports pédagogiques pour l&#039;enseignement de l&#039;ingénierie informatique.</description>
	<lastBuildDate>Fri, 05 Feb 2021 12:31:51 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.6.1</generator>
	<item>
		<title>2. Managing authentication &#038; routing</title>
		<link>https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 02 Mar 2021 12:04:06 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Practical works]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1125</guid>

					<description><![CDATA[<p>You will build a basic navigation experience, with login capabilities and authenticated area. This is the opportunity to: create your first feature branch on git ; review the code of someone else pull request ; build components, forms and navigation ; write routing configuration with authorisation guards ; work with async processing and error handlers &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Managing authentication &#038; routing</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/">2. Managing authentication &#038; routing</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>You will build a basic navigation experience, with login capabilities and authenticated area. This is the opportunity to:</p>



<ul><li>create your first feature branch on git ;</li><li>review the code of someone else pull request ;</li><li>build components, forms and navigation ;</li><li>write routing configuration with authorisation guards ;</li><li>work with async processing and error handlers ;</li><li>discover some angular&rsquo;s internals (text interpolation, dependency injection&#8230;).</li></ul>



<h2>Start a feature branch</h2>



<p>In our git workflow, a feature branch contains new code that is still under construction or need a peer review. Once that code seems mature (feature complete and code reviewed), it is merged into the develop branch. Finally, when develop has been well tested, you can create a release and push it to the production.</p>



<p>Of course, the notion of « production » is not applicable to this practical work. But it is appropriate for the project.</p>



<p class="exercice"><strong>Exercise 1</strong>: Start a new feature branch and call it <code>authentication-and-routing</code>. On Github, you should see a branch called <code>feature/authentication-and-routing</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># git hf has a high-level command to start a new feature branch</span>
git hf feature start authentication-<span class="hljs-keyword">and</span>-routing</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<h2>Basic navigation</h2>



<p class="exercice"><strong>Exercise 2</strong>: For this question, find your path using the angular-material <a href="https://material.angular.io/guide/getting-started" target="_blank" rel="noreferrer noopener">getting started guide</a>. Then, import and use the <a href="https://material.angular.io/components/toolbar/overview" target="_blank" rel="noreferrer noopener">mat-toolbar</a> component to display a menu with 3 navigation items (without link). At this step, you can put your code in <code>app.component.html</code>.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="703" height="317" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/image.png" alt="" class="wp-image-1151" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/02/image.png 703w, https://thomas-veillard.fr/wp-content/uploads/2021/02/image-300x135.png 300w" sizes="(max-width: 703px) 100vw, 703px" /><figcaption>The expected result. There is no link yet on &lsquo;home&rsquo;, &lsquo;login&rsquo;&#8230; The item &lsquo;profile&rsquo; is rendered even if the user is not logged. That will change once authentication is ready.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/9639358755a68534bfd63a718680541b4e1f926e/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/9639358755a68534bfd63a718680541b4e1f926e" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 3</strong>: Explain the pro and cons of moving the navigation to its own component.</p>



<p>The <code>@angular/cli</code> is able to generate some pieces of code, like a component.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># generate a new component called 'navigation' and reference it in app.module.ts.</span>
$ ng generate component navigation
CREATE src/app/navigation/navigation.component.css (<span class="hljs-number">0</span> bytes)
CREATE src/app/navigation/navigation.component.html (<span class="hljs-number">25</span> bytes)
CREATE src/app/navigation/navigation.component.ts (<span class="hljs-number">291</span> bytes)
UPDATE src/app/app.module.ts (<span class="hljs-number">684</span> bytes)</code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 4</strong>: Commit any existing change on git, then generate a new component called <code>navigation</code>. Examine changes made by <code>@angular/cli</code> (you can use git and the output of <code>ng generate</code> command). Finally, move the mat-toolbar into <code>navigation.component</code>. Visually, the result should be identical.</p>


<div class="wp-block-image" style="text-align: center;">
<figure class="size-large"><img loading="lazy" class="wp-image-1162" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/image-1.png" alt="" width="311" height="154"><figcaption>The new component tree with NavigationComponent. Captured with <a href="https://augury.rangle.io/" target="_blank" rel="noreferrer noopener">Augury</a>.</figcaption></figure>
</div>

<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/d90afc6f2b5eaffa6e03dfb4dd7baf2cb9472917/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/d90afc6f2b5eaffa6e03dfb4dd7baf2cb9472917" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 5</strong>: Generate 3 more components using the cli: <code>home</code>, <code>login</code> and <code>profile</code>. Those components do not have to be included in <code>app.component.html</code> yet. Later, we will let <code>@angular/router</code> dynamically include the right component depending on the current path.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/fd4e68d458cfb634586a14423e4812f79964d12d/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/fd4e68d458cfb634586a14423e4812f79964d12d" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<div class="exercice" style="padding-bottom: 0; margin-bottom: 1em">
<p><strong>Exercise 6</strong>: Implement 3 routes with <code>@angular/router</code>. Each route will render the eponym component.</p>

<ul style="margin-left: 1em;">
<li><code>/</code> will render <code>home.component</code></li>
<li><code>/login</code> will render <code>login.component</code></li>
<li><code>/profile</code> will render <code>profile.component</code></li>
</ul>

<p>You can use this <a href="https://angular.io/guide/router" target="_blank" rel="noopener">guide</a>. Remember that your project was previously generated with routing enabled. You just have to set up routes and use <code>router-outlet</code> in <code>app.component.html</code>.</p>
</div>



<figure class="wp-block-image size-large"><img loading="lazy" width="919" height="381" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-angular-routes-home-login-and-profile.gif" alt="" class="wp-image-1186"/><figcaption>Expected result. The component is dynamically rendered depending on the route.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/3e0ffc419173f5ebd7d9541851c3a7e2365080fb/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/3e0ffc419173f5ebd7d9541851c3a7e2365080fb" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 7</strong>: Add links to your menu items.</p>



<p class="exercice"><strong>Exercise 8</strong>: Did you use <code>&lt;a href="PATH_OR_URL"&gt;&lt;/a&gt;</code> for your links ? Instead of the <code>href</code> HTML attribute, you must use the <code>routerLink</code> directive. Both ways will technically work, but there are major differences. What are they ?</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="919" height="381" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/routerLink-directive-in-action.gif" alt="" class="wp-image-1196"/><figcaption>Expected result. The user can click links in menu to navigate across views.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/9d6045149030833ff98f86c7689ce8cb175877c5/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/9d6045149030833ff98f86c7689ce8cb175877c5" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Login form</h2>



<p>Forms are a major part of most applications. In angular, you have 2 approaches available: template-driven and reactive. I will use template-driven form in my correction, because they are simple and strong-typable. You have an <a href="https://angular.io/guide/forms" target="_blank" rel="noreferrer noopener">example of template-driven forms</a> in the angular documentation.</p>



<p class="exercice"><strong>Exercise 9</strong>: Add a simple login form. When the user clicks on <code>submit</code> button, open a modal with content of inputs (see <a href="https://developer.mozilla.org/fr/docs/Web/API/Window/alert" target="_blank" rel="noreferrer noopener">window.alert</a>). Email and password fields are required to submit the form. If they are missing, the submit button is disabled.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="938" height="371" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-login-form-template.gif" alt="" class="wp-image-1212"/><figcaption>The login form as expected at this step.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/77c6844e5480df8c207193cf644ff86db31f5b69/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/77c6844e5480df8c207193cf644ff86db31f5b69" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p>Although this is not a design course, we can probably make this form more beautiful. For this we will use some components from <code>angular-material</code> like we did for the toolbar.</p>



<p class="exercice"><strong>Exercise 10</strong>: Improve the look and feel of the login page. Using <code>angular-material</code> is recommended.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="947" height="512" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-login-form-material-design.gif" alt="" class="wp-image-1219"/><figcaption>The result once I used material components and a bit of CSS.</figcaption></figure>



<p>To achieve this look and feel, I used the following modules:</p>



<ul><li><a href="https://material.angular.io/components/card/overview" target="_blank" rel="noreferrer noopener">MatCardModule</a></li><li><a href="https://material.angular.io/components/form-field/overview" target="_blank" rel="noreferrer noopener">MatFormFieldModule</a> &amp; <a href="https://material.angular.io/components/input/overview" target="_blank" rel="noreferrer noopener">MatInputModule</a> (both works together)</li><li><a href="https://material.angular.io/components/button/overview" target="_blank" rel="noreferrer noopener">MatButtonModule</a></li></ul>



<p>Of course, you are free to layout the page and design the UI like you wish. That is just an example.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="947" height="804" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/login-form-responsive.gif" alt="" class="wp-image-1222"/><figcaption>Bonus: use <a href="https://css-tricks.com/css-media-queries/" target="_blank" rel="noreferrer noopener">CSS media queries</a> to make your form responsive. Your browser includes developers tools simulating phones and pads. They are useful to test your media queries.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/ce6004485d6366409ae88c7f098f78638787605c/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/ce6004485d6366409ae88c7f098f78638787605c" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p>The same way we prefer <code>routerLink</code> over <code>href</code> because it does not reload the <code>Single Page Application</code>, you should use the <code>@angular/router</code> from your typescript controller (ex. from your submit method in <code>LoginComponent</code>). Here an example:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;
<span class="hljs-keyword">import</span> { Router } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/router'</span>;

<span class="hljs-meta">@Component</span>({
  selector: <span class="hljs-string">'app-login'</span>,
  templateUrl: <span class="hljs-string">'./login.component.html'</span>,
  styleUrls: [<span class="hljs-string">'./login.component.css'</span>]
})
<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> LoginComponent {
  <span class="hljs-keyword">constructor</span> (<span class="hljs-params"><span class="hljs-keyword">private</span> router: Router</span>) {}

  <span class="hljs-keyword">async</span> submit () {
    <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.router.navigateByUrl(<span class="hljs-string">'/profile'</span>);
  }
}</code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>

<div class="exercice" style="margin-bottom: 1em;">
<p><strong>Exercise 11</strong>: This example is rich of typescript and angular features. Let&rsquo;s analyse it.</p>
<ul style="margin-left: 1em; margin-bottom: 0;">
<li>How many instance attributes has the <code>LoginComponent</code> class ?</li>
<li>Why is the visibility of <code>router</code> attribute restricted to <code>private</code> ?</li>
<li>Angular detects the class constructor requires an instance of <code>Router</code>. When it instantiates the <code>LoginComponent</code>, it will provide an instance of <code>Router</code>. Take a look at <a href="https://angular.io/guide/dependency-injection" target="_blank" rel="noopener">Angular&rsquo;s dependency injection</a>.</li>
<li><code>@Component</code> is a <a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noopener">decorator</a>. Although it is still a typescript experimental feature, Angular heavily relies on it.</li>
</ul>
</div>


<p>On submit, the form should send credentials to the server (using <code>axios</code> or native <code>fetch</code> as you prefer). Then, your <code>submit</code> method will deal with the server&rsquo;s response. On success, the user will be redirected to <code>/profile</code>. Finally, he should be notified for any error that occurred.</p>



<p>Remember you have the documentation and playground of API. Also do not forget that calling the server is an <code>async</code> task.</p>



<h4>If you choose axios</h4>



<p>Axios is an external dependency you have to install. Its interface is easy to use. You have to install it using npm (Node Package Manager). Because axios is purely in JS, there is no type definition in it. Typescript can use declaration files (.d.ts), which may be included inside the main npm package or distributed under another package.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># install the axios library</span>
npm install axios

<span class="hljs-comment"># install type definitions from another npm module</span>
npm install --save-dev @types/axios</code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<h4>If you choose fetch</h4>



<p>fetch is nice <code>Promise</code>-based interface built-in modern browsers. It is ready to use, but a bit harder to learn than axios. You have to manually check HTTP code, parse json payload&#8230;</p>



<p class="exercice"><strong>Exercise 12</strong>: Implement the submit method as specified above. For the first iteration, use <code>window.alert</code> to report errors.</p>



<p class="exercice"><strong>Exercise 13</strong>: Take a tour at <a href="https://angular.io/guide/template-syntax" target="_blank" rel="noreferrer noopener">template syntax guide</a>. For this question, you will need <code>text interpolation</code> and <code>*ngIf</code>. Then, report errors in the template itself.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="939" height="518" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/submit-error-handler-in-tempalte.gif" alt="" class="wp-image-1267"/><figcaption>Demonstration of error handler (errors are printed in the template using text interpolation and *ngIf directive).</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/5ae1bc288f032d14355777d5e3b751403f8a748e/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/5ae1bc288f032d14355777d5e3b751403f8a748e" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/">2. Managing authentication &#038; routing</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>1. Setup your practical environment</title>
		<link>https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Wed, 24 Feb 2021 08:53:06 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Practical works]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=897</guid>

					<description><![CDATA[<p>At the end of this practical works series, you will have built the front-end of a cleaning booking service. The back-end is provided. During this first seance, you will: install the necessary tools and learning materials ; start the mock back-end infrastructure (server, database&#8230;) and import seeds ; access to the back-end API documentation and &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/" class="more-link">Continuer la lecture de <span class="screen-reader-text">1. Setup your practical environment</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/">1. Setup your practical environment</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>At the end of this practical works series, you will have built the front-end of a cleaning booking service. The back-end is provided.</p>



<p>During this first seance, you will:</p>



<ul><li>install the necessary tools and learning materials ;</li><li>start the mock back-end infrastructure (server, database&#8230;) and import seeds ;</li><li>access to the back-end API documentation and interact manually with it ;</li><li>generate the angular project and serve compiled application to your browser ;</li><li>commit that angular project on git and push it to Github.</li></ul>



<h2>Required softwares installation</h2>



<p>Only git and docker require administration privileges to be installed. On Linux and macOS, this means you should not use sudo or root for anything else (even installing node.js).</p>



<h4>Git &amp; git-hf</h4>



<p>Git is a decentralised source version manager. A git repository stores the source code of a project and any of its changes. Typically, a contributor writes some code on its side. Once it has completed its task, it commits the changes (with a message) and push it to the remote repositories. Other contributors can update their base. Nowadays, teams centralise repositories hosting on SaaS platforms like Github and Gitlab.</p>



<p>During the lecture, I expressed you follow the <a href="https://datasift.github.io/gitflow/IntroducingGitFlow.html" target="_blank" rel="noreferrer noopener">gitflow</a> workflow. Takes the time to understand it. Then, install the git extension <a href="https://datasift.github.io/gitflow/TheHubFlowTools.html" target="_blank" rel="noreferrer noopener">git-hf</a>. That tool creates high-level commands to manage features, releases and hotfixes branches.</p>



<p>Of course, you also need a Github account.</p>



<h4>Node.js &amp; npm &amp; nvm</h4>



<p><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer noopener">Node.js</a> is a platform that runs Javascript code outside the browser. It makes possible to write server applications in Javascript, allowing developers to use the same technologies for front and back. The back-end you will interface with is running on node.js.</p>



<p>But here we are in front-end module. We are interested in node.js because it powers most tools we will use. Some of them are even shipped with the node installer. Node Package Manager (npm) is one of them. It manages dependencies of your project and installs cli softwares written for node.</p>



<p>I personally use <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer noopener">nvm</a> for installing node. Nvm (Node Version Manager) installs and manages various versions of node (including latest one) without requiring root privileges.</p>



<h4>Docker &amp; docker-compose</h4>



<p><a href="https://docs.docker.com/engine/install/" target="_blank" rel="noreferrer noopener">Docker</a> is a container runtime. Everything running in the container is isolated from the host. Except the kernel which is shared with the host, the container contains a fully functional operating system (including software, shared libraries, users&#8230;).</p>



<p>For example, consider an application only runs on Ubuntu version 20.04, with specific dependencies and a lot a setup. The distribution of that software will be complicated, as there are such requirements. What if you could directly distribute ready to use Ubuntu instance with the software installed ? That is what we call a container image.</p>



<p>Docker maintains DockerHub, a public registry hosting tons of prebuilt images you can pull and instantiate.</p>



<p><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noreferrer noopener">Docker-compose</a> is a higher-level tool, allowing the definition of infrastructure as code. You just have to write a config file, and docker compose will pull, configure and start all containers for you. It takes care of networking, exposing ports, storing persistent data, etc.</p>



<p>Please install both tools. For Windows 10 users, docker-compose is already packaged with Docker Desktop.</p>



<h4>Angular CLI</h4>



<p><a href="https://angular.io/" target="_blank" rel="noreferrer noopener">Angular</a> is a full-featured framework you will use for building your front application. Most actions, such as generating projects or components have been automatised in the « cli » tool.</p>



<p>A single command written in a terminal (Powershell or Node Command Prompt for Windows) do the job. Ensure node is installed first. We also install <a href="https://eslint.org/" target="_blank" rel="noreferrer noopener">eslint</a>, which ensure coding conventions are applied across codebase.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">npm i -g @angular/cli @angular-devkit/{core,schematics} @angular-eslint/schematics</code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<h2>Workspace overview</h2>



<p>At the end of this seance, your workspace should match the following folder hierarchy.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">frontend                       <span class="hljs-comment"># angular projet (generated using @angular/cli)</span>
 ↳ dist                        <span class="hljs-comment"># the folder containing your bundled app. Only exists after running `ng build` command.</span>
 ↳ node_modules                <span class="hljs-comment"># the folder containing local dependencies. See package.json file and npm command for more info.</span>
 ↳ src                         <span class="hljs-comment"># source code (HTML, CSS, TS). It includes components, services, etc.</span>
 ↳ angular.json                <span class="hljs-comment"># @angular/cli configuration</span>
 ↳ package.json                <span class="hljs-comment"># npm configuration, primary used for installing dependencies</span>
 ↳ tsconfig.json               <span class="hljs-comment"># typescript configuration, where are defined target, enabled syntax and type checking features.</span>
 ↳ .eslintrc.json              <span class="hljs-comment"># eslint configuration, where you set linter rules.</span>
learning-materials             <span class="hljs-comment"># my git repository you have to clone, which contains backend server, database and some tools</span>
 ↳ frontend-web-development    <span class="hljs-comment"># the folder containing every materials related to this practical work.</span>
    ↳ docker-compose.yml       <span class="hljs-comment"># configuration for docker-compose, that will take care of booting full backend infrastructure.</span>
    ↳ ...                      <span class="hljs-comment"># everything else in this folder is outside the scope of this module.</span></code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>Angular project&rsquo;s structure is standard (thanks to @angular/cli). For more information about it, please refer to <a href="https://angular.io/guide/file-structure" target="_blank" rel="noreferrer noopener">official documentation</a>.</p>



<h2>Setup the angular project</h2>



<h4>Create the angular app using @angular/cli</h4>



<p class="exercice"><strong>Exercise 1</strong> : Follow this process to create and configure a new angular app.</p>



<ul><li>Linux/Mac: run a terminal</li><li>Windows: use PowerShell or “Node.js Command Prompt”</li></ul>


<pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># install angular if not already done</span>
npm i -g @angular/cli @angular-devkit/{core,schematics} @angular-eslint/schematics

<span class="hljs-comment"># creates a new project with angular router enabled</span>
ng new --routing --collection=@angular-eslint/schematics frontend

<span class="hljs-comment"># enter the 'frontend' folder</span>
<span class="hljs-built_in">cd</span> frontend

<span class="hljs-comment"># install locally ts-standard (our linter)</span>
npm install --save-dev ts-standard
</code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>Then, replace <code>.eslintrc.json</code> file content with the following config. This uses ts-standard presets, with some small differences. Two minor checks are disabled for convenience and semicolons are always required. The reason is angular cli always adds semicolons on generated files. So our rules matches that pattern.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-8" data-shcb-language-name="JSON / JSON with Comments" data-shcb-language-slug="json"><div><code class="hljs language-json">{
  <span class="hljs-attr">"extends"</span>: [<span class="hljs-string">"standard-with-typescript"</span>, <span class="hljs-string">"standard-jsx"</span>],
  <span class="hljs-attr">"parserOptions"</span>: { <span class="hljs-attr">"project"</span>: <span class="hljs-string">"./tsconfig.json"</span> },
  <span class="hljs-attr">"rules"</span>: {
    <span class="hljs-attr">"@typescript-eslint/explicit-function-return-type"</span>: <span class="hljs-string">"off"</span>,
    <span class="hljs-attr">"@typescript-eslint/prefer-readonly"</span>: <span class="hljs-string">"off"</span>,
    <span class="hljs-attr">"@typescript-eslint/strict-boolean-expressions"</span>: <span class="hljs-string">"off"</span>,
    <span class="hljs-attr">"@typescript-eslint/semi"</span>: [<span class="hljs-string">"error"</span>, <span class="hljs-string">"always"</span>]
  }
}</code></div><small class="shcb-language" id="shcb-language-8"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JSON / JSON with Comments</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">json</span><span class="shcb-language__paren">)</span></small></pre>


<p>Finally, edit the <code>tsconfig.json</code> to add <code>compilerOptions.strictNullChecks = true</code> (required by some linter&rsquo;s rules).</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/b31ec0e583ce467e359ece5288c77af1e235a760/corrections" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/b31ec0e583ce467e359ece5288c77af1e235a760" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>Configure your editor</h4>



<p>If you are using VSCode, you will probably appreciate those extensions:</p>



<ul><li>Angular Language Service (type inference in template)</li><li>Eslint checks that conventions are correctly applied</li><li>Gitlens (optional) for better git experience</li></ul>



<h4>Build the app</h4>



<p>The following commands help you to build your app. Many other parameters are available to customise the build process. This is just an overview of more useful.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-9" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">ng build          <span class="hljs-comment"># build the app for development, easy to debug in the browser and heavy bundle size.</span>
ng build --prod   <span class="hljs-comment"># build the app for production. A lot of optimisations are processed, reducing bundle size.</span>
ng build --watch  <span class="hljs-comment"># incrementally rebuild the app on each source code change (faster subsequent builds).</span></code></div><small class="shcb-language" id="shcb-language-9"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<div class="exercice" style="margin-bottom: 1em">
<p><strong>Exercise 2</strong> : I provided you an example of output of the <code>ng build</code> command. Run it on your side and check the content of  `frontend/dist` folder.</p>

<ul style="margin-left: 1em; margin-bottom: 0">
  <li>What are the languages used in output ?</li>
  <li>Which source files have been transpiled and bundled into main.js ?</li>
  <li>How many files were outputted ? Compare this count to the number of files in the source directory. Do you think adding new sources will increase outputted files count ?</li>
<li>What is the purpose of .js.map files ?</li>
<li>What is the purpose of polyfills in Javascript ?</li>
</ul>
</div>


<pre class="wp-block-code" aria-describedby="shcb-language-10" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">$ ng build <span class="hljs-comment"># to run in frontend folder                                                        </span>
✔ Browser application bundle generation complete.
✔ Copying assets complete.
✔ Index html generation complete.

Initial Chunk Files | Names         |      Size
vendor.js           | vendor        |   <span class="hljs-number">2.70</span> MB
polyfills.js        | polyfills     | <span class="hljs-number">127.61</span> kB
main.js             | main          |  <span class="hljs-number">20.85</span> kB
runtime.js          | runtime       |   <span class="hljs-number">6.15</span> kB
styles.css          | styles        | <span class="hljs-number">119</span> bytes

                    | Initial Total |   <span class="hljs-number">2.85</span> MB

Build at: <span class="hljs-number">2021</span><span class="hljs-number">-01</span><span class="hljs-number">-30</span>T08:<span class="hljs-number">46</span>:<span class="hljs-number">07.013</span>Z - Hash: <span class="hljs-number">2</span>b7174e3c646073c60a9 - Time: <span class="hljs-number">6285</span>ms</code></div><small class="shcb-language" id="shcb-language-10"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>At this step, you can open <code>frontend/dist/index.html</code> in your browser and explore the placeholder generated by <code>@angular/cli</code>.</p>



<p class="exercice"><strong>Exercise 3</strong> : Build your app with <code>--prod</code> option and check differences in output.</p>



<h4>Commit your code and push it to Github</h4>



<p class="exercice"><strong>Exercise 4</strong> : Register yourself on Github. Then create a private git repository on Github. Finally push you angular project to Github.</p>



<p>The <code>ng new</code> command already initialised a local git repository. During the previous questions, you did changes to project (ex. by <code>editing tsconfig.json</code> or <code>.eslintrc.json</code>).</p>



<p>You have to <code>commit</code> them. A commit validates and stores a list of changes (files created, updates&#8230;) and a message describing those changes. </p>


<pre class="wp-block-code" aria-describedby="shcb-language-11" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># list all changes currently not committed. Check if you see some "untracked files" that need to be persisted.</span>
git status

<span class="hljs-comment"># you probably want to commit new files in your repository.</span>
<span class="hljs-comment"># git add accepts a list of files or folder.</span>
<span class="hljs-comment"># '.' designates the current directory.</span>
git add .

<span class="hljs-comment"># commit every pending change with a message</span>
git commit -a -m <span class="hljs-string">"configure linter and typescript"</span>

<span class="hljs-comment"># follow the Github guide to push commits to remote for the first time</span>
git remote add origin https:<span class="hljs-comment">//github.com/{GITHUB_USERNAME}/{REPOSITORY_NAME}.git</span>
git branch -M main
git push -u origin main</code></div><small class="shcb-language" id="shcb-language-11"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="905" height="637" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-github-repository-exploration.gif" alt="" class="wp-image-1074"/><figcaption>At this step, your code is on Github. You can explore tracked files, show commit history, list changes in a particular commit, and so much more !</figcaption></figure>



<h4>Start using GitFlow and git-hf</h4>



<p>All the code is currently committed on main branch (previously called master branch). In the GitFlow workflow, the main branch is dedicated to the production code only.</p>



<p>This TPs series will use feature branches, develop and main. Each time you start a new feature (ex. adding authentification), you will start a feature branch. Once you completed your changes, open a pull request on github and merge the code to develop. Once the code on develop is well tested, it can be merged on main branch.</p>



<p class="exercice"><strong>Exercise 5</strong> : Initialise git hf with the following command. Ensure you select &lsquo;main&rsquo; as primary branch (not master). You can find <a href="https://datasift.github.io/gitflow/index.html" target="_blank" rel="noreferrer noopener">documentation here</a>.</p>


<pre class="wp-block-code"><div><code class="hljs">git hf init -a</code></div></pre>


<h2>Setup back-end infrastructure</h2>



<p>Before cloning the repository, remember we want <code>frontend</code> and <code>learning-materials</code> in the same location. So ensure you see <code>frontend</code> folder when you write <code>ls</code> command. If not, use the <code>cd</code> command.</p>



<p class="exercice"><strong>Exercise 6</strong> : create a folder dedicated to practical works and clone <a href="https://github.com/TruffeCendree/learning-materials" target="_blank" rel="noreferrer noopener">my git repository</a> in it.</p>



<p>This git repository is a <a href="https://en.wikipedia.org/wiki/Monorepo" target="_blank" rel="noreferrer noopener">monorepo</a>. It contains learning materials for multiple modules. You must focus on <code>learning-materials/frontend-web-development</code> folder.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-12" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># change directory to the folder containing the backend infrastructure (docker-compose.yml)</span>
<span class="hljs-built_in">cd</span> learning-materials/frontend-web-development</code></div><small class="shcb-language" id="shcb-language-12"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 7</strong>: Inside this folder, you will find <code>docker-compose.yml</code>. The file contains the configuration of back-end services (mariadb database, phpmyadmin, the back-end api&#8230;). Those services discuss together over an internal network and use passwords. Replace password as requested in the <code>docker-compose.yml</code> file.</p>



<p>Do you know what is a safe password ? How long should they be ? ANSSI (Agence Nationale de la Sécurité des Systèmes d&rsquo;Information) provides explanations and a <a href="https://www.ssi.gouv.fr/administration/precautions-elementaires/calculer-la-force-dun-mot-de-passe/" target="_blank" rel="noreferrer noopener">strength calculator</a>. I recommend generating random and unique password for each account (not just in this module 🧐).</p>



<p class="exercice"><strong>Exercise 8</strong>: Start the mariadb database using the following command. On first launch, wait until the database reported a complete initialisation (highlighted in output).</p>


<pre class="wp-block-code" aria-describedby="shcb-language-13" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash shcb-code-table shcb-line-numbers"><span class='shcb-loc'><span><span class="hljs-comment"># only launch mariadb services defined in docker-compose.yml</span>
</span></span><span class='shcb-loc'><span>$ docker-compose up mariadb
</span></span><span class='shcb-loc'><span>Starting frontend-web-development_mariadb_1 ... <span class="hljs-keyword">done</span>
</span></span><span class='shcb-loc'><span>Attaching to frontend-web-development_mariadb_1
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52+00:00 [Note] [Entrypoint]: Entrypoint script <span class="hljs-keyword">for</span> MySQL Server 1:10.5.8+maria~focal started.
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52+00:00 [Note] [Entrypoint]: Switching to dedicated user <span class="hljs-string">'mysql'</span>
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52+00:00 [Note] [Entrypoint]: Entrypoint script <span class="hljs-keyword">for</span> MySQL Server 1:10.5.8+maria~focal started.
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] mysqld (mysqld 10.5.8-MariaDB-1:10.5.8+maria~focal) starting as process 1 ...
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] InnoDB: Using Linux native AIO
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] InnoDB: Uses event mutexes
</span></span><span class='shcb-loc'><span>[...] truncated
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Warning] <span class="hljs-string">'proxies_priv'</span> entry <span class="hljs-string">'@% root@d05a66d49a70'</span> ignored <span class="hljs-keyword">in</span> --skip-name-resolve mode.
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] Reading of all Master_info entries succeeded
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] Added new Master_info <span class="hljs-string">''</span> to <span class="hljs-built_in">hash</span> table
</span></span><mark class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] mysqld: ready <span class="hljs-keyword">for</span> connections.
</span></mark><mark class='shcb-loc'><span>mariadb_1     | Version: <span class="hljs-string">'10.5.8-MariaDB-1:10.5.8+maria~focal'</span>  socket: <span class="hljs-string">'/run/mysqld/mysqld.sock'</span>  port: 3306  mariadb.org binary distribution
</span></mark></code></div><small class="shcb-language" id="shcb-language-13"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 9</strong> : Once database server is ready, exit docker (using <code>Ctrl + C</code>). Then start the full stack. The backend API should notify a successful startup.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-14" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash shcb-code-table shcb-line-numbers"><span class='shcb-loc'><span>$ docker-compose up
</span></span><span class='shcb-loc'><span>Building backend
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>[... truncated]
</span></span><span class='shcb-loc'><span>Successfully built 48950e9da763
</span></span><span class='shcb-loc'><span>Successfully tagged frontend-web-development_backend:latest
</span></span><span class='shcb-loc'><span>WARNING: Image <span class="hljs-keyword">for</span> service backend was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>Starting frontend-web-development_mariadb_1 ... <span class="hljs-keyword">done</span>
</span></span><span class='shcb-loc'><span>Creating frontend-web-development_backend_1    ... <span class="hljs-keyword">done</span>
</span></span><span class='shcb-loc'><span>Creating frontend-web-development_phpmyadmin_1 ... <span class="hljs-keyword">done</span>
</span></span><span class='shcb-loc'><span>Attaching to frontend-web-development_mariadb_1, frontend-web-development_phpmyadmin_1, frontend-web-development_backend_1
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>[... truncated]
</span></span><span class='shcb-loc'><span>mariadb_1     | Version: <span class="hljs-string">'10.5.8-MariaDB-1:10.5.8+maria~focal'</span>  socket: <span class="hljs-string">'/run/mysqld/mysqld.sock'</span>  port: 3306  mariadb.org binary distribution
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>[... truncated]
</span></span><span class='shcb-loc'><span>phpmyadmin_1  | [Sun Jan 24 14:01:37.687410 2021] [core:notice] [pid 1] AH00094: Command line: <span class="hljs-string">'apache2 -D FOREGROUND'</span>
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>[... truncated]
</span></span><span class='shcb-loc'><span>backend_1     | &gt; frontend-web-development@1.0.0 db:prepare:prod /app
</span></span><span class='shcb-loc'><span>backend_1     | &gt; NODE_ENV=<span class="hljs-built_in">test</span> node -e <span class="hljs-string">"require('./build/server/mysql-store').default.rebuildDatabase('prod').then(() =&gt; process.exit()).catch(err =&gt; { console.error(err); process.exit(1) })"</span>
</span></span><span class='shcb-loc'><span>backend_1     | 
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:53.387Z backend:mysql-store Upgrading SQL triggers...
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:53.401Z backend:mysql-store Triggers updated successfully
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 14:01:53 4 [Warning] Aborted connection 4 to db: <span class="hljs-string">'unconnected'</span> user: <span class="hljs-string">'root'</span> host: <span class="hljs-string">'172.24.0.3'</span> (Got an error reading communication packets)
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 14:01:53 5 [Warning] Aborted connection 5 to db: <span class="hljs-string">'cleaningshop'</span> user: <span class="hljs-string">'root'</span> host: <span class="hljs-string">'172.24.0.3'</span> (Got an error reading communication packets)
</span></span><span class='shcb-loc'><span>backend_1     | 
</span></span><span class='shcb-loc'><span>backend_1     | &gt; frontend-web-development@1.0.0 db:prepare:<span class="hljs-built_in">test</span> /app
</span></span><span class='shcb-loc'><span>backend_1     | &gt; NODE_ENV=<span class="hljs-built_in">test</span> node -e <span class="hljs-string">"require('./build/server/mysql-store').default.rebuildDatabase('test').then(() =&gt; process.exit()).catch(err =&gt; { console.error(err); process.exit(1) })"</span>
</span></span><span class='shcb-loc'><span>backend_1     | 
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.288Z backend:mysql-store Upgrading SQL triggers...
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.307Z backend:mysql-store Triggers updated successfully
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.549Z backend:mysql-store Upgrading SQL triggers...
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.577Z backend:mysql-store Triggers updated successfully
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.582Z backend:app App listening on port 8080...
</span></span></code></div><small class="shcb-language" id="shcb-language-14"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>Let’s analyse logs above:</p>



<ul><li>Lines 2 to 7: docker-compose builds the backend using scripts in <code>Dockerfile</code> (more explanation about Dockerfile <a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noreferrer noopener">here</a>).</li><li>Lines 9 to 11: containers are booting.</li><li>Line 15: database reported a complete initialisation.</li><li>Line 18: phpmyadmin reported a complete initialisation.</li><li>Lines 22 and 30: the backend API creates databases and load schema.</li><li>Line 36: the backend API reported a complete initialisation. </li></ul>



<p>You now have 2 locally exposed services you can reach from the browser:</p>



<ul><li>https://thomas-veillard.fr:8080/ for the HTTP API server. </li><li>https://thomas-veillard.fr:8081/ for phpmyadmin, to explore data stored into the DB</li></ul>



<h2>HTTP Server overview</h2>



<p>HTTP server hosts the API and serves static files from <code>../../frontend/dist</code> (path relative to <code>docker-compose.yml</code>. That is why the location relative to <code>frontend</code> project was so important).</p>



<p>If you properly built the angular project and started the web server via docker-compose, you can now reach <code>https://thomas-veillard.fr:8080/</code> in your browser. You will be welcomed with your own frontend application.</p>



<h2>API documentation and playground</h2>



<p>The API is self-documented and up to date. Open it at https://thomas-veillard.fr:8080/docs.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="835" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-1024x835.gif" alt="" class="wp-image-969" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-1024x835.gif 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-300x245.gif 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-768x626.gif 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>API playground and documentation demonstration</figcaption></figure>



<p>During database population, some seeds were generated. These built-in accounts are designed for testing purposes:</p>



<ul><li><strong>Operator</strong> (operator@cleaning.com / seedpass)</li><li><strong>Customer</strong> (customer@cleaning.com / seedpass)</li><li><strong>Employee</strong> (employee@cleaning.com / seedpass)</li></ul>



<div class="exercice" style="padding-bottom: 0; margin-bottom: 1em">
<p><strong>Exercise 10</strong> : Through the playground, manually execute the following scenario:</p>

<code>POST /auth/login</code>
<p>Connect yourself as operator.</p>

<code>GET /api/users/me</code>
<p>Query some information about your own account.</p>

<code>GET /api/users</code>
<p>List all users on the shop. That is only possible because you are operator.</p>

<code>POST /auth/logout</code>
<p>Close your session.</p>

<code>??? find paths and arguments yourself</code>
<p>
Try to call any endpoint behind authentication.<br>
Register yourself as customer using public API.
</p>
</div>



<p class="exercice"><strong>Exercise 11</strong> : Same exercise, but this time you will use <a href="https://www.postman.com/" target="_blank" rel="noreferrer noopener">Postman</a>. Why ? Because the API designer will not always implement a playground&#8230;</p>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/">1. Setup your practical environment</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>4. Using web tools to build something else</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/using-web-technologies-to-build-something-else/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:02:36 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1440</guid>

					<description><![CDATA[<p>For desktops and phones Since front-end technologies were so convenient, developers found ways to reuse web technologies in other contexts. This targets specially desktop and phone app. The idea is always the same: to write an application using HTML/CSS/JS and bundle it inside a webview. Everything related to the browser UI is hidden. The user &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/using-web-technologies-to-build-something-else/" class="more-link">Continuer la lecture de <span class="screen-reader-text">4. Using web tools to build something else</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/using-web-technologies-to-build-something-else/">4. Using web tools to build something else</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>For desktops and phones</h4>



<p>Since front-end technologies were so convenient, developers found ways to reuse web technologies in other contexts. This targets specially desktop and phone app.</p>



<p>The idea is always the same: to write an application using HTML/CSS/JS and bundle it inside a webview. Everything related to the browser UI is hidden. The user only see what the developer wants to show.</p>



<p>Once packaged, the user does not see any difference compared to another software. It installs itself in the same way as native software. On Android, the application can be exported as an APK/AAB file and shipped via Google Play. On iOS, you submit an IPA file to the App Store Connect.</p>



<blockquote class="wp-block-quote"><p>Write once, run everywhere. 🎉</p></blockquote>



<p>This sentence summarises another benefit of sharing your codebase between the website version and the desktop/phone version. You only have a single codebase to maintain, so features are immediately available on all platforms. Finally, you may conditionally enable some features depending on the running environment capabilities.</p>



<p>Users may expect more features in an app that they installed compared to the web version. Effectively, by packaging your application using <code>Electron</code> or <code>Cordova</code>, you got access to advanced features and OS integrations. That is possible because <code>Electron</code> and <code>Cordova</code> trust your code.</p>



<p> Conversely, the browser has to deal with security issues. It always considers the website as mistrusted code running on your computer. It must sandbox and protect itself from it. For that reason, APIs like direct access to filesystems from the website are unavailable. </p>



<h4>For command line and back-end</h4>



<p>Nowadays, Javascript can run outside the browser. The leader platform is Node.js, built on top of the Chromium Javascript engine (V8). Node.js powers various cli tools (including those we will use in this module) and HTTP servers.</p>



<p>For developers, using the same languages for front-end and back-end improve productivity.</p>



<ul><li>There is only a single language to master.</li><li>Your stack is consistent and you may reuse dependencies across front and back.</li><li>You can share code between front and back.</li></ul>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/using-web-technologies-to-build-something-else/">4. Using web tools to build something else</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>3. How rich and interactive is this UI ?</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/how-rich-interactive-and-complex-is-this-ui/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 08:38:14 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1394</guid>

					<description><![CDATA[<p>The layout The « add server » page&#8217;s layout is composed of 4 parts: a header, containing site identity, notification centre and accesses to other parts of the customer portal ; a left menu, to navigate between the cloud portal features ; a content area, where the form takes place ; a floating footer summarizing the delivery. &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/how-rich-interactive-and-complex-is-this-ui/" class="more-link">Continuer la lecture de <span class="screen-reader-text">3. How rich and interactive is this UI ?</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/how-rich-interactive-and-complex-is-this-ui/">3. How rich and interactive is this UI ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-image size-large"><img src="https://thomas-veillard.fr/wp-content/uploads/2021/02/How-rich-can-be-a-web-ui-.gif" alt="" class="wp-image-1395"/><figcaption>The control panel of Hetzner Cloud, which is a nice example of Single Page Application.</figcaption></figure>



<h4>The layout</h4>



<p>The « add server » page&rsquo;s layout is composed of 4 parts:</p>



<ul><li>a header, containing site identity, notification centre and accesses to other parts of the customer portal ;</li><li>a left menu, to navigate between the cloud portal features ;</li><li>a content area, where the form takes place ;</li><li>a floating footer summarizing the delivery.</li></ul>



<h4>The form</h4>



<p>The form itself is highly interactive. Actions available at a step depends on a combination of previous choices. It opens modals containing another embedded form, computes the total price on the client side, prints warnings for misconfigurations, etc. All computations related to content are powered by Javascript.</p>



<h4>The style</h4>



<p>Fonts, colours, backgrounds, gradients, border radiuses, block sizes, margins, paddings, text positioning and so much more are handled by the browser rendering engine for you. </p>



<p>Imagine how complex it could be to round corners and center text of the following block if you had to deal with raw pixels&#8230; But that is so simple with CSS.</p>



<style>
.my-rounded-block {
  background-color: #ffecb8;
  border: 1px solid #795548;
  border-radius: 3px;
  text-align: center;
}
</style>

<p class="my-rounded-block">Example of paragraph with background and rounded border.</p>



<div class="wp-block-columns">
<div class="wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-15" data-shcb-language-name="CSS" data-shcb-language-slug="css"><div><code class="hljs language-css"><span class="hljs-selector-class">.my-rounded-block</span> {
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffecb8</span>;
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#795548</span>;
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;
  <span class="hljs-attribute">text-align</span>: center;
}</code></div><small class="shcb-language" id="shcb-language-15"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">CSS</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">css</span><span class="shcb-language__paren">)</span></small></pre></div>



<div class="wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-16" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-rounded-block"</span>&gt;</span>
  Example of paragraph with background and rounded border.
<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-16"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre></div>
</div>



<h4>Animations</h4>



<p>Building animations from scratch is something difficult. You must write mathematical functions describing the transformation, then compute each frame and render them. Your goal is to achieve 60 images per second, which requires optimisations.</p>



<p>Thanks to CSS3, animations are now easy to build. You just describe an initial and final state, and apply a built-in transformation function. The browser handle the rest. It even selects the best hardware available for the task and does concessions to maintain the framerate.</p>



<p>Animations give feedback to the user. They also make the UI interaction fluid. Some examples:</p>



<ul><li>The colour of a button changes on hover, on focus or on click.</li><li>Newly created elements inside the page are highlighted on append.</li></ul>



<p>This example illustrates perfectly why web technologies are so efficient for UI/UX compared to dinosaurs 🦖. (Hi JAVA and its Swing UI framework !)</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/how-rich-interactive-and-complex-is-this-ui/">3. How rich and interactive is this UI ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>2. Why are web technologies so popular ?</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/why-are-web-technologies-so-popular/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sun, 24 Jan 2021 08:24:00 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1342</guid>

					<description><![CDATA[<p>They are cross-platform. End user just needs a browser. The primary homes of front-end technologies are browsers themselves. Those browsers exist in almost any operating system. That is true for computers (Windows, MacOs, GNU/Linux&#8230;) as for phones and pads (Android, iOS&#8230;). If the end user is running an up-to-date browser, it immediately access all web &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/why-are-web-technologies-so-popular/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Why are web technologies so popular ?</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/why-are-web-technologies-so-popular/">2. Why are web technologies so popular ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>They are cross-platform. End user just needs a browser.</h4>



<p>The primary homes of front-end technologies are browsers themselves. Those browsers exist in almost any operating system. That is true for computers (Windows, MacOs, GNU/Linux&#8230;) as for phones and pads (Android, iOS&#8230;).</p>



<p>If the end user is running an up-to-date browser, it immediately access all web applications published on the Internet.</p>



<h4>They are well known, mature and still evolving.</h4>



<p>The web is not born yesterday. So the community learned from its experience. Nowadays, the web is a good place for standards. Standards ensure your projects will still work in decades if you strictly rely on them.</p>



<p>Have you seen the <a href="http://info.cern.ch/" target="_blank" rel="noreferrer noopener">first website ever built</a> ? It is still online and fully functional because it followed standards.</p>



<p>Of course, the web continues to grow and standards to evolve.</p>



<h4>Building rich and responsive UI is easy.</h4>



<p>The core business of web browsers is to render pages. As you can expect, browsers perform very well at this task.</p>



<p>From the point of view of web developers, you first have to write your content (with HTML). Then, you build the layout and apply styles thanks to CSS. Those two languages are quick and easy to learn. And they are so powerful (specially CSS which handles all the complexity).</p>



<h4>Javascript allows complex interaction inside the browser.</h4>



<p>Javascript comes from the old days of the Web. At this time, HTML and CSS were produced on server. Javascript purpose was to add a bit of dynamicity on the client-side. For example, it allowed:</p>



<ul><li>to animate elements (now replaced by CSS3 animations) ;</li><li>to apply minor changes to the page on user interaction (like showing or hiding a block when the clicks a button).</li></ul>



<p>Last decade, the language and its ecosystem have matured. A lot of frameworks help developers to produce all HTML and CSS using only Javascript. Even when a user clicks a link, the new page is produced and replaced this way.</p>



<blockquote class="wp-block-quote"><p>We call that kind of applications « Single Page Application ».</p></blockquote>



<p>If building and rendering the page can be done on client-side, is there still a place for servers ? It depends on your need. Some tasks, like authentication and authorisation can only run in trusted environments. Some other requires infrastructure, like files and contents sharing.</p>



<h4>Ecosystem is rich of tools</h4>



<p>During this module, you will discover some tools. First of all, your browser includes a lot of utilities like an element inspector, a JavaScript debugger, a network analyser, etc. You will also import and manage dependencies (that contains reusable code) using package managers. And so much more.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/why-are-web-technologies-so-popular/">2. Why are web technologies so popular ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>1. Prerequisites</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/introduction/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sun, 24 Jan 2021 08:23:21 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=884</guid>

					<description><![CDATA[<p>This course is about creating front-end applications, with modern web technologies. You will discover that such a rich environment, learn good practices, develop quality code, write modular code&#8230; Skills This teaching assumes you know the basics of HTML and CSS. If that is not the case, please consider the following resources. They are quick and &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/introduction/" class="more-link">Continuer la lecture de <span class="screen-reader-text">1. Prerequisites</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/introduction/">1. Prerequisites</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>This course is about creating front-end applications, with modern web technologies. You will discover that such a rich environment, learn good practices, develop quality code, write modular code&#8230;</p>



<h4>Skills</h4>



<p>This teaching assumes you know the basics of HTML and CSS. If that is not the case, please consider the following resources. They are quick and basic.</p>



<ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started" target="_blank" rel="noreferrer noopener">Getting started with HTML</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works" target="_blank" rel="noreferrer noopener">How CSS works</a></li></ul>



<h4>Tools</h4>



<p>For end users, Front-end web technologies only require a modern browser. In the same way, developers could use almost any operating system for building apps. Nonetheless, your experience may drastically differ, and some tools harder to install or unavailable.</p>



<p>You are free to use Windows or MacOS. Or you could install a GNU/Linux distribution in a virtual machine. My demonstrations will occur on an Ubuntu system.</p>



<p>Before the first lecture, please:</p>



<ul><li>bring your own computer, you will need it;</li><li>install <a href="https://nodejs.org/en/" target="_blank" rel="noreferrer noopener">Node.js</a>, as it is required for building applications. Use <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer noopener">nvm</a> for installing it;</li><li>install a decent IDE or editor for web development like VSCode or WebStorm;</li></ul>



<p>During practical works, you will install and use much more tools. For convenience, I already packaged some of them and my learning materials using Docker. </p>


<a href=https://docs.google.com/presentation/d/1cjTmJwYxGxT5aW4noNiNxUYFBbvRMG_i9r1tHBjxlFY/edit?usp=sharing target="_blank">
  <div style="display: flex; align-items: center; padding: 1em; border-radius: 3px; border: 1px solid #f5ba16; background: #f7f7f7">
    <div style="margin-right: 0.5em"><img src="/wp-content/uploads/2021/01/google_slide.svg" /></div>
    <div>Open lecture slides</div>
  </div>
</a>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/introduction/">1. Prerequisites</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
