<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Front-end web development &#8211; Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/category/front-end-web-development/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/</link>
	<description>Mes cours et supports pédagogiques pour l&#039;enseignement de l&#039;ingénierie informatique.</description>
	<lastBuildDate>Sat, 03 Apr 2021 06:58:56 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7</generator>
	<item>
		<title>Quizzes</title>
		<link>https://thomas-veillard.fr/front-end-web-development/quizz/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 12 Feb 2021 19:43:27 +0000</pubDate>
				<category><![CDATA[Front-end web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1695</guid>

					<description><![CDATA[<p>These quizzes are designed for in-class animation. Answers are reviewed during lectures. Corrections are not (yet) available. GitThe main (or master) branch for git hf workflow is dedicated to: Single page applicationsWhat produces HTML in an Single Page Application? ComparisonsWhich rows are output?What is the output? DependenciesWhat are the risks inherent to dependency import? Copy &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/quizz/" class="more-link">Continuer la lecture de <span class="screen-reader-text">Quizzes</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/quizz/">Quizzes</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>These quizzes are designed for in-class animation. Answers are reviewed during lectures. Corrections are not (yet) available.</p>


<p><strong>Git</strong><br><a href="https://thomas-veillard.fr/quizz/4b2454cb-64fe-4885-9876-0d905b8333c1/">The main (or master) branch for git hf workflow is dedicated to:</a></p>
<p><strong>Single page applications</strong><br><a href="https://thomas-veillard.fr/quizz/24a77c23-be4b-49bf-a27f-43381047bd08/">What produces HTML in an Single Page Application?</a></p>
<p><strong>Comparisons</strong><br><a href="https://thomas-veillard.fr/quizz/7d1d50c8-22a6-44f5-92c3-ed8430a01519/">Which rows are output?</a><br><a href="https://thomas-veillard.fr/quizz/3f4c00ae-e590-46ad-80f9-9d03f16a0844/">What is the output?</a></p>
<p><strong>Dependencies</strong><br><a href="https://thomas-veillard.fr/quizz/3068fbce-4414-49b5-ac29-e6b1e1f88f99/">What are the risks inherent to dependency import?</a></p>
<p><strong>Copy vs reference</strong><br><a href="https://thomas-veillard.fr/quizz/0c7a0ba2-efc9-42d4-9d2d-3fd4bee2988d/">What is the result ?</a></p>
<p><strong>Object destructuring</strong><br><a href="https://thomas-veillard.fr/quizz/9b4c2b05-1053-41be-a0b5-8f6e3984c0af/">What is the output ?</a></p>
<p><strong>Function arguments</strong><br><a href="https://thomas-veillard.fr/quizz/ef17d3dd-3355-43ee-abad-9821a7c5e2ea/">What is the result of this code?</a></p>
<p><strong>Callbacks</strong><br><a href="https://thomas-veillard.fr/quizz/b4a89b4d-f1e4-4830-a968-77ebb32a83ff/">In what order are the lines executed?</a></p>
<p><strong>Async/await</strong><br><a href="https://thomas-veillard.fr/quizz/e256f6ff-28b8-4713-bad3-b1151b4a8669/">What is the content of result?</a></p>
<p><strong>Mixed syntax &amp; promises</strong><br><a href="https://thomas-veillard.fr/quizz/1e9c9b35-dee4-4045-844c-e20c6327c31c/">Analyze this example</a>.</p>
<p><strong>Arrow functions</strong><br><a href="https://thomas-veillard.fr/quizz/6f2fd75d-9ed3-4652-b447-9d89b1d83567/">What is the output?</a><br><a href="https://thomas-veillard.fr/quizz/6eafa1cb-8389-4ebc-8ad9-e87be0ce722e/">Where is the bug?</a></p>


<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/quizz/">Quizzes</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Project</title>
		<link>https://thomas-veillard.fr/front-end-web-development/the-project/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 09 Feb 2021 07:16:11 +0000</pubDate>
				<category><![CDATA[Front-end web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1576</guid>

					<description><![CDATA[<p>Topic Your goal for this project is to build a client application that leverages publicly available APIs. You can choose as many public API you want. Try to build something new and useful, with a real added value. Rules This is a group work (3 or 4 students per team). Use Angular or React. You &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/the-project/" class="more-link">Continuer la lecture de <span class="screen-reader-text">Project</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/the-project/">Project</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Topic</h4>



<p>Your goal for this project is to build a client application that leverages <a href="https://github.com/public-apis/public-apis" target="_blank" rel="noreferrer noopener">publicly available</a> APIs. You can choose as many public API you want. Try to build something new and useful, with a real added value.</p>



<h4>Rules</h4>



<ul><li>This is a group work (3 or 4 students per team).</li><li>Use Angular or React. You are free to use any library you want.</li><li>Use <a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noreferrer noopener">this</a> git workflow model (at least master and develop branches).</li><li>I will check who commits, and when.</li><li>Document installation steps in README.md.</li></ul>



<p>The same complexity and amount of work than the whole tutorial series is required. But this time, you are not alone anymore.</p>



<h4>README.md</h4>



<p>I will follow steps in your README to build and run your project. For simple front-end projects, it could be really short: (ex. git clone, npm install, ng build).</p>



<p>But if you implemented a backend or have special requirements, they must be explicit. If setup is complex, please provide an install script (targeting GNU/Linux).</p>



<h4>Examples</h4>



<p>Here you have some examples of your peer&rsquo;s projects:</p>



<ul><li>A photo gallery with firebase integration (authentication, file upload to firestore, structured data storage on firebase database) and gifly exploration. This project is more interesting for its technical stack than for its features. </li><li>A browsable index of meals, meals categories, ingredients and recipes using a public database. This application fills a need and may focus on user experience.</li><li>A cryptocurrency wallet application, tracking assets rates, rendering charts&#8230; Typically a project for enthusiasts.</li></ul>



<h4>Delivery</h4>



<p>Your git repository is your delivery. Just share read-only access with me (my Github username is <code>TruffeCendree</code>). 2 deliveries are planned:</p>



<ul><li><strong>On Sunday 21/03/2021 (23h59)</strong> for ungraduated reviews. I want to give you feedback as early as possible, catch issues and then help you during classes.</li><li><strong>On </strong><s>Friday 02/04/2021</s> <strong>Monday 05/04/2021 (23h59)</strong> for the final review before the oral presentation.</li></ul>



<h4>Graduation</h4>



<figure class="wp-block-table is-style-stripes"><table><tbody><tr><td><strong>Criteria</strong></td><td><strong>Points</strong></td></tr><tr><td>Git and workflow</td><td>2 points</td></tr><tr><td>Addressed technical challenges</td><td>3 points</td></tr><tr><td>User experience (UX), user interface (UI)<br><em>Graded by your peers during oral presentation.</em></td><td>5 points</td></tr><tr><td>Code quality, maintenability, bugs&#8230;<br><em>You will receive a detailled code review report.</em></td><td>10 points</td></tr></tbody></table></figure>



<h4>Bonuses</h4>



<ul><li>Host your static website online (ex. Firebase Hosting, render.com, aws S3&#8230;).</li><li>Monitor client side errors in production (ex. Sentry, Rollbar, Stackdriver&#8230;).</li><li>Build your own backend on top of node.js. The same amount of work is still expected for the frontend.</li></ul>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/the-project/">Project</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>3. The booking experience</title>
		<link>https://thomas-veillard.fr/front-end-web-development/practical-works/the-booking-experience/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 09 Feb 2021 09:00:02 +0000</pubDate>
				<category><![CDATA[Front-end web development]]></category>
		<category><![CDATA[Practical works]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2008</guid>

					<description><![CDATA[<p>Learning objectives &#38; expected results During this practical activity, you will build the booking experience and take care of business logic. That is the opportunity to: practice reverse engineering ; be more autonomous than during the last practical work ; build more complex forms than previous login component ; use @Input() and @Output() data bindings &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/the-booking-experience/" class="more-link">Continuer la lecture de <span class="screen-reader-text">3. The booking experience</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/the-booking-experience/">3. The booking experience</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning objectives &amp; expected results</h4>



<p>During this practical activity, you will build the booking experience and take care of business logic.</p>



<p>That is the opportunity to:</p>



<ul><li>practice reverse engineering ;</li><li>be more autonomous than during the last practical work ;</li><li>build more complex forms than previous login component ;</li><li>use <code>@Input()</code> and <code>@Output()</code> data bindings on component boundaries ;</li><li>manage the state of the application and persistence across form steps ;</li><li>train yourself with async http requests and angular services ;</li><li>think about your UI and UX, so it is convenient for customers ;</li><li>use directives such as <code>*ngIf</code> and <code>*ngFor</code>, template variables, etc.</li></ul>



<p>Your booking experience must satisfy the following requirements:</p>



<ol><li>The customer initiates the booking from the home page. It provides the location of the delivery (postal code or city name). This user input is validated against Openstreetmap API and geocoded.</li><li>Geocoded postal address (latitude and longitude) is sent to the server. If zone is covered, the customer goes on next step. Else, an explanation is displayed.</li><li>The customer provides basic information describing the service (start date and time, duration).</li><li>All collected data are sent to the server, which revolves available employees. The user selects one proposal.</li><li>At that time, it may be unauthenticated or unregistered. The user logs in or creates a new customer account. Then it confirms the booking.</li></ol>



<h4>Reverse engineering</h4>



<p>I publicly host a sample frontend at <a href="https://backend.thomas-veillard.fr/" target="_blank" rel="noreferrer noopener">https://backend.thomas-veillard.fr/</a> to help you understanding the booking process and expected result. Your goal is to mimic its behaviour. That said, you will first analyse it (only the booking part). </p>



<p>Please pay attention to changes occurring in the browser URL and to HTTP calls. For example, analysing the home page would give you something like:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-number">1.</span> Customer types <span class="hljs-string">"Villejuif"</span> in input[placeholder=<span class="hljs-string">"Enter your city"</span>].

<span class="hljs-number">2.</span> Starting XHR GET https:<span class="hljs-comment">//nominatim.openstreetmap.org/search?format=json&amp;featuretype=city&amp;countrycodes=fr&amp;q=Villejuif.</span>
   Response contains coordinates of Villejuif (lat: <span class="hljs-string">"48.7921098"</span>, lon: <span class="hljs-string">"2.3633048"</span>).

<span class="hljs-number">3.</span> Customer selects geocoded Villejuif in the autocomplete field.

<span class="hljs-number">4.</span> Starting XHR POST https:<span class="hljs-comment">//backend.thomas-veillard.fr/api/bookings/coverage</span>
   Query body is { latitude: <span class="hljs-number">48.7921098</span>, longitude: <span class="hljs-number">2.3633048</span> }.
   Response is { covered: <span class="hljs-keyword">true</span> }.

<span class="hljs-number">5.</span> The user clicks the <span class="hljs-string">'Book now'</span> button.

<span class="hljs-number">6.</span> Navigation occurs <span class="hljs-keyword">and</span> customer is redirected.
   Old path was /.
   <span class="hljs-keyword">New</span> path is /bookings/<span class="hljs-keyword">new</span>/step1/<span class="hljs-number">48.7921098</span>/<span class="hljs-number">2.3633048</span>.

<span class="hljs-number">7.</span> Etc...</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 1</strong>: Analyse the <strong>full</strong> booking process on demonstration frontend like explained above, starting from the home page to the booking process completion. You will need the <code>Network</code> tab of browser developer tools to track XHR calls. Optionally, you may also track component state changes using Augury browser extension.</p>



<h4>Let&rsquo;s write code !</h4>



<p class="exercice"><strong>Exercise 2</strong>: Start a new feature branch and call it <code>booking-experience</code>.</p>



<p class="exercice"><strong>Exercise 3</strong>: You know more components will be created&#8230; Take a few minutes to reorganise your project, so it looks like the following tree.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">src
 ↳ app
    ↳ decorators         <span class="hljs-comment"># empty for now. Will contain typescript decorators.</span>
    ↳ guards             <span class="hljs-comment"># contains guards for @angular/router.</span>
    ↳ routes             <span class="hljs-comment"># contains components respecting the same tree structure as URL paths.</span>
       ↳ home
       ↳ login
       ↳ profile
    ↳ services           <span class="hljs-comment"># contains angular services.</span>
    ↳ shared             <span class="hljs-comment"># empty for now. Will contain shared and reusable components.</span></code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>

<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/24f0d2ac3d0754605b25769e5ec33d98698163f9/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/24f0d2ac3d0754605b25769e5ec33d98698163f9" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>Home page</h4>



<figure class="wp-block-image size-large"><img loading="lazy" width="1242" height="498" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-input-with-geocoding.gif" alt="" class="wp-image-2038"/><figcaption>The customer enters a city, postal code or postal address, which is geocoded using nominatim API.</figcaption></figure>



<p>I give you some pieces of code that you may reuse. First of all, the <code>GeocodeService</code> can query the <code>nominatim</code> API to search places.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// src/app/services/geocode.service.ts</span>
<span class="hljs-keyword">import</span> { HttpClient } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/common/http'</span>;
<span class="hljs-keyword">import</span> { Injectable } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> NominatimResult {
  display_name: <span class="hljs-built_in">string</span>
  importance: <span class="hljs-built_in">number</span>  
  lat: <span class="hljs-built_in">string</span>
  lon: <span class="hljs-built_in">string</span>
}

<span class="hljs-meta">@Injectable</span>({
  providedIn: <span class="hljs-string">'root'</span>
})
<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> GeocodeService {
  <span class="hljs-keyword">constructor</span> (<span class="hljs-params"><span class="hljs-keyword">private</span> httpClient: HttpClient</span>) {}

  geocodeCity (postalAddress: <span class="hljs-built_in">string</span>, country = <span class="hljs-string">'fr'</span>): NominatimResult[] {
    <span class="hljs-comment">// no API call if input is too short</span>
    <span class="hljs-keyword">if</span> (postalAddress.length &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> [];

    <span class="hljs-comment">// find OpenStreetMap nominatim API documention at https://nominatim.org/release-docs/latest/api/Search/</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.httpClient.get(<span class="hljs-string">`https://nominatim.openstreetmap.org/search?format=json&amp;featuretype=city&amp;countrycodes=<span class="hljs-subst">${country}</span>&amp;q=<span class="hljs-subst">${postalAddress}</span>`</span>).toPromise() <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>;
  }
}
</code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Also, you <strong>must</strong> debounce HTTP calls to OpenStreetMap API. In other words, do not call the geocoding API until the customer stopped writing for 1 second. I provide you ready to use typescript decorator, usable on your callback component method.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// src/app/decorators/debounce.decorator.ts</span>
<span class="hljs-comment">/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was invoked.
 * 
 * See https://blog.bitsrc.io/3-ways-to-debounce-http-requests-in-angular-c407eb165ada
 * 
 * Usage:
 * @Debounce(750)
 * static methodToDebound (args: any) {}
 */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Debounce</span> (<span class="hljs-params">ms: <span class="hljs-built_in">number</span></span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target: <span class="hljs-built_in">any</span>, key: <span class="hljs-built_in">any</span>, descriptor: <span class="hljs-built_in">any</span></span>) </span>{
    <span class="hljs-keyword">const</span> oldFunc = descriptor.value
    <span class="hljs-keyword">const</span> newFunc = debounce(oldFunc, ms)
    descriptor.value = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
      <span class="hljs-keyword">return</span> newFunc.apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>)
    }
  }
}

<span class="hljs-comment">/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was invoked.
 * See more at https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore.
 */</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>&lt;<span class="hljs-title">F</span> <span class="hljs-title">extends</span> <span class="hljs-title">Function</span>&gt;(<span class="hljs-params">func: F, wait: <span class="hljs-built_in">number</span>, immediate = <span class="hljs-literal">false</span></span>): <span class="hljs-title">F</span> </span>{
  <span class="hljs-keyword">let</span> timeout: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span>;

  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-comment">// @ts-ignore</span>
    <span class="hljs-keyword">let</span> context = <span class="hljs-keyword">this</span>, args = <span class="hljs-built_in">arguments</span>;

    <span class="hljs-keyword">if</span> (timeout) clearTimeout(timeout);
    timeout = <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
      timeout = <span class="hljs-literal">null</span>;
      <span class="hljs-keyword">if</span> (!immediate) func.apply(context, args);
    }, wait);

    <span class="hljs-keyword">if</span> (immediate &amp;&amp; !timeout) func.apply(context, args);
  } <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>
}</code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Here an example how to use the decorator.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">class</span> PostalAddressInputComponent {
  <span class="hljs-meta">@Debounce</span>(<span class="hljs-number">1000</span>)
  <span class="hljs-keyword">async</span> searchAddress (rawPostalAddress: <span class="hljs-built_in">string</span>) {
    <span class="hljs-comment">// trigerred 1 time per second max.</span>
    <span class="hljs-comment">// delayed until the method has not been call for 1 second.</span>
  }
}</code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Note <code>@angular/material</code> provides ready to use <a href="https://material.angular.io/components/autocomplete/overview" target="_blank" rel="noreferrer noopener">autocomplete field</a> you may import.</p>



<p class="exercice"><strong>Exercise 4</strong>: Build such autocomplete input (as a reusable component) and use it on the home page. You <strong>must</strong> debounce API calls. Also take a few minutes, so your home page looks more friendly.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/cb4425eb3f2f655548c71609d4ac51c47bc0feec/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/cb4425eb3f2f655548c71609d4ac51c47bc0feec" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<figure class="wp-block-image size-large"><img loading="lazy" width="1231" height="489" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/demo-coverage-check.gif" alt="" class="wp-image-2123"/><figcaption>The home page checks if zone is covered before continuing the booking process. </figcaption></figure>



<p class="exercice"><strong>Exercise 5</strong>: Using the <code>POST /api/bookings/coverage</code> endpoint, check if the customer-entered zone is covered. You should handle at least &lsquo;check in progress&rsquo; and &lsquo;uncovered&rsquo; states.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/83ceb34c503bdc8b3d63c01435e2f910a10f172f/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/83ceb34c503bdc8b3d63c01435e2f910a10f172f" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 6</strong>: When user clicks the &lsquo;Book now!&rsquo; button of the home page, it should be redirected to <code>/bookings/new/step1/:latitude/:longitude</code>. The <code>@angular/router</code> should then load <code>BookingNewStep1Component</code>.</p>



<p>Tips: for your further developments, you could directly access the step2 URL with valid parameters, instead of restarting your tests from the home page. This URL already serialises all parameters you need.</p>



<p>Once the software has acquired delivery city and checked the coverage, the customer goes to the first step of booking form. Inside <code>BookingNewStep1Component</code>, the customer answers some questions:</p>



<ul><li>What would be the date of the intervention?</li><li>For what duration of cleaning?</li><li>From which hour ?</li></ul>



<figure class="wp-block-image size-large"><img loading="lazy" width="995" height="732" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/Demo-step-1-booking.gif" alt="" class="wp-image-2167"/><figcaption>Expected result for BookingNewStep1Component. The customer selects a start date, start time and duration.</figcaption></figure>



<p class="exercice"><strong>Exercise 7</strong>: Implement the <code>BookingNewStep1Component</code> component. Note that I used undocumented <code>mat-calendar</code> for the date picker. On your side, you may simply use <a href="https://material.angular.io/components/datepicker/overview" target="_blank" rel="noreferrer noopener">mat-datepicker</a>.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/bbe39c6fbef58874dd81c71fd0664a8d71f571f2/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/bbe39c6fbef58874dd81c71fd0664a8d71f571f2" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p>Now, you will implement the submit logic and error handler of this step:</p>



<ul><li>The button <code>Find employees</code> should only be visible if the form is fully completed. Else, a message is displayed (e.g. Please select a start date).</li><li>On submit, check at least one employee is available.<ul><li>If not, display an error which stays until the customer touched the form again. The API will always return <code>unavailable</code> for Sunday.</li><li>If any, redirect to the second step.</li></ul></li></ul>



<p>The second step path could be something like:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># pattern of the second step route</span>
/bookings/<span class="hljs-keyword">new</span>/step2/:latitude/:longitude/at/:startDate/:startHour/duration/:duration

<span class="hljs-comment"># example of path instance</span>
/bookings/<span class="hljs-keyword">new</span>/step2/<span class="hljs-number">48.7921098</span>/<span class="hljs-number">48.7921098</span>/at/<span class="hljs-number">2021</span><span class="hljs-number">-03</span><span class="hljs-number">-27</span>/<span class="hljs-number">8</span>/duration/<span class="hljs-number">2</span>

<span class="hljs-comment"># tips: new Date('2021-03-27').toISOString().split('T')[0] === '2021-03-27'</span></code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="1058" height="734" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/Demo-step-1-booking-submit.gif" alt="" class="wp-image-2202"/><figcaption>Expected behaviour for the submit method of step 1. It checks if any employee is available before redirecting to the second step. Else, it prints errors.</figcaption></figure>



<p class="exercice"><strong>Exercise 8</strong>: Implement the submit method of step 1 component.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/55bf37d0a3d8219d16268c91f79d73105dab55ed/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/55bf37d0a3d8219d16268c91f79d73105dab55ed" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/the-booking-experience/">3. The booking experience</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>2. Managing authentication &#038; routing</title>
		<link>https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 09 Feb 2021 09:00:01 +0000</pubDate>
				<category><![CDATA[Front-end web development]]></category>
		<category><![CDATA[Practical works]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1125</guid>

					<description><![CDATA[<p>You will build a basic navigation experience, with login capabilities and authenticated area. This is the opportunity to: create your first feature branch on git ; review the code of someone else pull request ; build components, forms and navigation ; write routing configuration with authorisation guards ; work with async processing and error handlers &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Managing authentication &#038; routing</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/">2. Managing authentication &#038; routing</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>You will build a basic navigation experience, with login capabilities and authenticated area. This is the opportunity to:</p>



<ul><li>create your first feature branch on git ;</li><li>review the code of someone else pull request ;</li><li>build components, forms and navigation ;</li><li>write routing configuration with authorisation guards ;</li><li>work with async processing and error handlers ;</li><li>discover some angular&rsquo;s internals (text interpolation, dependency injection&#8230;).</li></ul>



<h2>Start a feature branch</h2>



<p>In our git workflow, a feature branch contains new code that is still under construction or need a peer review. Once that code seems mature (feature complete and code reviewed), it is merged into the develop branch. Finally, when develop has been well tested, you can create a release and push it to the production.</p>



<p>Of course, the notion of « production » is not applicable to this practical work. But it is appropriate for the project.</p>



<p class="exercice"><strong>Exercise 1</strong>: Start a new feature branch and call it <code>authentication-and-routing</code>. On Github, you should see a branch called <code>feature/authentication-and-routing</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># ensure you are on develop branch.</span>
git checkout develop

<span class="hljs-comment"># create a new local branch, which is even with develop</span>
git checkout -b feature/authentication-<span class="hljs-keyword">and</span>-routing

<span class="hljs-comment"># push it to remote repository</span>
git push --set-upstream origin feature/authentication-<span class="hljs-keyword">and</span>-routing</code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>I encourage you to commit regulary your changes (for example, at the end of each question). You may also reset your workspace to last commit when things go wrong.</p>



<h2>Basic navigation</h2>



<p class="exercice"><strong>Exercise 2</strong>: For this question, find your path using the angular-material <a href="https://material.angular.io/guide/getting-started" target="_blank" rel="noreferrer noopener">getting started guide</a>. Then, import and use the <a href="https://material.angular.io/components/toolbar/overview" target="_blank" rel="noreferrer noopener">mat-toolbar</a> component to display a menu with 3 navigation items (without link). At this step, you can put your code in <code>app.component.html</code>.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="703" height="317" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/image.png" alt="" class="wp-image-1151" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/02/image.png 703w, https://thomas-veillard.fr/wp-content/uploads/2021/02/image-300x135.png 300w" sizes="(max-width: 703px) 100vw, 703px" /><figcaption>The expected result. There is no link yet on &lsquo;home&rsquo;, &lsquo;login&rsquo;&#8230; The item &lsquo;profile&rsquo; is rendered even if the user is not logged. That will change once authentication is ready.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/2520313f41d90c53ca90e510b27b8a0d78679fdf/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/2520313f41d90c53ca90e510b27b8a0d78679fdf" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 3</strong>: Explain the pro and cons of moving the navigation to its own component.</p>



<p>The <code>@angular/cli</code> is able to generate some pieces of code, like a component.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-8" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># generate a new component called 'navigation' and reference it in app.module.ts.</span>
$ ng generate component navigation
CREATE src/app/navigation/navigation.component.css (<span class="hljs-number">0</span> bytes)
CREATE src/app/navigation/navigation.component.html (<span class="hljs-number">25</span> bytes)
CREATE src/app/navigation/navigation.component.ts (<span class="hljs-number">291</span> bytes)
UPDATE src/app/app.module.ts (<span class="hljs-number">684</span> bytes)</code></div><small class="shcb-language" id="shcb-language-8"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 4</strong>: Commit any existing change on git, then generate a new component called <code>navigation</code>. Examine changes made by <code>@angular/cli</code> (you can use git and the output of <code>ng generate</code> command). Finally, move the mat-toolbar into <code>navigation.component</code>. Visually, the result should be identical.</p>


<div class="wp-block-image" style="text-align: center;">
<figure class="size-large"><img loading="lazy" class="wp-image-1162" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/image-1.png" alt="" width="311" height="154"><figcaption>The new component tree with NavigationComponent. Captured with <a href="https://augury.rangle.io/" target="_blank" rel="noreferrer noopener">Augury</a>.</figcaption></figure>
</div>

<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/f9d1bd55c3069418a8d25c28c628c5e7d95112bf/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/f9d1bd55c3069418a8d25c28c628c5e7d95112bf" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 5</strong>: Generate 3 more components using the cli: <code>home</code>, <code>login</code> and <code>profile</code>. Those components do not have to be included in <code>app.component.html</code> yet. Later, we will let <code>@angular/router</code> dynamically include the right component depending on the current path.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/04f07d3630867a0e483288b2bae1a6e12882c8e0/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/04f07d3630867a0e483288b2bae1a6e12882c8e0" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<div class="exercice" style="padding-bottom: 0; margin-bottom: 1em">
<p><strong>Exercise 6</strong>: Implement 3 routes with <code>@angular/router</code>. Each route will render the eponym component.</p>

<ul style="margin-left: 1em;">
<li><code>/</code> will render <code>home.component</code></li>
<li><code>/login</code> will render <code>login.component</code></li>
<li><code>/profile</code> will render <code>profile.component</code></li>
</ul>

<p>You can use this <a href="https://angular.io/guide/router" target="_blank" rel="noopener">guide</a>. Remember that your project was previously generated with routing enabled. You just have to set up routes and use <code>router-outlet</code> in <code>app.component.html</code>.</p>
</div>



<figure class="wp-block-image size-large"><img loading="lazy" width="919" height="381" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-angular-routes-home-login-and-profile.gif" alt="" class="wp-image-1186"/><figcaption>Expected result. The component is dynamically rendered depending on the route.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/d87a674fddbf150030130be8939f2da71a409d08/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/d87a674fddbf150030130be8939f2da71a409d08" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 7</strong>: Add links to your menu items.</p>



<p class="exercice"><strong>Exercise 8</strong>: Did you use <code>&lt;a href="PATH_OR_URL"&gt;&lt;/a&gt;</code> for your links ? Instead of the <code>href</code> HTML attribute, you must use the <code>routerLink</code> directive. Both ways will technically work, but there are major differences. What are they ?</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="919" height="381" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/routerLink-directive-in-action.gif" alt="" class="wp-image-1196"/><figcaption>Expected result. The user can click links in menu to navigate across views.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/419ccbb35fafeecc33a24e403830700c6521cc54/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/419ccbb35fafeecc33a24e403830700c6521cc54" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Login form</h2>



<p>Forms are a major part of most applications. In angular, you have 2 approaches available: template-driven and reactive. I will use template-driven form in my correction, because they are simple and strong-typable. You have an <a href="https://angular.io/guide/forms" target="_blank" rel="noreferrer noopener">example of template-driven forms</a> in the angular documentation.</p>



<p class="exercice"><strong>Exercise 9</strong>: Add a simple login form. When the user clicks on <code>submit</code> button, open a modal with content of inputs (see <a href="https://developer.mozilla.org/fr/docs/Web/API/Window/alert" target="_blank" rel="noreferrer noopener">window.alert</a>). Email and password fields are required to submit the form. If they are missing, the submit button is disabled.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="938" height="371" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-login-form-template.gif" alt="" class="wp-image-1212"/><figcaption>The login form as expected at this step.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/584e834ba044ac2c88b81c8df6f36edeb7eab798/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/584e834ba044ac2c88b81c8df6f36edeb7eab798" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p>Although this is not a design course, we can probably make this form more beautiful. For this we will use some components from <code>angular-material</code> like we did for the toolbar.</p>



<p class="exercice"><strong>Exercise 10</strong>: Improve the look and feel of the login page. Using <code>angular-material</code> is recommended.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="947" height="512" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-login-form-material-design.gif" alt="" class="wp-image-1219"/><figcaption>The result once I used material components and a bit of CSS.</figcaption></figure>



<p>To achieve this look and feel, I used the following modules:</p>



<ul><li><a href="https://material.angular.io/components/card/overview" target="_blank" rel="noreferrer noopener">MatCardModule</a></li><li><a href="https://material.angular.io/components/form-field/overview" target="_blank" rel="noreferrer noopener">MatFormFieldModule</a> &amp; <a href="https://material.angular.io/components/input/overview" target="_blank" rel="noreferrer noopener">MatInputModule</a> (both works together)</li><li><a href="https://material.angular.io/components/button/overview" target="_blank" rel="noreferrer noopener">MatButtonModule</a></li></ul>



<p>Of course, you are free to layout the page and design the UI like you wish. That is just an example.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="947" height="804" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/login-form-responsive.gif" alt="" class="wp-image-1222"/><figcaption>Bonus: use <a href="https://css-tricks.com/css-media-queries/" target="_blank" rel="noreferrer noopener">CSS media queries</a> to make your form responsive. Your browser includes developers tools simulating phones and pads. They are useful to test your media queries.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/3ad2dcdb56ac6c87d48081cd9bb73f88513a07f7/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/3ad2dcdb56ac6c87d48081cd9bb73f88513a07f7" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p>The same way we prefer <code>routerLink</code> over <code>href</code> because it does not reload the <code>Single Page Application</code>, you should use the <code>@angular/router</code> from your typescript controller (ex. from your submit method in <code>LoginComponent</code>). Here an example:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-9" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;
<span class="hljs-keyword">import</span> { Router } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/router'</span>;

<span class="hljs-meta">@Component</span>({
  selector: <span class="hljs-string">'app-login'</span>,
  templateUrl: <span class="hljs-string">'./login.component.html'</span>,
  styleUrls: [<span class="hljs-string">'./login.component.css'</span>]
})
<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> LoginComponent {
  <span class="hljs-keyword">constructor</span> (<span class="hljs-params"><span class="hljs-keyword">private</span> router: Router</span>) {}

  <span class="hljs-keyword">async</span> submit () {
    <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.router.navigateByUrl(<span class="hljs-string">'/profile'</span>);
  }
}</code></div><small class="shcb-language" id="shcb-language-9"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>

<div class="exercice" style="margin-bottom: 1em;">
<p><strong>Exercise 11</strong>: This example is rich of typescript and angular features. Let&rsquo;s analyse it.</p>
<ul style="margin-left: 1em; margin-bottom: 0;">
<li>How many instance attributes has the <code>LoginComponent</code> class ?</li>
<li>Why is the visibility of <code>router</code> attribute restricted to <code>private</code> ?</li>
<li>Angular detects the class constructor requires an instance of <code>Router</code>. When it instantiates the <code>LoginComponent</code>, it will provide an instance of <code>Router</code>. Take a look at <a href="https://angular.io/guide/dependency-injection" target="_blank" rel="noopener">Angular&rsquo;s dependency injection</a>.</li>
<li><code>@Component</code> is a <a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noopener">decorator</a>. Although it is still a typescript experimental feature, Angular heavily relies on it.</li>
</ul>
</div>


<p>On submit, the form should send credentials to the server (using built-in <code>HttpService</code>). Then, your <code>submit</code> method will deal with the server&rsquo;s response. On success, the user will be redirected to <code>/profile</code>. Finally, he should be notified for any error that occurred.</p>



<p>Remember you have the documentation and playground of API. Also do not forget that calling the server is an <code>async</code> task.</p>



<p class="exercice"><strong>Exercise 12</strong>: Implement the submit method as specified above. For the first iteration, use <code>window.alert</code> to report errors.</p>



<p class="exercice"><strong>Exercise 13</strong>: Take a tour at <a href="https://angular.io/guide/template-syntax" target="_blank" rel="noreferrer noopener">template syntax guide</a>. For this question, you will need <code>text interpolation</code> and <code>*ngIf</code>. Then, report errors in the template itself.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="939" height="518" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/submit-error-handler-in-tempalte.gif" alt="" class="wp-image-1267"/><figcaption>Demonstration of error handler (errors are printed in the template using text interpolation and *ngIf directive).</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/9f6645b9cf8ca31cdd4996e439ab68d27ef87074/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/9f6645b9cf8ca31cdd4996e439ab68d27ef87074" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Using backend type definitions</h2>



<p>Front-end and back-end share some technologies, including the Typescript language. The front-end can benefit from back-end type definition exported by the compiler. You can <a href="https://backend.thomas-veillard.fr/assets/typings.zip" target="_blank" rel="noreferrer noopener">download latest definitions</a> from the backend server.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-10" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># content of the typings.zip archive.</span>

<span class="hljs-comment"># these files contain type definitions of parameters and results of API routes</span>
./dist-typings/routes/auth/post.login.interfaces.d.ts
./dist-typings/routes/api/bookings/post.coverage.interfaces.d.ts
./dist-typings/routes/api/bookings/post.proposals.interfaces.d.ts

<span class="hljs-comment"># these files describe the models</span>
./dist-typings/models/delivery.d.ts
./dist-typings/models/user.d.ts
./dist-typings/models/booking.d.ts
./dist-typings/models/employee-information.d.ts</code></div><small class="shcb-language" id="shcb-language-10"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>Here a simple example of type definition for <code>POST /auth/login</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-11" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">/* ./dist-typings/routes/auth/post.login.interfaces.d.ts */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> Auth$LoginParams {
    email: <span class="hljs-built_in">string</span>;
    password: <span class="hljs-built_in">string</span>;
}</code></div><small class="shcb-language" id="shcb-language-11"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Those definitions are up to date with the back-end implementation, since they are derived from it. If any change in the backend is incompatible with the front-end usage, the typescript compiler catches it.</p>



<p>To use those definitions with angular, please unzip the archive under the <code>src</code> folder.</p>



<p> </p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1273" height="767" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/Demo-typings.gif" alt="" class="wp-image-2152"/><figcaption>How to use my back-end type definitions in Angular to add strong types on HTTP calls.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/0e5a4c0075f266ecc3f74016038887fa01c5cd21/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/0e5a4c0075f266ecc3f74016038887fa01c5cd21" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Using services</h2>



<p>Because of the single responsibility principle, components should not fetch data or query the server themselves. That is the responsibility of <a href="https://angular.io/tutorial/toh-pt4" target="_blank" rel="noreferrer noopener">services</a>. This allows testing the behaviour of components by mocking the services it uses.</p>



<p>Services are singleton that persists until the end of the navigation. On their side, components are destroyed as soon as they are detached from the component tree (aka. not used anymore). You can store some state inside the component as long you do not need them outside. Else, you should use services.</p>



<p class="exercice"><strong>Exercise 14</strong>: Using the <code>@angular/cli</code>, generate <code>me.service.ts</code> and implement <code>resolve</code>, <code>login</code> and <code>logout</code> methods. Finally, update accordly the <code>LoginComponent</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-12" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { Auth$LoginParams } <span class="hljs-keyword">from</span> <span class="hljs-string">'src/dist-typings/routes/auth/post.login.interfaces'</span>;
<span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">'src/dist-typings/models/user'</span>;

<span class="hljs-keyword">interface</span> IMeService {
  me: User

  <span class="hljs-comment">/**
   * On first call, retrieve the current user identity on /api/users/me.
   * On following calls, use a cached reference (this.me).
   * Returns Promise&lt;User&gt; if logged.
   * Returns Promise&lt;null&gt; otherwise.
   */</span>
  resolve: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;User | <span class="hljs-literal">null</span>&gt;

  <span class="hljs-comment">/**
   * Sends credentials against /auth/login.
   * Throws HttpErrorResponse in case of failure.
   * Returns Promise&lt;void&gt; if success.
   */</span>
  login: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-params">credentials</span>: <span class="hljs-params">Auth</span>$<span class="hljs-params">LoginParams</span></span>) =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt;

  <span class="hljs-comment">/**
   * Sends credentials against /auth/logout.
   * Throws HttpErrorResponse in case of failure.
   * Returns Promise&lt;void&gt; if success.
   */</span>
  logout: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt;
}</code></div><small class="shcb-language" id="shcb-language-12"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>

<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/a3803b0dcef7fd9884ab7eb667db81f32f986e17/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/a3803b0dcef7fd9884ab7eb667db81f32f986e17" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Routing &amp; authentication</h2>



<p>At this step, the application suffers a major bug. It is not aware of the current user session.</p>



<ul><li>The login and profile links are always visible.</li><li>The login form is always available, even for logged users.</li><li>The profile page is accessible without session.</li></ul>



<p>This is because the <code>LoginComponent</code> state is destroyed when the user is redirected. We need to store current user identity somewhere it will persist during navigation. That is the purpose of <a href="https://angular.io/tutorial/toh-pt4" target="_blank" rel="noreferrer noopener">Angular Services</a> (among other things like fetching data). Also, this identity should be retrieved from the server via XHR request on browser page reload.</p>



<h4>The login and profile links are always visible</h4>



<p>Let&rsquo;s start by fixing the first issue. <code>@angular/router</code> can resolve async data from a service when a route is triggered. These data are provided to components by injecting the <code>ActivatedRoute</code> service. Here <a href="https://angular.io/api/router/Resolve" target="_blank" rel="noreferrer noopener">an example</a>.</p>



<p>Hopefully, the <code>MeService</code> on which you will rely is ready. It implements an async method <code>resolve()</code> that returns the current user identity. So it is a valid resolver for <code>@angular.router</code>.</p>



<p>You have to change your routes, so they look like:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-13" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript">  { path: <span class="hljs-string">''</span>, component: HomeComponent, resolve: { me: MeService } },
  { path: <span class="hljs-string">'login'</span>, component: LoginComponent, resolve: { me: MeService } },
  { path: <span class="hljs-string">'profile'</span>, component: ProfileComponent, resolve: { me: MeService } }</code></div><small class="shcb-language" id="shcb-language-13"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Now, components scoped inside the <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>  can access the <code>me</code> property through <code>ActivatedRoute</code> service injection.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-14" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> NavigationComponent {
  <span class="hljs-comment">// once initialized, you can use it to dynamically adapt the navigation template.</span>
  me: User;

  <span class="hljs-keyword">constructor</span> (<span class="hljs-params">activatedRoute: ActivatedRoute</span>) {
    <span class="hljs-comment">// When the NavigationComponent is mounted, the MeService has already been resolved.</span>
    <span class="hljs-keyword">this</span>.me = activatedRoute.snapshot.data.me;
  }
}</code></div><small class="shcb-language" id="shcb-language-14"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>For some reason, <code>ActivatedRoute</code> injection behaves properly only inside the <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>. At this step, you include <code>app-navigation</code> in <code>app.component.html</code>. You must move it to <code>home-component</code>, <code>login-component</code>&#8230;</p>



<p class="exercice"><strong>Exercise 15</strong>: Use  <code>MeService</code> to resolve current user identity on all routes like explained above. Then,  conditionally show or hide the login and profile links depending on resolved (or unresolved) session.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="927" height="502" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-dynamic-navigation-items.gif" alt="" class="wp-image-1640"/><figcaption>Expected result: the « login » link is visible until the user logs in. Then, the profile link should be displayed.</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="927" height="502" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-dynamic-navigation-items-on-reload.gif" alt="" class="wp-image-1642"/><figcaption>The user identity is fetched using MeService when a route is triggered. So, it should retrieve current session even after a browser reload.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/9d5075597a424d82a3e81363bab1445243369adb/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/9d5075597a424d82a3e81363bab1445243369adb" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>The login form is always available, even for logged users.</h4>



<p><a href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/" target="_blank" rel="noreferrer noopener">Angular Guards</a> execute codes when a route is triggered. You already experienced resolvers that are useful to mount components once they fetched data from the API. This time, you need a <code>CanActivate</code> guard.</p>


<pre class="wp-block-code"><div><code class="hljs">ng generate guard unauthenticated
? Which interfaces would you like to implement? CanActivate
CREATE src/app/unauthenticated.guard.spec.ts (386 bytes)
CREATE src/app/unauthenticated.guard.ts (468 bytes)</code></div></pre>


<p class="exercice"><strong>Exercise 16</strong>: Implement <code>UnauthenticatedGuard#canActivate()</code> method. It returns a <code>UrlTree</code> redirecting to <code>/profile</code> if user is already logged. Else, it allows activation of <code>/login</code>.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/5460e9ffa5eaeb2c6ac470ffbd2916d0fef6b3ee/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/5460e9ffa5eaeb2c6ac470ffbd2916d0fef6b3ee" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>The profile page is accessible without session.</h4>



<p class="exercice"><strong>Exercise 17</strong>: Implement <code>AuthenticatedGuard#canActivate()</code> method for <code>/profile</code>.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/bf79236edb6480168294c9fedc9816d08fc810e8/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/bf79236edb6480168294c9fedc9816d08fc810e8" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>The final touch</h2>



<p class="exercice"><strong>Exercise 18</strong>: A logout button would be great. Add it to the navigation. Optionally, you may import an icon library like <a href="https://fontawesome.com/" target="_blank" rel="noreferrer noopener">FontAwesome</a> (see <a href="https://www.npmjs.com/package/@fortawesome/angular-fontawesome" target="_blank" rel="noreferrer noopener">package for angular</a>).</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="934" height="511" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-logout-button-with-fontawesome-and-mattooltip.gif" alt="" class="wp-image-1750"/><figcaption>A simple logout button using <a href="https://www.npmjs.com/package/@fortawesome/angular-fontawesome" target="_blank" rel="noreferrer noopener">FontAwesome</a>, <a href="https://material.angular.io/components/button/overview" target="_blank" rel="noreferrer noopener">MatButton</a> and <a href="https://material.angular.io/components/tooltip/overview" target="_blank" rel="noreferrer noopener">MatTooltip</a>.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/da4ce36840a24c86d5cfb79d6ab0844e9471e9c8/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/da4ce36840a24c86d5cfb79d6ab0844e9471e9c8" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Pull Request &amp; code review</h2>



<p>Each of you will add another student as a collaborator of your git repository.</p>



<p>Then, create a Pull Request for merging <code>feature/authentication-and-routing</code> into <code>develop</code>. Your pair reviews the pull request and let comments.</p>



<p>Once the code is reviewed, merge your pull request on Github and return to develop branch.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/">2. Managing authentication &#038; routing</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>1. Setup your practical environment</title>
		<link>https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 09 Feb 2021 09:00:00 +0000</pubDate>
				<category><![CDATA[Front-end web development]]></category>
		<category><![CDATA[Practical works]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=897</guid>

					<description><![CDATA[<p>At the end of this practical works series, you will have built the front-end of a cleaning booking service. The back-end is provided. During this first seance, you will: install the necessary tools (git, node&#8230;) ; setup, build and run your angular application ; access to the back-end API documentation and interact manually with it &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/" class="more-link">Continuer la lecture de <span class="screen-reader-text">1. Setup your practical environment</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/">1. Setup your practical environment</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>At the end of this practical works series, you will have built the front-end of a cleaning booking service. The back-end is provided.</p>



<p>During this first seance, you will:</p>



<ul><li>install the necessary tools (git, node&#8230;) ;</li><li>setup, build and run your angular application ;</li><li>access to the back-end API documentation and interact manually with it ;</li><li>commit that angular project on git and push it to Github ;</li><li>push your code to Cloudflare Page.</li></ul>



<h3>Required software installation</h3>



<h4>Git</h4>



<p><a href="https://git-scm.com/" target="_blank" rel="noreferrer noopener">Git</a> is a decentralised source version manager. A git repository stores the source code of a project and any of its changes. Typically, a contributor writes some code on its side. Once it has completed its task, it commits the changes (with a message) and push it to the remote repositories. Other contributors can update their base. Nowadays, teams centralise repositories hosting on SaaS platforms like Github and Gitlab.</p>



<p>During the lecture, I expressed you follow the <a href="https://datasift.github.io/gitflow/IntroducingGitFlow.html" target="_blank" rel="noreferrer noopener">gitflow</a> workflow. Take the time to understand it. In substance:</p>



<ul><li>All the code on master is designed for production.</li><li>The code for next release is on develop.</li><li>When your start a feature, you should open a feature branch.</li></ul>



<p>Of course, you also need a Github (or Gitlab) account.</p>



<p class="exercice"><strong>Exercise 1</strong> : Install git on your machine. You should at least have the git command working. Test it with <code>git --version</code> for example.</p>



<h4>Node.js &amp; npm</h4>



<p><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer noopener">Node.js</a> is a platform that runs Javascript code outside the browser. It makes possible to write server applications in Javascript, allowing developers to use the same technologies for front and back. The back-end you will interface with is running on node.js.</p>



<p>But here we are in front-end module. We are interested in node.js because it powers most tools we will use. Some of them are even shipped with the node installer. Node Package Manager (npm) is one of them. It manages dependencies of your project and installs cli softwares written for node.</p>



<p class="exercice"><strong>Exercise 2</strong> : Install node.js. If installation successed, both commands <code>node --version</code> and <code>npm --version</code> should work. It is recommended you use the <code>Node Command Prompt</code>.</p>



<h4>Angular</h4>



<p><a href="https://angular.io/" target="_blank" rel="noreferrer noopener">Angular</a> is a full-featured framework you will use for building your front application. Most actions, such as generating projects or components have been automatised in the « cli » tool.</p>



<p>A single command written in a terminal (Powershell or Node Command Prompt for Windows) do the job. Ensure node is installed first. We also install <a href="https://eslint.org/" target="_blank" rel="noreferrer noopener">eslint</a>, which ensure coding conventions are applied across codebase.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-15" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># the following command install angular cli and required dependencies globally. They provide the ng command.</span>
npm i -g @angular/cli @angular-devkit/core @angular-devkit/schematics @angular-eslint/schematics</code></div><small class="shcb-language" id="shcb-language-15"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 3</strong> : Install <code>@angular/cli</code> according to the previous procedure. Then test it works with <code>ng version</code>. For everything related <code>node</code>, <code>npm</code> and <code>ng</code>, I recommend you use the <code>Node command prompt</code>.</p>



<h3>Setup the angular project</h3>



<p>At the end of this step, your workspace should match the following folder hierarchy. </p>


<pre class="wp-block-code" aria-describedby="shcb-language-16" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">frontend                       <span class="hljs-comment"># angular projet (generated using @angular/cli)</span>
 ↳ dist                        <span class="hljs-comment"># the folder containing your bundled app. Only exists after running `ng build` command.</span>
 ↳ node_modules                <span class="hljs-comment"># the folder containing local dependencies. See package.json file and npm command for more info.</span>
 ↳ src                         <span class="hljs-comment"># source code (HTML, CSS, TS). It includes components, services, etc.</span>
 ↳ angular.json                <span class="hljs-comment"># @angular/cli configuration</span>
 ↳ package.json                <span class="hljs-comment"># npm configuration, primary used for installing dependencies</span>
 ↳ tsconfig.json               <span class="hljs-comment"># typescript configuration, where are defined target, enabled syntax and type checking features.</span>
 ↳ .eslintrc.json              <span class="hljs-comment"># eslint configuration, where you set linter rules.</span></code></div><small class="shcb-language" id="shcb-language-16"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>Angular project&rsquo;s structure is standard (thanks to @angular/cli). For more information about it, please refer to <a href="https://angular.io/guide/file-structure" target="_blank" rel="noreferrer noopener">official documentation</a>.</p>



<h4>Generate the angular project</h4>



<p class="exercice"><strong>Exercise 4</strong> : Generating such project is easy. Just run the following command in a <code>Node Command Prompt</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-17" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># creates a new project with angular router enabled</span>
ng new --routing --strict --collection=@angular-eslint/schematics frontend

<span class="hljs-comment"># enter the 'frontend' folder</span>
<span class="hljs-built_in">cd</span> frontend</code></div><small class="shcb-language" id="shcb-language-17"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>The previous commands enabled the<code>:</code></p>



<ul><li><code>angular/router</code>, with argument <code>--routing</code> that lets our angular app overriding and intercepting the browser URLs through the <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" target="_blank" rel="noreferrer noopener">HTML5 History API</a>.</li><li>the strict mode of typescript with <code>--strict</code> argument. Among other things, Typescript will expect to know the type of each variable, so it can enforce safety checks. See <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noreferrer noopener">typescript reference</a> for more info.</li><li><code>eslint</code> support, with rules recommended by the angular community. Linter&rsquo;s objectives is to ensure codebase consistency across the team and collaborator turnover. It sets guidelines, detects some bad coding patterns, etc.</li></ul>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/5444790f18c5e943fd9e6202c677b0db943e8ce0/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/5444790f18c5e943fd9e6202c677b0db943e8ce0" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>Configure your editor</h4>



<p>If you are using VSCode, you will probably appreciate those extensions:</p>



<ul><li>Angular Language Service (type inference in template)</li><li>Eslint checks that conventions are correctly applied</li><li>Gitlens (optional) for better git experience</li></ul>



<h4>Run your app</h4>



<p>Once your project is generated, it is time to run it. <code>ng serve</code> incrementaly compile your project and reload on source change. It also starts an HTTP server on port 4200.</p>



<p class="exercice"><strong>Exercise 5</strong> : Serve your app and open it in your favourite browser.</p>



<p>Tips: always start your browser development tool and keep track of the console tab. If there is an error at runtime, that is the place to check.</p>



<p class="exercice"><strong>Exercise 6</strong> : Document yourself on the differences between <code>ng serve</code> and <code>ng build</code>.</p>



<h4>Compare built application with various targets</h4>



<p>The following commands build your app. Many other parameters are available to customise the build process. This is just an overview of more useful.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-18" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">ng build          <span class="hljs-comment"># build the app for development, easy to debug in the browser and heavy bundle size.</span>
ng build --prod   <span class="hljs-comment"># build the app for production. A lot of optimisations are processed, reducing bundle size.</span>
ng build --watch  <span class="hljs-comment"># incrementally rebuild the app on each source code change (faster subsequent builds).</span></code></div><small class="shcb-language" id="shcb-language-18"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>I provided a sample output of the <code>ng build</code> command. It emitted its output under <code>dist/frontend</code> folder. Let&rsquo;s analyse it!</p>


<pre class="wp-block-code" aria-describedby="shcb-language-19" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">$ ng build <span class="hljs-comment"># must be run in frontend folder                                                        </span>
✔ Browser application bundle generation complete.
✔ Copying assets complete.
✔ Index html generation complete.

Initial Chunk Files | Names         |      Size
vendor.js           | vendor        |   <span class="hljs-number">2.70</span> MB
polyfills.js        | polyfills     | <span class="hljs-number">127.61</span> kB
main.js             | main          |  <span class="hljs-number">20.85</span> kB
runtime.js          | runtime       |   <span class="hljs-number">6.15</span> kB
styles.css          | styles        | <span class="hljs-number">119</span> bytes

                    | Initial Total |   <span class="hljs-number">2.85</span> MB

Build at: <span class="hljs-number">2021</span><span class="hljs-number">-01</span><span class="hljs-number">-30</span>T08:<span class="hljs-number">46</span>:<span class="hljs-number">07.013</span>Z - Hash: <span class="hljs-number">2</span>b7174e3c646073c60a9 - Time: <span class="hljs-number">6285</span>ms</code></div><small class="shcb-language" id="shcb-language-19"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 7</strong> : What is a bundle ? How does it differ from the source code?</p>



<p class="exercice"><strong>Exercise 8</strong> : <code>.map.js</code> files have been emitted. What is the purpose of these map files?</p>



<p class="exercice"><strong>Exercise 9</strong> : Can you spot some differences between <code>ng build</code> and <code>ng build --prod</code>?</p>



<p class="exercice"><strong>Exercise 10</strong> : What is a javascript polyfill?</p>



<h4>Commit your code and push it to Github</h4>



<p class="exercice"><strong>Exercise 11</strong> : Register yourself on Github. Then create a private git repository (for simplicity, <strong>do not create any file such as <code>README.md</code></strong> while initialising the github repository). Finally push all your changes to Github. </p>



<p>The <code>ng new</code> command already initialised a local git repository. If you have any pending change, you have to <code>commit</code> them. A commit validates and stores a list of changes (files created, updates&#8230;) and a message describing those changes. </p>


<pre class="wp-block-code" aria-describedby="shcb-language-20" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># list all changes currently not committed. Check if you see some "untracked files" that need to be persisted.</span>
git status

<span class="hljs-comment"># you probably want to commit new files in your repository.</span>
<span class="hljs-comment"># git add accepts a list of files or folder.</span>
<span class="hljs-comment"># '.' designates the current directory.</span>
git add .

<span class="hljs-comment"># commit every pending change with a message</span>
git commit -a -m <span class="hljs-string">"configure linter and typescript"</span>

<span class="hljs-comment"># commands extracted from the Github guide to push commits to remote</span>
<span class="hljs-comment"># for the first time (do not forget to replace {UNDER BRACKETS} variables).</span>
git remote add origin https:<span class="hljs-comment">//github.com/{GITHUB_USERNAME}/{REPOSITORY_NAME}.git</span>
git branch -M master
git push -u origin master</code></div><small class="shcb-language" id="shcb-language-20"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="905" height="637" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-github-repository-exploration.gif" alt="" class="wp-image-1074"/><figcaption>At this step, your code is on Github. You can explore tracked files, show commit history, list changes in a particular commit, and so much more !</figcaption></figure>



<h4>Gitflow workflow</h4>



<p>All the code is currently committed on master branch. In the GitFlow workflow, the master branch is dedicated to the production code only.</p>



<p>This TPs series will use feature branches, develop and master. Each time you start a new feature (ex. adding authentification), you will start a feature branch. Once you completed your changes, open a pull request on github and merge the code to develop. When the code on develop is well tested, it can be merged on master.</p>



<p class="exercice"><strong>Exercise 12</strong> : Create a develop branch and push it to remote. Both master and develop branch should be visible in Github. The develop branch should be even with master.</p>



<h2>Play with the backend</h2>



<p>Remember: you are building the frontend of a cleaning shop service. I provide you a simple backend for that. It is hosted under:</p>



<p class="has-text-align-center"><em><a href="https://backend.thomas-veillard.fr/" target="_blank" rel="noreferrer noopener">https://backend.thomas-veillard.fr/</a></em></p>



<p>For your information, the code powering the backend is <a href="https://github.com/TruffeCendree/learning-materials/tree/master/frontend-web-development" target="_blank" rel="noreferrer noopener">publicly available</a>.</p>



<h4>API documentation and playground</h4>



<p>The API is self-documented and up to date. Open it at <a href="https://backend.thomas-veillard.fr/docs" target="_blank" rel="noreferrer noopener">https://backend.thomas-veillard.fr/docs</a>.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="835" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-1024x835.gif" alt="" class="wp-image-969" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-1024x835.gif 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-300x245.gif 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-768x626.gif 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>API playground and documentation demonstration</figcaption></figure>



<p>During database population, some seeds were generated. These built-in accounts are designed for testing purposes:</p>



<ul><li><strong>Operator</strong> (operator@cleaning.com / seedpass)</li><li><strong>Customer</strong> (customer@cleaning.com / seedpass)</li><li><strong>Employee</strong> (employee@cleaning.com / seedpass)</li></ul>



<div class="exercice" style="padding-bottom: 0; margin-bottom: 1em">
<p><strong>Exercise 10</strong> : Through the playground, manually execute the following scenario:</p>

<code>POST /auth/login</code>
<p>Connect yourself as operator.</p>

<code>GET /api/users/me</code>
<p>Query some information about your own account.</p>

<code>GET /api/users</code>
<p>List all users on the shop. That is only possible because you are an operator.</p>

<code>POST /auth/logout</code>
<p>Close your session.</p>

<code>??? find paths and arguments yourself</code>
<p>
Try to call any endpoint behind authentication.<br>
Register yourself as customer using public API.
</p>
</div>



<p class="exercice"><strong>Exercise 13</strong> : Same exercise, but this time you will use <a href="https://www.postman.com/" target="_blank" rel="noreferrer noopener">Postman</a>. This way, you are ready to test any kind of API over HTTP.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/">1. Setup your practical environment</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>10. JavaScript: coercion &#038; comparison</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/10-fast-tour-of-javascript-coercion-comparison/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:41 +0000</pubDate>
				<category><![CDATA[Front-end web development]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2376</guid>

					<description><![CDATA[<p>This post focus on the difference between ==, !=, === and !== operators. All of them are equality (or difference) comparison operator. Automatic type coercion with == and != a == b returns true if a and b are equal after type coercion. a != b returns true if a and b are different after &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/10-fast-tour-of-javascript-coercion-comparison/" class="more-link">Continuer la lecture de <span class="screen-reader-text">10. JavaScript: coercion &#038; comparison</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/10-fast-tour-of-javascript-coercion-comparison/">10. JavaScript: coercion &#038; comparison</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>This post focus on the difference between <code>==</code>, <code>!=</code>, <code>===</code> and <code>!==</code> operators. All of them are equality (or difference) comparison operator.</p>



<h4>Automatic type coercion with <code>==</code> and <code>!=</code></h4>



<ul><li><code>a == b</code> returns <code>true</code> if a and b are equal after type coercion.</li><li><code>a != b</code> returns <code>true</code> if a and b are different after type coercion.</li></ul>


<pre class="wp-block-code" aria-describedby="shcb-language-21" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> == <span class="hljs-number">1</span>); <span class="hljs-comment">// true</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> == <span class="hljs-number">2</span>); <span class="hljs-comment">// false</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'1'</span> == <span class="hljs-string">'1'</span>); <span class="hljs-comment">// true</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'1'</span> == <span class="hljs-string">'2'</span>); <span class="hljs-comment">// false</span></code></div><small class="shcb-language" id="shcb-language-21"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Until that point, it looks basic. But what appends when comparing mixed types? The automatic type coercion mechanism dynamically casts operands before comparing them.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-22" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> == <span class="hljs-string">'1'</span>); <span class="hljs-comment">// true, internally compares 1 == 1</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> == <span class="hljs-string">'2'</span>); <span class="hljs-comment">// false, internally compares 1 == 2</span></code></div><small class="shcb-language" id="shcb-language-22"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>The complexity of the truth table is evidence that the <code>weak equality operator</code> (aka <code>==</code>) is error-prone. </p>



<figure class="wp-block-image size-large"><img loading="lazy" width="674" height="674" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for-.png" alt="" class="wp-image-2395" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for-.png 674w, https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for--300x300.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for--150x150.png 150w" sizes="(max-width: 674px) 100vw, 674px" /><figcaption>Truth table of the <code>==</code> operator.</figcaption></figure>



<h4>Strict equality operator</h4>



<p>For that reason, it is a good practice to prefer the <code>strong type equality operator</code> (aka. <code>===</code>). This one works a more logical way.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-23" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> === <span class="hljs-number">1</span>); <span class="hljs-comment">// true</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> === <span class="hljs-number">2</span>); <span class="hljs-comment">// false</span>

<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> === <span class="hljs-string">'1'</span>); <span class="hljs-comment">// false, number is not string</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> === <span class="hljs-string">'2'</span>); <span class="hljs-comment">// false, number is not string</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> !== <span class="hljs-string">'1'</span>); <span class="hljs-comment">// true, number is not string</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> !== <span class="hljs-string">'2'</span>); <span class="hljs-comment">// true, number is not string</span></code></div><small class="shcb-language" id="shcb-language-23"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="666" height="657" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for-1-1.png" alt="" class="wp-image-2396" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for-1-1.png 666w, https://thomas-veillard.fr/wp-content/uploads/2021/03/truth-table-for-1-1-300x296.png 300w" sizes="(max-width: 666px) 100vw, 666px" /><figcaption>Truth table of <code>===</code> operator, which is more logical than <code>==</code>.</figcaption></figure>



<p>Except when you are aware of and you need type coercion,<strong> you should prefer the <code>===</code> operator over <code>==</code>.</strong></p>



<h4>Automatic type coercion with other operators</h4>



<p>The type coercion works with any numerical comparison:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-24" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// all these expressions are true (1 is greater than 0).</span>
<span class="hljs-string">'1'</span> &gt; <span class="hljs-number">0</span>    <span class="hljs-comment">// left operand could be a string</span>
<span class="hljs-number">1</span> &gt; <span class="hljs-string">'0'</span>    <span class="hljs-comment">// right operand could be a string</span>
<span class="hljs-string">'1'</span> &gt; <span class="hljs-string">'0'</span>  <span class="hljs-comment">// both left and right are cast as numerics because '&gt;' only accepts numbers</span>

<span class="hljs-comment">// these examples are of course applicable to '&gt;=', '&lt;' and '&lt;='.</span></code></div><small class="shcb-language" id="shcb-language-24"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>More generally, it is also effective with any numeric operator:</p>



<ul><li>power operator (<code>2 ** 0 = 1, 2 ** 1 = 2, 2 ** 2 = 4, 2 ** 3 = 8</code>)</li><li>bitwise operators, like binary union and intersection (<code>1 | 3 = 3, 1 &amp; 3 = 1</code>)</li><li>see mozilla&rsquo;s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators" target="_blank" rel="noreferrer noopener">list of operators in JavaScript</a></li></ul>



<h4>Automatic type coercion with &lsquo;+&rsquo; operator: <span class="has-inline-color has-yellow-color">warning</span></h4>



<p>Some lexems such as &lsquo;+&rsquo; are common to multiple operators, such as &lsquo;+&rsquo;.</p>



<ul><li>&lsquo;string + string&rsquo; is the concatenation operator ;</li><li>&lsquo;number + number&rsquo; the sum operator.</li></ul>



<p>But what appends when mixing operand types?</p>


<pre class="wp-block-code" aria-describedby="shcb-language-25" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-number">1</span> + <span class="hljs-string">'1'</span> <span class="hljs-comment">// '11'</span>
<span class="hljs-string">'1'</span> + <span class="hljs-number">1</span> <span class="hljs-comment">// '11'</span></code></div><small class="shcb-language" id="shcb-language-25"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>So, it could lead to some bugs&#8230;</p>


<pre class="wp-block-code" aria-describedby="shcb-language-26" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">/** wrong, unsafe **/</span>
<span class="hljs-keyword">const</span> yourAge = <span class="hljs-built_in">window</span>.prompt(<span class="hljs-string">'Your age'</span>); <span class="hljs-comment">// user enters '17'</span>

<span class="hljs-comment">// prints 'Next year, you will be 171 years old'.</span>
<span class="hljs-keyword">if</span> (yourAge &lt; <span class="hljs-number">18</span>) <span class="hljs-built_in">window</span>.alert(<span class="hljs-string">'Next year, you will be '</span> + (yourAge + <span class="hljs-number">1</span>) + <span class="hljs-string">' years old'</span>);</code></div><small class="shcb-language" id="shcb-language-26"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>So, my tips is: <strong>when you expect to manipulate numbers, always parse them</strong>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-27" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// using the '+ unary operator'</span>
<span class="hljs-keyword">const</span> number1 = +<span class="hljs-string">'10'</span>;    <span class="hljs-comment">// 10</span>
<span class="hljs-keyword">const</span> number2 = +<span class="hljs-string">'10.5'</span>;  <span class="hljs-comment">// 10.5</span>

<span class="hljs-comment">// using the parseInt(str, radius) method</span>
<span class="hljs-keyword">const</span> number3 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">'10'</span>, <span class="hljs-number">10</span>);    <span class="hljs-comment">// 10</span>
<span class="hljs-keyword">const</span> number4 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">'10.5'</span>, <span class="hljs-number">10</span>);  <span class="hljs-comment">// 10</span>
<span class="hljs-keyword">const</span> number5 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">'10'</span>, <span class="hljs-number">16</span>);    <span class="hljs-comment">// 16, because the string '10' is analysed a hexadecimal string</span>

<span class="hljs-comment">// using the parseFloat(str) method</span>
<span class="hljs-keyword">const</span> number6 = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">'10.5'</span>);    <span class="hljs-comment">// 10.5</span></code></div><small class="shcb-language" id="shcb-language-27"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre><p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/10-fast-tour-of-javascript-coercion-comparison/">10. JavaScript: coercion &#038; comparison</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>09. JavaScript: variables and types</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/fast-tour-of-javascript-variables/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:40 +0000</pubDate>
				<category><![CDATA[Front-end web development]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2382</guid>

					<description><![CDATA[<p>Local variable declarations The var keyword Historically (ES5 and before), JavaScript supports variable declarations thanks to the var keyword. However, the scope of var is a bit confusing, since the variable exists anywhere in the block (file or function). This means myVariable can be read and assigned before its declaration. Before the first assignment, variables &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/fast-tour-of-javascript-variables/" class="more-link">Continuer la lecture de <span class="screen-reader-text">09. JavaScript: variables and types</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/fast-tour-of-javascript-variables/">09. JavaScript: variables and types</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Local variable declarations</h4>



<h5>The <code>var</code> keyword</h5>



<p>Historically (ES5 and before), JavaScript supports variable declarations thanks to the <code>var</code> keyword.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-28" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">var</span> myVariable = <span class="hljs-string">'some string'</span>;
<span class="hljs-keyword">var</span> myOtherVariable = <span class="hljs-number">0</span>;
<span class="hljs-built_in">console</span>.log(myVariable, myOtherVariable); <span class="hljs-comment">// prints: some string 0</span></code></div><small class="shcb-language" id="shcb-language-28"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>However, the scope of <code>var</code> is a bit confusing, since the variable exists anywhere in the block (file or function). This means <code>myVariable</code> can be read and assigned before its declaration. Before the first assignment, variables have a special <code>undefined</code> value.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-29" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'row 1'</span>, myVariable, myOtherVariable);
<span class="hljs-keyword">var</span> myVariable = <span class="hljs-string">'some string'</span>;
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'row 3'</span>, myVariable, myOtherVariable);
myOtherVariable = <span class="hljs-number">5</span>;
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'row 5'</span>, myVariable, myOtherVariable);
<span class="hljs-keyword">var</span> myOtherVariable = <span class="hljs-number">0</span>;
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'row 7'</span>, myVariable, myOtherVariable);</code></div><small class="shcb-language" id="shcb-language-29"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="660" height="213" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/var-scope-in-js.png" alt="" class="wp-image-2327" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/03/var-scope-in-js.png 660w, https://thomas-veillard.fr/wp-content/uploads/2021/03/var-scope-in-js-300x97.png 300w" sizes="(max-width: 660px) 100vw, 660px" /><figcaption>With <code>var</code>, variables exist before the declaration. They are <code>undefined</code> until first assignment.</figcaption></figure>



<h5>The <code>let</code> and <code>const</code> keywords</h5>



<p>Since ES6, you can use <code>let</code> and <code>const</code> keywords. There work more logically and intent to replace <code>var</code> in most cases. This way, variables only exist after the declaration and for the rest of the block.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-30" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-built_in">console</span>.log(myVariable); <span class="hljs-comment">// will crash because myVariable does not exist for now.</span>
<span class="hljs-keyword">let</span> myVariable = <span class="hljs-string">'some string'</span>;
<span class="hljs-built_in">console</span>.log(myVariable);</code></div><small class="shcb-language" id="shcb-language-30"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="660" height="193" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/crash-when-using-let-before-declaration.png" alt="" class="wp-image-2325" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/03/crash-when-using-let-before-declaration.png 660w, https://thomas-veillard.fr/wp-content/uploads/2021/03/crash-when-using-let-before-declaration-300x88.png 300w" sizes="(max-width: 660px) 100vw, 660px" /><figcaption>A variable using <code>let</code> or <code>const</code> cannot be accessed before the declaration.</figcaption></figure>



<p>Also, <code>const</code> prevents any further assignment. The value of the variable is definitively known during the declaration.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-31" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> constant = <span class="hljs-string">'some value'</span>;
constant = <span class="hljs-string">'disallowed assignment'</span>;</code></div><small class="shcb-language" id="shcb-language-31"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="660" height="171" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/const-assignment-error.png" alt="" class="wp-image-2330" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/03/const-assignment-error.png 660w, https://thomas-veillard.fr/wp-content/uploads/2021/03/const-assignment-error-300x78.png 300w" sizes="(max-width: 660px) 100vw, 660px" /><figcaption>Constants cannot be assigned after the declaration.</figcaption></figure>



<p>Definitely, you should:</p>



<ul><li>prefer <code>const</code> over <code>let</code> if no reassignment is expected and value already known ;</li><li>prefer <code>let</code> over <code>var</code> because its scope is error-prone.</li></ul>



<h4>The <code>typeof</code> operator</h4>



<p>The most common types of JavaScript are <code>boolean</code>, <code>number</code>, <code>string</code>, <code>function</code>, <code>undefined</code> and <code>object</code>. </p>



<p><strong>Booleans, numbers and strings</strong></p>



<p>You are probably familiar with <code><code>boolean</code>, <code>number</code></code> and <code>string</code> types, as they have counterparts in most languages.</p>



<p>Note that JavaScript stores all numbers, including integers, as <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" target="_blank" rel="noreferrer noopener">double precision format (using IEEE 754 standard)</a> with the <code>number</code> type.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-32" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// Whatever the number is an integer, a decimal or an octal code,</span>
<span class="hljs-comment">// 'typeof' returns 'number'.</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span>);
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-number">1.0</span>);
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-number">0x10</span>);

<span class="hljs-comment">// These examples print 'boolean'</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>);
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">false</span>);

<span class="hljs-comment">// These examples print 'string'</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-string">''</span>);
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-string">'some message'</span>);</code></div><small class="shcb-language" id="shcb-language-32"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Undefined</strong></p>



<p>In JavaScript, <code>undefined</code> means a variable has been declared but has not yet been assigned a value.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-33" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// `myVariable` is declared, but unitialized.</span>
<span class="hljs-keyword">let</span> myVariable;

<span class="hljs-comment">// before any value is assigned, `myVariable` is `undefined`</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> myVariable); <span class="hljs-comment">// prints 'undefined'</span>

myVariable = <span class="hljs-number">10</span>;
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> myVariable); <span class="hljs-comment">// prints 'number'</span>

<span class="hljs-comment">// you can reset the variable</span>
myVariable = <span class="hljs-literal">undefined</span>;</code></div><small class="shcb-language" id="shcb-language-33"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><code>undefined</code> could also be the return value of a function returning nothing.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-34" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span> (<span class="hljs-params"></span>) </span>{}

<span class="hljs-comment">// prints 'undefined' because myFunction has no 'return' instruction.</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> myFunction());</code></div><small class="shcb-language" id="shcb-language-34"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Null</strong></p>



<p>The <code>null</code> value is considered as an <code>object</code> by <code>typeof</code> operator. A variable can be  <code>null</code> only after an assignment.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-35" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">let</span> myVariable;
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> myVariable); <span class="hljs-comment">// prints 'undefined'</span>

myVariable = <span class="hljs-literal">null</span>;
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> myVariable); <span class="hljs-comment">// prints 'object'</span></code></div><small class="shcb-language" id="shcb-language-35"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Functions</strong></p>



<p>In JavaScript, you can store a reference to a function inside a variable.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-36" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> myVariable = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random();
}

<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> myVariable); <span class="hljs-comment">// prints 'function'</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> myVariable()); <span class="hljs-comment">// prints 'number'</span></code></div><small class="shcb-language" id="shcb-language-36"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Everything assignable to a variable can also be passed as an argument. This includes functions and allows <strong>higher-order functions</strong> to work. We call higher-order function a function that accept as an argument or returns another functions.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-37" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// callArgument() accepts a function as argument, call it and prints its return value.</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callArgument</span> (<span class="hljs-params">anotherFunc</span>) </span>{
  <span class="hljs-keyword">const</span> result = anotherFunc();
  <span class="hljs-built_in">console</span>.log(result);
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;
}

callArgument(myFunction); <span class="hljs-comment">// prints 10</span></code></div><small class="shcb-language" id="shcb-language-37"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Objects</strong></p>



<p>We distinguish <strong>literal objects</strong> and <strong>instances of classes</strong>.</p>



<ul><li>Literal objects are defined inline, with a list of properties and values. They are useful to group multiple fields under the same variable without the penalty of a class declaration.</li></ul>


<pre class="wp-block-code" aria-describedby="shcb-language-38" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> literalObject = { <span class="hljs-attr">firstName</span>: <span class="hljs-string">'Thomas'</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">'VEILLARD'</span> };
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> literalObject); <span class="hljs-comment">// prints 'object'</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> literalObject.firstName); <span class="hljs-comment">// prints 'string'</span>
<span class="hljs-built_in">console</span>.log(literalObject.firstName); <span class="hljs-comment">// prints 'Thomas'</span></code></div><small class="shcb-language" id="shcb-language-38"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<ul><li>Instances are created using the <code>new</code> operator against an existing class.</li></ul>



<p>In the following example, we use the standard <code>Date</code> class to build two instances: <code>now</code> and <code>firstDayOfYear</code>. Properties and methods can be called on each instance using the &lsquo;.&rsquo; operator (ex. <code>now.getFullYear()</code>).</p>


<pre class="wp-block-code" aria-describedby="shcb-language-39" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">// current date, time and timezone</span>
<span class="hljs-keyword">const</span> firstOfYear = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(now.getFullYear(), <span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// first of january</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> now); <span class="hljs-comment">// prints 'object'</span></code></div><small class="shcb-language" id="shcb-language-39"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Like most object-oriented languages, JavaScript classes may implement static methods and static properties.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-40" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-built_in">Date</span>.now(); <span class="hljs-comment">// returns the UNIX time in millisecond (nb of milliseconds since 01/01/1970)</span></code></div><small class="shcb-language" id="shcb-language-40"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/fast-tour-of-javascript-variables/">09. JavaScript: variables and types</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>08. JavaScript: browser entry point</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/8-fast-tour-of-javascript-setup/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:39 +0000</pubDate>
				<category><![CDATA[Front-end web development]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2294</guid>

					<description><![CDATA[<p>This post supposes you already are familiar with another language, such as Java, Python or whatever. So it will focus on JavaScript syntax and specificities. This is a frontend module, so we will run our code in the browser. We will rely on ES6 (aka. ECMAScript 2015), which is well supported by browsers now. The &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/8-fast-tour-of-javascript-setup/" class="more-link">Continuer la lecture de <span class="screen-reader-text">08. JavaScript: browser entry point</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/8-fast-tour-of-javascript-setup/">08. JavaScript: browser entry point</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>This post supposes you already are familiar with another language, such as Java, Python or whatever. So it will focus on JavaScript syntax and specificities.</p>



<p>This is a frontend module, so we will run our code in the browser. We will rely on ES6 (aka. ECMAScript 2015), which is well supported by browsers now.</p>



<h4>The entry point</h4>



<p>The browser always starts by loading an HTML file. This one may include assets such as a JavaScript script. So, let’s create 2 files: <code>index.html</code> and <code>index.js</code>. </p>


<pre class="wp-block-code" aria-describedby="shcb-language-41" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-comment">&lt;!-- index.html --&gt;</span>
<span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"fr"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS entry point<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"module"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./index.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-41"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>

<pre class="wp-block-code" aria-describedby="shcb-language-42" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// index.js</span>
<span class="hljs-built_in">window</span>.alert(<span class="hljs-string">'JS initialized successfully'</span>);</code></div><small class="shcb-language" id="shcb-language-42"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>We use the newer ES6 modules (see the <code>type="module"</code> attribute on script tag). This way, <code>index.js</code> may import dependencies via the <code>import ... from ...</code> syntax we will discuss later.</p>



<p>The drawback of this approach is you cannot open <code>index.html</code> directly from your filesystem anymore, because ES6 modules must be served from an HTTP server.</p>



<p>If it is not yet done, you should install <a href="https://nodejs.org/en/download/" target="_blank" rel="noreferrer noopener">node.js</a>. Then, open a terminal inside the folder containing <code>index.html</code> and <code>index.js</code>. This following command will start a local HTTP server reachable at <code>http://127.0.0.1:8080/</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-43" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># serve up the current directory </span>
$ npx http-server -a <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>
Starting up http-server, serving ./
Available on:
  http:<span class="hljs-comment">//127.0.0.1:8080</span>
Hit CTRL-C to stop the server</code></div><small class="shcb-language" id="shcb-language-43"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="711" height="329" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/static-serving.png" alt="" class="wp-image-2308" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/03/static-serving.png 711w, https://thomas-veillard.fr/wp-content/uploads/2021/03/static-serving-300x139.png 300w" sizes="(max-width: 711px) 100vw, 711px" /><figcaption>HTML &amp; JavaScript are served by http-server on port 8080. If everything works fine, a message should be prompted.</figcaption></figure>



<h4>The browser console</h4>



<p>Whatever your browser is, steps to open the JavaScript console look the same:</p>



<ul><li>right click anywhere on the page</li><li>find a menu entry like &lsquo;inspect element&rsquo;</li><li>go on the &lsquo;console tab&rsquo;.</li></ul>



<figure class="wp-block-image size-large"><img loading="lazy" width="1115" height="668" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/open-browser-console.gif" alt="" class="wp-image-2311"/><figcaption>How to open the browser console.</figcaption></figure>



<p>When developing JavaScript apps, <strong>you should always keep an eye on the console</strong>, where outputs and errors are revealed.</p>



<p>A <code>console</code> object is also exposed inside your JavaScript context. It is useful for basic debugging and for logging.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-44" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript shcb-code-table shcb-line-numbers"><span class='shcb-loc'><span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'This is a log entry reported in browser console'</span>);
</span></span><span class='shcb-loc'><span><span class="hljs-built_in">console</span>.warn(<span class="hljs-string">'This is a warning reported with an orange background'</span>);
</span></span><span class='shcb-loc'><span><span class="hljs-built_in">console</span>.error(<span class="hljs-string">'This time, you see a red background'</span>);
</span></span></code></div><small class="shcb-language" id="shcb-language-44"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="749" height="204" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/console-levels.png" alt="" class="wp-image-2318" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/03/console-levels.png 749w, https://thomas-veillard.fr/wp-content/uploads/2021/03/console-levels-300x82.png 300w" sizes="(max-width: 749px) 100vw, 749px" /><figcaption>Output of the previous script, which sends messages to the console.</figcaption></figure>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/8-fast-tour-of-javascript-setup/">08. JavaScript: browser entry point</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>07. Environment (tools, languages, frameworks)</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/7-environment-tools-languages-frameworks/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:38 +0000</pubDate>
				<category><![CDATA[Front-end web development]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2220</guid>

					<description><![CDATA[<p>How looks a modern web frontend stack? Your project is composed of your own code and dependencies. They could be: runtime dependencies, which are shipped to the browser. @angular/code, react or jquery are typical runtime libraries your code may rely on. They provide features you do not want to reimplement yourself. development dependencies, which are &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/7-environment-tools-languages-frameworks/" class="more-link">Continuer la lecture de <span class="screen-reader-text">07. Environment (tools, languages, frameworks)</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/7-environment-tools-languages-frameworks/">07. Environment (tools, languages, frameworks)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>How looks a modern web frontend stack?</h4>



<p>Your project is composed of your own code and dependencies. They could be:</p>



<ul><li>runtime dependencies, which are shipped to the browser. <code>@angular/code</code>, <code>react</code> or <code>jquery</code> are typical runtime libraries your code may rely on. They provide features you do not want to reimplement yourself.</li><li>development dependencies, which are required to update, build, optimise or check quality your application.</li></ul>



<p>The browser only supports an exact version of HTML, CSS, JS and Web Assembly. Tools that transform your sources into a <strong>bundle natively executable by the browser</strong> is typically a development dependency.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="469" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/How-looks-a-modern-web-frontend-stack-1024x469.png" alt="" class="wp-image-2259" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/03/How-looks-a-modern-web-frontend-stack-1024x469.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/03/How-looks-a-modern-web-frontend-stack-300x137.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/03/How-looks-a-modern-web-frontend-stack-768x352.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/03/How-looks-a-modern-web-frontend-stack.png 1518w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>Schema of a typical modern frontend application.</figcaption></figure>



<h4>A few words about your source code</h4>



<p>Because your code is transformed before it reaches the browser, you are free to:</p>



<ul><li>use latest features and syntax for HTML, CSS and JavaScript ;</li><li>use another language that transpiles to JavaScript such as TypeScript or ScalaJS ;</li><li>use another language that transpiles to CSS such as Sass, Less or Stylus ;</li><li>document your code with comments, which are finally dropped during the build process to claim some kilobytes ;</li><li>split your code in multiple files, which are merged into a single bundle. This reduces the number of HTTP connections required to load your application in a browser (faster startup, lower server costs&#8230;).</li></ul>



<h4>JavaScript Frameworks</h4>



<p>Modern JavaScript frameworks are built around the concept of components (a self-contained piece for HTML, CSS and JS that you combine to build a view). The developer builds components while the framework makes them work together.</p>



<p>In this module, you will learn Angular. Concepts are also valid for React and Vue.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="498" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/angular-react-vue-1024x498.png" alt="" class="wp-image-2240" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/03/angular-react-vue-1024x498.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/03/angular-react-vue-300x146.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/03/angular-react-vue-768x374.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/03/angular-react-vue-1536x748.png 1536w, https://thomas-veillard.fr/wp-content/uploads/2021/03/angular-react-vue.png 1580w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h4>JavaScript environments and compilers</h4>



<p>Most of the tools you will use are written in JavaScript or TypeScript. This includes command-line interfaces (aka. cli). These tools are regular software, running outside the browser thanks to node.js.</p>



<p><strong>node.js</strong> encapsulates Chrome&rsquo;s JavaScript engine and extends it with more API. So, software using node.js can open TCP/UDP ports, access the filesystem, execute other applications, call native code written in C/C++, etc. </p>



<p>Here some examples of applications requiring node.js:</p>



<ul><li><strong>@angular/cli</strong> is the command line interface used to set up new angular project, manage and compile existing one, etc.</li><li><strong>npm</strong> is the package manager shipped with node. You specify which modules are required by your application in a <code>package.json</code> file. Then, you run npm to fetch all that stuff inside your local project. npm could also be used to install software globally.</li><li><strong>webpack</strong> is a bundler. It aggregates multiple source files into a single bundle and apply transformations on it. You can customise these transformations using plugins. The final bundle is generally optimised for speed and size (when building for production).</li><li><strong>babel</strong> is a standalone software, but also a plugin for webpack. It translates newest JavaScript syntax to older targets. So you can use latest syntax and features, and run your bundle on old browsers.</li><li><strong>tsc</strong> means « TypeScript Compiler ». This software compiles TypeScript code into regular JavaScript. Like babel, the typescript module can be used as a command line or a library.</li></ul>



<p>In the tutorials, you will use the <code>@angular/cli</code>. Under the hood, it uses the <code>typescript</code> and <code>webpack</code>. When building your app, it accepts multiple HTML / CSS / TypeScript sources and compute bundles in pure HTML / CSS / JS.</p>



<h4>The Node Package Manager (aka. npm)</h4>



<p>npm can be used to:</p>



<ul><li>install software globally (ex. <code>npm install --global typescript</code>). This makes the <code>tsc</code> command available on your system. In tutorials, you will use npm to globally install <code>@angular/cli</code>.</li><li>install local dependencies in your project (ex. <code>npm install lodash</code>). This downloads the <code>lodash</code> library in a local folder called <code>node_modules</code>.</li></ul>



<p>Before using npm in a local project, you must initialise a <code>package.json</code> with the command <code>npn init</code>. The produced <code>package.json</code> looks like:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-45" data-shcb-language-name="JSON / JSON with Comments" data-shcb-language-slug="json"><div><code class="hljs language-json">{
  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"demo"</span>,
  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"1.0.0"</span>,
  <span class="hljs-attr">"description"</span>: <span class="hljs-string">"A sample application"</span>,
  <span class="hljs-attr">"main"</span>: <span class="hljs-string">"index.js"</span>,
  <span class="hljs-attr">"scripts"</span>: {
    <span class="hljs-attr">"test"</span>: <span class="hljs-string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>
  },
  <span class="hljs-attr">"author"</span>: <span class="hljs-string">"Thomas VEILLARD"</span>,
  <span class="hljs-attr">"license"</span>: <span class="hljs-string">"ISC"</span>
}</code></div><small class="shcb-language" id="shcb-language-45"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JSON / JSON with Comments</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">json</span><span class="shcb-language__paren">)</span></small></pre>


<p>Then, you add dependencies (ex. <code>npm install lodash</code>). The <code>package.json</code> is updated and a <code>node_modules</code> folder is created. You should never commit the <code>node_modules</code> on git (as it could be heavy). Just commit the <code>package.json</code> and <code>package-lock.json</code> files.</p>



<p>Running <code>npm install</code> reads the <code>package.json</code> and rebuilds the <code>node_modules</code> folder from scratch. If <code>package-lock.json</code> exists, npm uses exact version numbers of each module defined in that file.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-46" data-shcb-language-name="JSON / JSON with Comments" data-shcb-language-slug="json"><div><code class="hljs language-json shcb-code-table"><span class='shcb-loc'><span>{
</span></span><span class='shcb-loc'><span>  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"demo"</span>,
</span></span><span class='shcb-loc'><span>  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"1.0.0"</span>,
</span></span><span class='shcb-loc'><span>  <span class="hljs-attr">"description"</span>: <span class="hljs-string">"A sample application"</span>,
</span></span><span class='shcb-loc'><span>  <span class="hljs-attr">"main"</span>: <span class="hljs-string">"index.js"</span>,
</span></span><span class='shcb-loc'><span>  <span class="hljs-attr">"scripts"</span>: {
</span></span><span class='shcb-loc'><span>    <span class="hljs-attr">"test"</span>: <span class="hljs-string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>
</span></span><span class='shcb-loc'><span>  },
</span></span><span class='shcb-loc'><span>  <span class="hljs-attr">"author"</span>: <span class="hljs-string">"Thomas VEILLARD"</span>,
</span></span><span class='shcb-loc'><span>  <span class="hljs-attr">"license"</span>: <span class="hljs-string">"ISC"</span>,
</span></span><mark class='shcb-loc'><span>  <span class="hljs-attr">"dependencies"</span>: {
</span></mark><mark class='shcb-loc'><span>    <span class="hljs-attr">"lodash"</span>: <span class="hljs-string">"^4.17.21"</span>
</span></mark><mark class='shcb-loc'><span>  }
</span></mark><span class='shcb-loc'><span>}
</span></span></code></div><small class="shcb-language" id="shcb-language-46"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JSON / JSON with Comments</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">json</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Decisions had to be made</h4>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" width="495" height="216" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/Angular-material.png" alt="" class="wp-image-2257" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/03/Angular-material.png 495w, https://thomas-veillard.fr/wp-content/uploads/2021/03/Angular-material-300x131.png 300w" sizes="(max-width: 495px) 100vw, 495px" /></figure></div>



<p>In this module, I will use Angular and Angular Material. That is a personal choice, since React and Vue are still valid options for SPA.</p>



<ul><li><strong>Angular</strong> is a MVC framework, written with TypeScript. It splits codebase into logical units (components, services). It is quite normative and instructive.</li><li><strong>Angular Material</strong> is a set of “ready to use” components designed with <a href="https://material.io/design/guidelines-overview" target="_blank" rel="noreferrer noopener">Material guidelines</a> in mind.</li></ul>



<p>This course is not a web design course, it will focus on architecture instead of “is this button big enough?”. That is the reason we use pre-designed components from Angular Material.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/7-environment-tools-languages-frameworks/">07. Environment (tools, languages, frameworks)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>06. Languages for the web</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/6-languages-for-the-web/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:37 +0000</pubDate>
				<category><![CDATA[Front-end web development]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2074</guid>

					<description><![CDATA[<p>Languages for browsers HTML: HyperText Markup Language As you already know, HTML is a markup language structuring the content of the page. It also describes the semantics. Search engines and accessibility tools rely on both to index contents, identify the main section, navigation&#8230; The following example creates 3 links &#60;a&#62;. Each page may contain a &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/6-languages-for-the-web/" class="more-link">Continuer la lecture de <span class="screen-reader-text">06. Languages for the web</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/6-languages-for-the-web/">06. Languages for the web</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h3>Languages for browsers</h3>



<h4>HTML: HyperText Markup Language</h4>



<div class="wp-block-columns">
<div class="wp-block-column" style="flex-basis:33.33%">
<figure class="wp-block-image"><img src="https://lh3.googleusercontent.com/BijLLGjEYsx_Rs7RGBzXRYHqeskzlOHCS5RkO4JEqwhGMadvpKOhnoBFE8ZS7LUXeEauP-qGZg-koSNgwutn6nZ9GzLwSHa2uocWAXMTTIR7qTJYRxn2TSnF18-aAyfAkcR6wEcZQ3Y" alt=""/></figure>
</div>



<div class="wp-block-column" style="flex-basis:66.66%">
<p>As you already know, HTML is a markup language structuring the content of the page. It also describes the <strong>semantics</strong>. Search engines and <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA" target="_blank" rel="noreferrer noopener">accessibility</a> tools rely on both to index contents, identify the main section, navigation&#8230;</p>
</div>
</div>



<p>The following example creates 3 links <code>&lt;a&gt;</code>. Each page may contain a lot of links, with different meanings and purposes (navigation items in a menu, inner link from an article to another, quotation sourcing&#8230;). By putting them inside a <code>&lt;nav&gt;</code>, we semantically express those links are part of the same menu. So <strong>search engines</strong> and <strong>accessibility tools</strong> understand that <code>Home</code> and <code>About</code> are navigation items.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-47" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/about"</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/contact-us"</span>&gt;</span>Contact us<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-47"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p>The current standard is HTML Living Standard (post HTML5).</p>



<h4>CSS: Cascading StyleSheet</h4>



<div class="wp-block-columns">
<div class="wp-block-column" style="flex-basis:33.33%">
<p><img loading="lazy" width="157px;" height="222px;" src="https://lh5.googleusercontent.com/v8TBn52pLoYpWIIKZ8WPN7ZOUbhUZkqBLBhk9deU67YyL6t6hlbir3rEGD2PBLvBcZE3kKO-7lpmtF89HuBW1Bp1RV1XGZcmQtx4wDKi7aQOnZ20DEbnCKfb7k9vdKI-jCq_L8sZdF4"></p>
</div>



<div class="wp-block-column" style="flex-basis:66.66%">
<p>CSS describes the <strong>style</strong> of the page. Its goal is to define the aesthetics of the web app:</p>



<ul><li>Spatial organisation of the page (aka. layout) ;</li><li>Design, UX, UI.</li></ul>



<p>« Cascading » refers to the way it merges CSS rules from various sources (external stylesheets, internal styles, inline styles&#8230;) and with different priorities (depending on the source, the selector, etc.).</p>
</div>
</div>



<p>Supported CSS rules highly differ from one browser version to another. CSS2 took 10 years to be implemented. CSS3 implementation may still be incomplete across modern browsers. The fact is CSS is extremely simple to use as web developer, but also terribly complex for browser vendors. For that reason, I recommend you take advantage of <a href="https://caniuse.com/" target="_blank" rel="noreferrer noopener">Can I Use.com</a> before using a CSS rule in your project. It gives you statistics about browsers that currently support it.</p>



<h4>JavaScript</h4>



<div class="wp-block-columns">
<div class="wp-block-column" style="flex-basis:33.33%">
<p><img loading="lazy" width="123px;" height="123px;" src="https://lh4.googleusercontent.com/BdaQt-ZIjTBm_80gI4948-UMujX7Sl64e0SaFsc1JHczn_nk_d6VnYwWPQBs_amF79S_sknUPw2oBPk1O5cexsUs00OGWqrCiE1v_cTHPRahzgOeLO_WLX6ly3U6QVlYI9K5cHXGxRQ"></p>
</div>



<div class="wp-block-column" style="flex-basis:66.66%">
<p>Javascript is a full-featured language with variables, conditions, loops, functions, classes&#8230; It defines <strong>dynamicity</strong> of the page.</p>



<p>In fact, it can manipulate the DOM  (Document Object Model, that is the « in memory » parsed HTML), making possible to modify the page.</p>
</div>
</div>



<p>It has many goals but the most important are:</p>



<ul><li>Enabling user interaction with the elements</li><li>Server &#8211; Client communication</li><li>Managing the state of the different views</li></ul>



<p>JavaScript follows the ECMAScript specifications. There are as many JavaScript than engine that implement it (ex. V8 for Chrome, SpiderMonkey for Firefox&#8230;). But all implementations should follow ECMAScript specifications.</p>



<p>The current version is ES12 (aka. ES2021 or ECMAScript 2021). But you cannot target the latest version, because a lot of users are out-of-date.</p>



<ul><li>For wide compatibility, ES5 is commonly supported (even by Internet Explorer 11). But it lacks a lot of features commonly used in SPA and is more verbose.</li><li>ES6 is fine for <a href="https://caniuse.com/es6" target="_blank" rel="noreferrer noopener">97.24%</a> of browsers (but not for IE).</li></ul>



<h3>Other languages for web development</h3>



<p>In this module, you will learn Typescript, which is not supported directly by the browser. This language has to be transpiled in JavaScript to be run.</p>



<div class="wp-block-columns">
<div class="wp-block-column" style="flex-basis:33.33%">
<p><img loading="lazy" width="131px;" height="131px;" src="https://lh5.googleusercontent.com/twgojU7MhNhjfsT1Nf0j-3j6-xCMmXU_Dhb5yQa5EwcBS9Fwgu-iULzQplwC7EALKA-ubh2JqiL6fXACKqCLC6PxKREGFVhe300Yy--L3eZHlmUN5KsdX0qqrMOY7_1IUlKebVto-rE"> </p>
</div>



<div class="wp-block-column" style="flex-basis:66.66%">
<p>TypeScript extends JavaScript by adding types.</p>



<p>The main goal is to write maintainable code despite web project growing complexity. </p>
</div>
</div>



<p>It strictly follows ECMAScript specifications. A valid JavaScript code is also a valid TypeScript code (with most checks turned off). But TypeScript is statically aware of types, making possible to catch a lot of errors before the code reaches the browser (or the production&#8230;).</p>



<p>As a developer, you can use the latest specifications (ex. ES6/ES7/ES2021). The <code>tsc</code> compiler translates your source code to a given target (ex. ES5). You can write clean and human readable code without the challenge of syntax compatibility, which becomes the responsibility of <code>tsc</code>.</p>



<h3>On the importance of standards</h3>



<p>Everything on the web has to be standard:</p>



<ul><li>Physical Network: Link</li><li>Internet (IP)</li><li>Transport: TCP/UDP</li><li>Application: HTTP/S</li><li>Rendering and processing: HTML/CSS/JS</li></ul>



<p>Because the web relies on standards, Web applications may work seamlessly across a variety of operating systems and browsers. Building standards is a common effort implying manufacturers (e.g. hardware, network), operating system vendors (e.g. TCP/UDP stack), browser vendors (e.g. HTTP/S, W3C, ECMAScript) and <strong>developers</strong>.</p>



<p>Remember Internet Explorer 6. It did not follow W3C standards. For example, names of CSS properties and some CSS expressions differed from W3C specifications. There were a lot of rendering bugs. So developers had to develop their website both: IE6 and for other browsers.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/6-languages-for-the-web/">06. Languages for the web</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
