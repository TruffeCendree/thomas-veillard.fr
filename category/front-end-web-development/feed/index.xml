<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Front-end web development (English) &#8211; Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/category/front-end-web-development/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/</link>
	<description>Mes cours et supports pédagogiques pour l&#039;enseignement de l&#039;ingénierie informatique.</description>
	<lastBuildDate>Sun, 31 Jan 2021 12:41:16 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.6</generator>
	<item>
		<title>2. Setup your practical environment</title>
		<link>https://thomas-veillard.fr/front-end-web-development/2-setup-your-practical-work-environment/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sun, 24 Jan 2021 08:53:06 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=897</guid>

					<description><![CDATA[<p>At the end of this practical works series, you will have built the front-end of a cleaning booking service. The back-end is provided. During this first seance, you will: install the necessary tools and learning materials ; start the mock back-end infrastructure (server, database&#8230;) and import seeds ; access to the back-end API documentation and &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/2-setup-your-practical-work-environment/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Setup your practical environment</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/2-setup-your-practical-work-environment/">2. Setup your practical environment</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>At the end of this practical works series, you will have built the front-end of a cleaning booking service. The back-end is provided.</p>



<p>During this first seance, you will:</p>



<ul><li>install the necessary tools and learning materials ;</li><li>start the mock back-end infrastructure (server, database&#8230;) and import seeds ;</li><li>access to the back-end API documentation and interact manually with it ;</li><li>generate the angular project and serve compiled application to your browser ;</li><li>commit that angular project on git and push it to Github.</li></ul>



<h2>Required softwares installation</h2>



<p>Only git and docker require administration privileges to be installed. On Linux and macOS, this means you should not use sudo or root for anything else (even installing node.js).</p>



<h4>Git &amp; git-hf</h4>



<p>Git is a decentralised source version manager. A git repository stores the source code of a project and any of its changes. Typically, a contributor writes some code on its side. Once it has completed its task, it commits the changes (with a message) and push it to the remote repositories. Other contributors can update their base. Nowadays, teams centralise repositories hosting on SaaS platforms like Github and Gitlab.</p>



<p>During the lecture, I expressed you follow the <a href="https://datasift.github.io/gitflow/IntroducingGitFlow.html" target="_blank" rel="noreferrer noopener">gitflow</a> workflow. Takes the time to understand it. Then, install the git extension <a href="https://datasift.github.io/gitflow/TheHubFlowTools.html" target="_blank" rel="noreferrer noopener">git-hf</a>. That tool creates high-level commands to manage features, releases and hotfixes branches.</p>



<p>Of course, you also need a Github account.</p>



<h4>Node.js &amp; npm &amp; nvm</h4>



<p><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer noopener">Node.js</a> is a platform that runs Javascript code outside the browser. It makes possible to write server applications in Javascript, allowing developers to use the same technologies for front and back. The back-end you will interface with is running on node.js.</p>



<p>But here we are in front-end module. A lot of tools you will use runs on that platform. Some of them are even shipped with the node installer. Node Package Manager (npm) is one of them. It manages dependencies of your project and installs cli softwares written for node.</p>



<p>I personally use <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer noopener">nvm</a> for installing node. Nvm (Node Version Manager) installs and manages various versions of node (including latest one) without requiring root privileges.</p>



<h4>Docker &amp; docker-compose</h4>



<p><a href="https://docs.docker.com/engine/install/" target="_blank" rel="noreferrer noopener">Docker</a> is a container runtime. Everything running in the container is isolated from the host. Except the kernel shared with the host, the container contains a fully functional operating system (including software, shared libraries, users&#8230;).</p>



<p>For example, consider an application only runs on Ubuntu version 20.04, with specific dependencies and a lot a setup. The distribution of that software will be complicated, as there are such requirements. What if you could directly distribute ready to use Ubuntu instance with the software installed ? That is what we call a container image.</p>



<p>Docker maintains DockerHub, a public registry tons of prebuilt images you can pull and instantiate.</p>



<p><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noreferrer noopener">Docker-compose</a> is a higher-level tool, allowing the definition of infrastructure as code. You just have to write a config file, and docker compose will pull, configure and starts all containers for you. It takes care of networking, exposing ports, storing persistent data, etc.</p>



<p>Please install both tools. For Windows 10 users, docker-compose is already packaged with Docker Desktop.</p>



<h4>Angular CLI</h4>



<p><a href="https://angular.io/" target="_blank" rel="noreferrer noopener">Angular</a> is a full-featured framework you will use for building your front application. Most actions, such as generating projects or components have been automatised in the « cli » tool.</p>



<p>A single command written in a terminal (Powershell or Node Command Prompt for Windows) do the job. Ensure node is installed first. We also install <a href="https://eslint.org/" target="_blank" rel="noreferrer noopener">eslint</a>, which ensure coding conventions are applied across codebase.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">npm i -g @angular/cli @angular-devkit/{core,schematics} @angular-eslint/schematics</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<h2>Workspace overview</h2>



<p>At the end of this seance, your workspace should match the following folder hierarchy.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">frontend                       <span class="hljs-comment"># angular projet (generated using @angular/cli)</span>
 ↳ dist                        <span class="hljs-comment"># the folder containing your bundled app. Only exists after running `ng build` command.</span>
 ↳ node_modules                <span class="hljs-comment"># the folder containing local dependencies. See package.json file and npm command for more info.</span>
 ↳ src                         <span class="hljs-comment"># source code (HTML, CSS, TS). It includes components, services, etc.</span>
 ↳ angular.json                <span class="hljs-comment"># @angular/cli configuration</span>
 ↳ package.json                <span class="hljs-comment"># npm configuration, primary used for installing dependencies</span>
 ↳ tsconfig.json               <span class="hljs-comment"># typescript configuration, where are defined target, enabled syntax and type checking features.</span>
 ↳ .eslintrc.json              <span class="hljs-comment"># eslint configuration, where you set linter rules.</span>
learning-materials             <span class="hljs-comment"># my git repository you have to clone, which contains backend server, database and some tools</span>
 ↳ frontend-web-development    <span class="hljs-comment"># the folder containing every materials related to this practical work.</span>
    ↳ docker-compose.yml       <span class="hljs-comment"># configuration for docker-compose, that will take care of booting full backend infrastructure.</span>
    ↳ ...                      <span class="hljs-comment"># everything else in this folder is outside the scope of this module.</span></code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>Angular project&rsquo;s structure is standard (thanks to @angular/cli). For more information about it, please refer to <a href="https://angular.io/guide/file-structure" target="_blank" rel="noreferrer noopener">official documentation</a>.</p>



<h2>Setup the angular project</h2>



<h4>Create the angular app using @angular/cli</h4>



<p class="exercice"><strong>Exercise 1</strong> : Follow this process to create and configure a new angular app.</p>



<ul><li>Linux/Mac: run a terminal</li><li>Windows: use PowerShell or “Node.js Command Prompt”</li></ul>


<pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># install angular if not already done</span>
npm i -g @angular/cli @angular-devkit/{core,schematics} @angular-eslint/schematics

<span class="hljs-comment"># creates a new project</span>
ng new --collection=@angular-eslint/schematics frontend

<span class="hljs-comment"># enter the 'frontend' folder</span>
<span class="hljs-built_in">cd</span> frontend

<span class="hljs-comment"># install locally ts-standard (our linter)</span>
npm install --save-dev ts-standard
</code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>Then, replace <code>.eslintrc.json</code> file content with the following config. This uses ts-standard presets, with some small differences. Two minor checks are disabled for convenience and semicolons are always required. The reason is angular cli always adds semicolons on generated files. So our rules matches that pattern.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="JSON / JSON with Comments" data-shcb-language-slug="json"><div><code class="hljs language-json">{
  <span class="hljs-attr">"extends"</span>: [<span class="hljs-string">"standard-with-typescript"</span>, <span class="hljs-string">"standard-jsx"</span>],
  <span class="hljs-attr">"parserOptions"</span>: { <span class="hljs-attr">"project"</span>: <span class="hljs-string">"./tsconfig.json"</span> },
  <span class="hljs-attr">"rules"</span>: {
    <span class="hljs-attr">"@typescript-eslint/explicit-function-return-type"</span>: <span class="hljs-string">"off"</span>,
    <span class="hljs-attr">"@typescript-eslint/prefer-readonly"</span>: <span class="hljs-string">"off"</span>,
    <span class="hljs-attr">"@typescript-eslint/semi"</span>: [<span class="hljs-string">"error"</span>, <span class="hljs-string">"always"</span>]
  }
}</code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">JSON / JSON with Comments</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">json</span><span class="shcb-language__paren">)</span></small></pre>


<p>Finally, edit the <code>tsconfig.json</code> to add <code>compilerOptions.strictNullChecks = true</code> (required by some linter&rsquo;s rules).</p>



<h4>Configure your editor</h4>



<p>If you are using VSCode, you will probably appreciate those extensions:</p>



<ul><li>Angular Language Service (type inference in template)</li><li>Eslint checks that conventions are correctly applied</li><li>Gitlens (optional) for better git experience</li></ul>



<h4>Build the app</h4>



<p>The following commands help you to build your app. Many other parameters are available to customise the build process. This is just an overflow of more useful.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">ng build          <span class="hljs-comment"># build the app for development, easy to debug in the browser and heavy bundle size.</span>
ng build --prod   <span class="hljs-comment"># build the app for production. A lot of optimisations are processed, reducing bundle size.</span>
ng build --watch  <span class="hljs-comment"># incrementally rebuild the app on each source code change (faster subsequent builds).</span></code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<div class="exercice" style="margin-bottom: 1em">
<p><strong>Exercise 2</strong> : I provided you an example of output of the <code>ng build</code> command. Run it on your side and check the content of  `frontend/dist` folder.</p>

<ul style="margin-left: 1em; margin-bottom: 0">
  <li>What are the languages used in output ?</li>
  <li>Which source files have been transpiled and bundled into main.js ?</li>
  <li>How many files were outputted ? Compare this count to the number of files in the source directory. Do you think adding new sources will increase outputted files count ?</li>
<li>What is the purpose of .js.map files ?</li>
<li>What is the purpose of polyfills in Javascript ?</li>
</ul>
</div>


<pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">$ ng build <span class="hljs-comment"># to run in frontend folder                                                        </span>
✔ Browser application bundle generation complete.
✔ Copying assets complete.
✔ Index html generation complete.

Initial Chunk Files | Names         |      Size
vendor.js           | vendor        |   <span class="hljs-number">2.70</span> MB
polyfills.js        | polyfills     | <span class="hljs-number">127.61</span> kB
main.js             | main          |  <span class="hljs-number">20.85</span> kB
runtime.js          | runtime       |   <span class="hljs-number">6.15</span> kB
styles.css          | styles        | <span class="hljs-number">119</span> bytes

                    | Initial Total |   <span class="hljs-number">2.85</span> MB

Build at: <span class="hljs-number">2021</span><span class="hljs-number">-01</span><span class="hljs-number">-30</span>T08:<span class="hljs-number">46</span>:<span class="hljs-number">07.013</span>Z - Hash: <span class="hljs-number">2</span>b7174e3c646073c60a9 - Time: <span class="hljs-number">6285</span>ms</code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>At this step, you can open <code>frontend/dist/index.html</code> in your browser and explore the placeholder generated by <code>@angular/cli</code>.</p>



<p class="exercice"><strong>Exercise 3</strong> : Build your app with <code>--prod</code> option and check differences in output.</p>



<h4>Commit your code and push it to Github</h4>



<p class="exercice"><strong>Exercise 4</strong> : Register yourself on Github. Then create a private git repository on Github. Then push you angular project to Github.</p>



<p>The <code>ng new</code> command already initialised a local git repository. During the previous questions, you did changes to project (ex. by <code>editing tsconfig.json</code> or <code>.eslintrc.json</code>).</p>



<p>You have to <code>commit</code> them. A commit validates and stores a list of changes (files created, updates&#8230;) and a message describing those changes. </p>


<pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># list all changes currently not committed. Check if you see some "untracked files" that need to be persisted.</span>
git status

<span class="hljs-comment"># you probably want to commit new files in your repository. git add accepts a list of files or folder. '.' designates the current directory.</span>
git add .

<span class="hljs-comment"># commit every pending change with a message</span>
git commit -a -m <span class="hljs-string">"configure linter and typescript"</span>

<span class="hljs-comment"># the follow Github guide to push commits to remote for the first time</span>
git remote add origin https:<span class="hljs-comment">//github.com/{GITHUB_USERNAME}/{REPOSITORY_NAME}.git</span>
git branch -M main
git push -u origin main</code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="905" height="637" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-github-repository-exploration.gif" alt="" class="wp-image-1074"/><figcaption>At this step, your code is on Github. You can explore tracked files, show commit history, list changes in a particular commit, and so much more !</figcaption></figure>



<h4>Start using GitFlow and git-hf</h4>



<p>All the code is currently committed on main branch (previously called master branch). In the GitFlow workflow, the main branch is dedicated to the production code only.</p>



<p>This TPs series will use feature branches, develop and main. Each time you start a new feature (ex. adding authentification), you will start a feature branch. Once you completed your changes, open a pull request on github and merge the code to develop. Once the code on develop is well tested, it can be merged on main branch.</p>



<p class="exercice"><strong>Exercise 5</strong> : Initialise git hf with the following command. Ensure you select &lsquo;main&rsquo; as primary branch (not master). You can find <a href="https://datasift.github.io/gitflow/index.html" target="_blank" rel="noreferrer noopener">documentation here</a>.</p>


<pre class="wp-block-code"><div><code class="hljs">git hf init -a</code></div></pre>


<h2>Setup back-end infrastructure</h2>



<p>Before cloning the repository, remember we want <code>frontend</code> and <code>learning-materials</code> in the same location. So ensure you see <code>frontend</code> folder when you write <code>ls</code> command. if not, use the <code>cd</code> command.</p>



<p class="exercice"><strong>Exercise 6</strong> : create a folder dedicated to practical works and clone <a href="https://github.com/TruffeCendree/learning-materials" target="_blank" rel="noreferrer noopener">my git repository</a> in it.</p>



<p>This git repository is a <a href="https://en.wikipedia.org/wiki/Monorepo" target="_blank" rel="noreferrer noopener">monorepo</a>. It contains learning materials for multiple modules. You must focus on <code>learning-materials/frontend-web-development</code> folder.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-8" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-built_in">cd</span> learning-materials/frontend-web-development</code></div><small class="shcb-language" id="shcb-language-8"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 7</strong>: Inside this folder, you will find <code>docker-compose.yml</code>. The file contains the configuration of back-end services (mariadb database, phpmyadmin, the back-end api&#8230;). Those services discuss together over an internal network and use passwords. Replace password as requested in the file.</p>



<p>Do you know what is a safe password ? A long should they be ? ANSSI (Agence Nationale de la Sécurité des Systèmes d&rsquo;Information) provides explanations and a <a href="https://www.ssi.gouv.fr/administration/precautions-elementaires/calculer-la-force-dun-mot-de-passe/" target="_blank" rel="noreferrer noopener">strength calculator</a>. I recommend generating random and unique password for each account (not just in this module 🧐).</p>



<p class="exercice"><strong>Exercise 8</strong>: Start the mariadb database using the following command. On first launch, wait until the database reported a complete initialisation (highlighted in output).</p>


<pre class="wp-block-code" aria-describedby="shcb-language-9" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash shcb-code-table shcb-line-numbers"><span class='shcb-loc'><span><span class="hljs-comment"># only launch mariadb services defined in docker-compose.yml</span>
</span></span><span class='shcb-loc'><span>$ docker-compose up mariadb
</span></span><span class='shcb-loc'><span>Starting frontend-web-development_mariadb_1 ... <span class="hljs-keyword">done</span>
</span></span><span class='shcb-loc'><span>Attaching to frontend-web-development_mariadb_1
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52+00:00 [Note] [Entrypoint]: Entrypoint script <span class="hljs-keyword">for</span> MySQL Server 1:10.5.8+maria~focal started.
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52+00:00 [Note] [Entrypoint]: Switching to dedicated user <span class="hljs-string">'mysql'</span>
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52+00:00 [Note] [Entrypoint]: Entrypoint script <span class="hljs-keyword">for</span> MySQL Server 1:10.5.8+maria~focal started.
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] mysqld (mysqld 10.5.8-MariaDB-1:10.5.8+maria~focal) starting as process 1 ...
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] InnoDB: Using Linux native AIO
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] InnoDB: Uses event mutexes
</span></span><span class='shcb-loc'><span>[...] truncated
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Warning] <span class="hljs-string">'proxies_priv'</span> entry <span class="hljs-string">'@% root@d05a66d49a70'</span> ignored <span class="hljs-keyword">in</span> --skip-name-resolve mode.
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] Reading of all Master_info entries succeeded
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] Added new Master_info <span class="hljs-string">''</span> to <span class="hljs-built_in">hash</span> table
</span></span><mark class='shcb-loc'><span>mariadb_1     | 2021-01-24 12:05:52 0 [Note] mysqld: ready <span class="hljs-keyword">for</span> connections.
</span></mark><mark class='shcb-loc'><span>mariadb_1     | Version: <span class="hljs-string">'10.5.8-MariaDB-1:10.5.8+maria~focal'</span>  socket: <span class="hljs-string">'/run/mysqld/mysqld.sock'</span>  port: 3306  mariadb.org binary distribution
</span></mark></code></div><small class="shcb-language" id="shcb-language-9"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 9</strong> : Once database server is ready, exit docker. Then start the full stack. The backend API should notify a successful startup.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-10" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash shcb-code-table shcb-line-numbers"><span class='shcb-loc'><span>$ docker-compose up
</span></span><span class='shcb-loc'><span>Building backend
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>[... truncated]
</span></span><span class='shcb-loc'><span>Successfully built 48950e9da763
</span></span><span class='shcb-loc'><span>Successfully tagged frontend-web-development_backend:latest
</span></span><span class='shcb-loc'><span>WARNING: Image <span class="hljs-keyword">for</span> service backend was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>Starting frontend-web-development_mariadb_1 ... <span class="hljs-keyword">done</span>
</span></span><span class='shcb-loc'><span>Creating frontend-web-development_backend_1    ... <span class="hljs-keyword">done</span>
</span></span><span class='shcb-loc'><span>Creating frontend-web-development_phpmyadmin_1 ... <span class="hljs-keyword">done</span>
</span></span><span class='shcb-loc'><span>Attaching to frontend-web-development_mariadb_1, frontend-web-development_phpmyadmin_1, frontend-web-development_backend_1
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>[... truncated]
</span></span><span class='shcb-loc'><span>mariadb_1     | Version: <span class="hljs-string">'10.5.8-MariaDB-1:10.5.8+maria~focal'</span>  socket: <span class="hljs-string">'/run/mysqld/mysqld.sock'</span>  port: 3306  mariadb.org binary distribution
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>[... truncated]
</span></span><span class='shcb-loc'><span>phpmyadmin_1  | [Sun Jan 24 14:01:37.687410 2021] [core:notice] [pid 1] AH00094: Command line: <span class="hljs-string">'apache2 -D FOREGROUND'</span>
</span></span><span class='shcb-loc'><span>
</span></span><span class='shcb-loc'><span>[... truncated]
</span></span><span class='shcb-loc'><span>backend_1     | &gt; frontend-web-development@1.0.0 db:prepare:prod /app
</span></span><span class='shcb-loc'><span>backend_1     | &gt; NODE_ENV=<span class="hljs-built_in">test</span> node -e <span class="hljs-string">"require('./build/server/mysql-store').default.rebuildDatabase('prod').then(() =&gt; process.exit()).catch(err =&gt; { console.error(err); process.exit(1) })"</span>
</span></span><span class='shcb-loc'><span>backend_1     | 
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:53.387Z backend:mysql-store Upgrading SQL triggers...
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:53.401Z backend:mysql-store Triggers updated successfully
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 14:01:53 4 [Warning] Aborted connection 4 to db: <span class="hljs-string">'unconnected'</span> user: <span class="hljs-string">'root'</span> host: <span class="hljs-string">'172.24.0.3'</span> (Got an error reading communication packets)
</span></span><span class='shcb-loc'><span>mariadb_1     | 2021-01-24 14:01:53 5 [Warning] Aborted connection 5 to db: <span class="hljs-string">'cleaningshop'</span> user: <span class="hljs-string">'root'</span> host: <span class="hljs-string">'172.24.0.3'</span> (Got an error reading communication packets)
</span></span><span class='shcb-loc'><span>backend_1     | 
</span></span><span class='shcb-loc'><span>backend_1     | &gt; frontend-web-development@1.0.0 db:prepare:<span class="hljs-built_in">test</span> /app
</span></span><span class='shcb-loc'><span>backend_1     | &gt; NODE_ENV=<span class="hljs-built_in">test</span> node -e <span class="hljs-string">"require('./build/server/mysql-store').default.rebuildDatabase('test').then(() =&gt; process.exit()).catch(err =&gt; { console.error(err); process.exit(1) })"</span>
</span></span><span class='shcb-loc'><span>backend_1     | 
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.288Z backend:mysql-store Upgrading SQL triggers...
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.307Z backend:mysql-store Triggers updated successfully
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.549Z backend:mysql-store Upgrading SQL triggers...
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.577Z backend:mysql-store Triggers updated successfully
</span></span><span class='shcb-loc'><span>backend_1     | 2021-01-24T14:01:54.582Z backend:app App listening on port 8080...
</span></span></code></div><small class="shcb-language" id="shcb-language-10"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>Let’s analyse logs above:</p>



<ul><li>Lines 2 to 7: docker-compose build the backend using scripts in <code>Dockerfile</code> (more explanation about Dockerfile <a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noreferrer noopener">here</a>).</li><li>Lines 9 to 11: containers are booting.</li><li>Line 15: database reported a complete initialisation.</li><li>Line 18: phpmyadmin reported a complete initialisation.</li><li>Lines 22 and 30: the backend API creates databases and load schema.</li><li>Line 36: the backend API reported a complete initialisation. </li></ul>



<p>You now have 2 locally exposed services you can reach from the browser:</p>



<ul><li>https://thomas-veillard.fr:8080/ for the HTTP server. </li><li>https://thomas-veillard.fr:8081/ for phpmyadmin, to explore data stored into the DB</li></ul>



<h2>HTTP Server overview</h2>



<p>HTTP server hosts the API and serves static files from <code>../../frontend/dist</code> (path relative to <code>docker-compose.yml</code>. That is why the location relative to <code>frontend</code> project was so important).</p>



<p>If you properly built the angular project and started the web server via docker-compose, you can now reach <code>https://thomas-veillard.fr:8080/</code> in your browser. You will be welcomed with your own frontend application.</p>



<h2>API documentation and playground</h2>



<p>The API is self-documented and up to date. Open it at https://thomas-veillard.fr:8080/docs.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="835" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-1024x835.gif" alt="" class="wp-image-969" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-1024x835.gif 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-300x245.gif 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-768x626.gif 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>API playground and documentation demonstration</figcaption></figure>



<p>During database population, some seeds were generated. These built-in accounts are designed for testing purposes:</p>



<ul><li><strong>Operator</strong> (operator@cleaning.com / seedpass)</li><li><strong>Customer</strong> (customer@cleaning.com / seedpass)</li><li><strong>Employee</strong> (employee@cleaning.com / seedpass)</li></ul>



<div class="exercice" style="padding-bottom: 0; margin-bottom: 1em">
<p><strong>Exercise 10</strong> : Through the playground, manually execute the following scenario:</p>

<code>POST /auth/login</code>
<p>Connect yourself as operator.</p>

<code>GET /api/users/me</code>
<p>Query some information about your own account.</p>

<code>GET /api/users</code>
<p>List all users on the shop. That is only possible because you are operator.</p>

<code>POST /auth/logout</code>
<p>Close your session.</p>

<code>??? find paths and arguments yourself</code>
<p>
Try to call any endpoint behind authentication.<br>
Register yourself as customer using public API.
</p>
</div>



<p class="exercice"><strong>Exercise 1</strong>1 : Same exercise, but this time you will use <a href="https://www.postman.com/" target="_blank" rel="noreferrer noopener">Postman</a>. Why ? Because the API designer will not always implement a playground&#8230;</p>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/2-setup-your-practical-work-environment/">2. Setup your practical environment</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>1. Introduction</title>
		<link>https://thomas-veillard.fr/front-end-web-development/introduction/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sun, 24 Jan 2021 08:23:21 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=884</guid>

					<description><![CDATA[<p>This course is about creating front-end applications, with modern web technologies. You will discover that such a rich environment, learn good practices, develop quality code, write modular and testable code&#8230; Prerequisite Skills This teaching assumes you know the basics of HTML and CSS. If that is not the case, please consider the following resources. They &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/introduction/" class="more-link">Continuer la lecture de <span class="screen-reader-text">1. Introduction</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/introduction/">1. Introduction</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>This course is about creating front-end applications, with modern web technologies. You will discover that such a rich environment, learn good practices, develop quality code, write modular and testable code&#8230;</p>


<a href=https://docs.google.com/presentation/d/1cjTmJwYxGxT5aW4noNiNxUYFBbvRMG_i9r1tHBjxlFY/edit?usp=sharing target="_blank">
  <div style="display: flex; align-items: center; padding: 1em; border-radius: 3px; border: 1px solid #f5ba16; background: #f7f7f7">
    <div style="margin-right: 0.5em"><img src="/wp-content/uploads/2021/01/google_slide.svg" /></div>
    <div>Open lecture slides</div>
  </div>
</a>



<h2>Prerequisite</h2>



<h4>Skills</h4>



<p>This teaching assumes you know the basics of HTML and CSS. If that is not the case, please consider the following resources. They are quick and basic.</p>



<ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started" target="_blank" rel="noreferrer noopener">Getting started with HTML</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works" target="_blank" rel="noreferrer noopener">How CSS works</a></li></ul>



<h4>Tools</h4>



<p>For end users, Front-end web technologies only require a modern browser. In the same way, developers could use almost any operating system for building apps. Nonetheless, your experience may drastically differ, and some tools harder to install or unavailable.</p>



<p>You are free to use Windows or MacOS. Or you could install a GNU/Linux distribution in a virtual machine. My demonstrations will occur on an Ubuntu system.</p>



<p>Before the first lecture, please:</p>



<ul><li>bring your own computer, you will need it;</li><li>install <a href="https://nodejs.org/en/" target="_blank" rel="noreferrer noopener">Node.js</a>, as it is required for building applications. Use <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer noopener">nvm</a> for installing it;</li><li>install a decent IDE or editor for web development like VSCode or WebStorm;</li></ul>



<p>During practical works, you will install and use much more tools. For convenience, I already packaged some of them and my learning materials using Docker. </p>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/introduction/">1. Introduction</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
