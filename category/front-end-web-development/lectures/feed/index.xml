<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Lectures &#8211; Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/category/front-end-web-development/lectures/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/</link>
	<description>Mes cours et supports pÃ©dagogiques pour l&#039;enseignement de l&#039;ingÃ©nierie informatique.</description>
	<lastBuildDate>Fri, 05 Feb 2021 12:31:51 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.6.1</generator>
	<item>
		<title>4. Using web tools to build something else</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/using-web-technologies-to-build-something-else/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:02:36 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1440</guid>

					<description><![CDATA[<p>For desktops and phones Since front-end technologies were so convenient, developers found ways to reuse web technologies in other contexts. This targets specially desktop and phone app. The idea is always the same: to write an application using HTML/CSS/JS and bundle it inside a webview. Everything related to the browser UI is hidden. The user &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/using-web-technologies-to-build-something-else/" class="more-link">Continuer la lecture de <span class="screen-reader-text">4. Using web tools to build something else</span></a></p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/using-web-technologies-to-build-something-else/">4. Using web tools to build something else</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>For desktops and phones</h4>



<p>Since front-end technologies were so convenient, developers found ways to reuse web technologies in other contexts. This targets specially desktop and phone app.</p>



<p>The idea is always the same: to write an application using HTML/CSS/JS and bundle it inside a webview. Everything related to the browser UI is hidden. The user only see what the developer wants to show.</p>



<p>Once packaged, the user does not see any difference compared to another software. It installs itself in the same way as native software. On Android, the application can be exported as an APK/AAB file and shipped via Google Play. On iOS, you submit an IPA file to the App Store Connect.</p>



<blockquote class="wp-block-quote"><p>Write once, run everywhere. ðŸŽ‰</p></blockquote>



<p>This sentence summarises another benefit of sharing your codebase between the website version and the desktop/phone version. You only have a single codebase to maintain, so features are immediately available on all platforms. Finally, you may conditionally enable some features depending on the running environment capabilities.</p>



<p>Users may expect more features in an app that they installed compared to the web version. Effectively, by packaging your application using <code>Electron</code> or <code>Cordova</code>, you got access to advanced features and OS integrations. That is possible because <code>Electron</code> and <code>Cordova</code> trust your code.</p>



<p> Conversely, the browser has to deal with security issues. It always considers the website as mistrusted code running on your computer. It must sandbox and protect itself from it. For that reason, APIs like direct access to filesystems from the website are unavailable. </p>



<h4>For command line and back-end</h4>



<p>Nowadays, Javascript can run outside the browser. The leader platform is Node.js, built on top of the Chromium Javascript engine (V8). Node.js powers various cli tools (including those we will use in this module) and HTTP servers.</p>



<p>For developers, using the same languages for front-end and back-end improve productivity.</p>



<ul><li>There is only a single language to master.</li><li>Your stack is consistent and you may reuse dependencies across front and back.</li><li>You can share code between front and back.</li></ul>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/using-web-technologies-to-build-something-else/">4. Using web tools to build something else</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>3. How rich and interactive is this UI ?</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/how-rich-interactive-and-complex-is-this-ui/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 08:38:14 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1394</guid>

					<description><![CDATA[<p>The layout The Â«Â add serverÂ Â» page&#8217;s layout is composed of 4 parts: a header, containing site identity, notification centre and accesses to other parts of the customer portal ; a left menu, to navigate between the cloud portal features ; a content area, where the form takes place ; a floating footer summarizing the delivery. &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/how-rich-interactive-and-complex-is-this-ui/" class="more-link">Continuer la lecture de <span class="screen-reader-text">3. How rich and interactive is this UI ?</span></a></p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/how-rich-interactive-and-complex-is-this-ui/">3. How rich and interactive is this UI ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-image size-large"><img src="https://thomas-veillard.fr/wp-content/uploads/2021/02/How-rich-can-be-a-web-ui-.gif" alt="" class="wp-image-1395"/><figcaption>The control panel of Hetzner Cloud, which is a nice example of Single Page Application.</figcaption></figure>



<h4>The layout</h4>



<p>The Â«Â add serverÂ Â» page&rsquo;s layout is composed of 4 parts:</p>



<ul><li>a header, containing site identity, notification centre and accesses to other parts of the customer portal ;</li><li>a left menu, to navigate between the cloud portal features ;</li><li>a content area, where the form takes place ;</li><li>a floating footer summarizing the delivery.</li></ul>



<h4>The form</h4>



<p>The form itself is highly interactive. Actions available at a step depends on a combination of previous choices. It opens modals containing another embedded form, computes the total price on the client side, prints warnings for misconfigurations, etc. All computations related to content are powered by Javascript.</p>



<h4>The style</h4>



<p>Fonts, colours, backgrounds, gradients, border radiuses, block sizes, margins, paddings, text positioning and so much more are handled by the browser rendering engine for you. </p>



<p>Imagine how complex it could be to round corners and center text of the following block if you had to deal with raw pixels&#8230; But that is so simple with CSS.</p>



<style>
.my-rounded-block {
  background-color: #ffecb8;
  border: 1px solid #795548;
  border-radius: 3px;
  text-align: center;
}
</style>

<p class="my-rounded-block">Example of paragraph with background and rounded border.</p>



<div class="wp-block-columns">
<div class="wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="CSS" data-shcb-language-slug="css"><div><code class="hljs language-css"><span class="hljs-selector-class">.my-rounded-block</span> {
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffecb8</span>;
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#795548</span>;
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;
  <span class="hljs-attribute">text-align</span>: center;
}</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">CSS</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">css</span><span class="shcb-language__paren">)</span></small></pre></div>



<div class="wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-rounded-block"</span>&gt;</span>
  Example of paragraph with background and rounded border.
<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre></div>
</div>



<h4>Animations</h4>



<p>Building animations from scratch is something difficult. You must write mathematical functions describing the transformation, then compute each frame and render them. Your goal is to achieve 60 images per second, which requires optimisations.</p>



<p>Thanks to CSS3, animations are now easy to build. You just describe an initial and final state, and apply a built-in transformation function. The browser handle the rest. It even selects the best hardware available for the task and does concessions to maintain the framerate.</p>



<p>Animations give feedback to the user. They also make the UI interaction fluid. Some examples:</p>



<ul><li>The colour of a button changes on hover, on focus or on click.</li><li>Newly created elements inside the page are highlighted on append.</li></ul>



<p>This example illustrates perfectly why web technologies are so efficient for UI/UX compared to dinosaurs ðŸ¦–. (Hi JAVA and its Swing UI framework !)</p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/how-rich-interactive-and-complex-is-this-ui/">3. How rich and interactive is this UI ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>2. Why are web technologies so popular ?</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/why-are-web-technologies-so-popular/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sun, 24 Jan 2021 08:24:00 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1342</guid>

					<description><![CDATA[<p>They are cross-platform. End user just needs a browser. The primary homes of front-end technologies are browsers themselves. Those browsers exist in almost any operating system. That is true for computers (Windows, MacOs, GNU/Linux&#8230;) as for phones and pads (Android, iOS&#8230;). If the end user is running an up-to-date browser, it immediately access all web &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/why-are-web-technologies-so-popular/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Why are web technologies so popular ?</span></a></p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/why-are-web-technologies-so-popular/">2. Why are web technologies so popular ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>They are cross-platform. End user just needs a browser.</h4>



<p>The primary homes of front-end technologies are browsers themselves. Those browsers exist in almost any operating system. That is true for computers (Windows, MacOs, GNU/Linux&#8230;) as for phones and pads (Android, iOS&#8230;).</p>



<p>If the end user is running an up-to-date browser, it immediately access all web applications published on the Internet.</p>



<h4>They are well known, mature and still evolving.</h4>



<p>The web is not born yesterday. So the community learned from its experience. Nowadays, the web is a good place for standards. Standards ensure your projects will still work in decades if you strictly rely on them.</p>



<p>Have you seen the <a href="http://info.cern.ch/" target="_blank" rel="noreferrer noopener">first website ever built</a> ? It is still online and fully functional because it followed standards.</p>



<p>Of course, the web continues to grow and standards to evolve.</p>



<h4>Building rich and responsive UI is easy.</h4>



<p>The core business of web browsers is to render pages. As you can expect, browsers perform very well at this task.</p>



<p>From the point of view of web developers, you first have to write your content (with HTML). Then, you build the layout and apply styles thanks to CSS. Those two languages are quick and easy to learn. And they are so powerful (specially CSS which handles all the complexity).</p>



<h4>Javascript allows complex interaction inside the browser.</h4>



<p>Javascript comes from the old days of the Web. At this time, HTML and CSS were produced on server. Javascript purpose was to add a bit of dynamicity on the client-side. For example, it allowed:</p>



<ul><li>to animate elements (now replaced by CSS3 animations) ;</li><li>to apply minor changes to the page on user interaction (like showing or hiding a block when the clicks a button).</li></ul>



<p>Last decade, the language and its ecosystem have matured. A lot of frameworks help developers to produce all HTML and CSS using only Javascript. Even when a user clicks a link, the new page is produced and replaced this way.</p>



<blockquote class="wp-block-quote"><p>We call that kind of applications Â«Â Single Page ApplicationÂ Â».</p></blockquote>



<p>If building and rendering the page can be done on client-side, is there still a place for servers ? It depends on your need. Some tasks, like authentication and authorisation can only run in trusted environments. Some other requires infrastructure, like files and contents sharing.</p>



<h4>Ecosystem is rich of tools</h4>



<p>During this module, you will discover some tools. First of all, your browser includes a lot of utilities like an element inspector, a JavaScript debugger, a network analyser, etc. You will also import and manage dependencies (that contains reusable code) using package managers. And so much more.</p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/why-are-web-technologies-so-popular/">2. Why are web technologies so popular ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>1. Prerequisites</title>
		<link>https://thomas-veillard.fr/front-end-web-development/lectures/introduction/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sun, 24 Jan 2021 08:23:21 +0000</pubDate>
				<category><![CDATA[Front-end web development (English)]]></category>
		<category><![CDATA[Lectures]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=884</guid>

					<description><![CDATA[<p>This course is about creating front-end applications, with modern web technologies. You will discover that such a rich environment, learn good practices, develop quality code, write modular code&#8230; Skills This teaching assumes you know the basics of HTML and CSS. If that is not the case, please consider the following resources. They are quick and &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/lectures/introduction/" class="more-link">Continuer la lecture de <span class="screen-reader-text">1. Prerequisites</span></a></p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/introduction/">1. Prerequisites</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>This course is about creating front-end applications, with modern web technologies. You will discover that such a rich environment, learn good practices, develop quality code, write modular code&#8230;</p>



<h4>Skills</h4>



<p>This teaching assumes you know the basics of HTML and CSS. If that is not the case, please consider the following resources. They are quick and basic.</p>



<ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started" target="_blank" rel="noreferrer noopener">Getting started with HTML</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works" target="_blank" rel="noreferrer noopener">How CSS works</a></li></ul>



<h4>Tools</h4>



<p>For end users, Front-end web technologies only require a modern browser. In the same way, developers could use almost any operating system for building apps. Nonetheless, your experience may drastically differ, and some tools harder to install or unavailable.</p>



<p>You are free to use Windows or MacOS. Or you could install a GNU/Linux distribution in a virtual machine. My demonstrations will occur on an Ubuntu system.</p>



<p>Before the first lecture, please:</p>



<ul><li>bring your own computer, you will need it;</li><li>install <a href="https://nodejs.org/en/" target="_blank" rel="noreferrer noopener">Node.js</a>, as it is required for building applications. Use <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer noopener">nvm</a> for installing it;</li><li>install a decent IDE or editor for web development like VSCode or WebStorm;</li></ul>



<p>During practical works, you will install and use much more tools. For convenience, I already packaged some of them and my learning materials using Docker. </p>


<a href=https://docs.google.com/presentation/d/1cjTmJwYxGxT5aW4noNiNxUYFBbvRMG_i9r1tHBjxlFY/edit?usp=sharing target="_blank">
  <div style="display: flex; align-items: center; padding: 1em; border-radius: 3px; border: 1px solid #f5ba16; background: #f7f7f7">
    <div style="margin-right: 0.5em"><img src="/wp-content/uploads/2021/01/google_slide.svg" /></div>
    <div>Open lecture slides</div>
  </div>
</a>



<p></p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/lectures/introduction/">1. Prerequisites</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
