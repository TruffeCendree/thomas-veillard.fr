<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Archives des 04. Backend - Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/category/front-end-web-development/04-backend/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/category/front-end-web-development/04-backend/</link>
	<description>Mes cours et supports pédagogiques pour l&#039;enseignement de l&#039;ingénierie informatique.</description>
	<lastBuildDate>Tue, 15 Nov 2022 15:21:27 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1</generator>
	<item>
		<title>03. IAM App: database &#038; model bootstraping (practical activity)</title>
		<link>https://thomas-veillard.fr/front-end-web-development/04-backend/03-iam-app-database-model-bootstraping-pratical-activity/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 12 Nov 2022 10:13:31 +0000</pubDate>
				<category><![CDATA[04. Backend]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=4542</guid>

					<description><![CDATA[<p>Learning outcomes Specifications In this tutorial, you will prepare the foundations for the Identity and Access Management layer for a future RestAPI. The start point is user registration and cookies-based session management. The following tutorials will leverage those capabilities to build an Oauth2 authorisation server and fine-grained permission management in front of a Rest API. &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/04-backend/03-iam-app-database-model-bootstraping-pratical-activity/" class="more-link">Continuer la lecture de <span class="screen-reader-text">03. IAM App: database &#38; model bootstraping (practical activity)</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/04-backend/03-iam-app-database-model-bootstraping-pratical-activity/">03. IAM App: database &amp; model bootstraping (practical activity)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul>
<li>Connecting to a relational database (MySQL or PostgreSQL) from node.</li>



<li>Setting up an Object Relational Mapping (TypeORM) and a first model <code>User</code>.</li>



<li>Writing model validations that operate at the ORM level.</li>



<li>Working with asynchronous <code>Promises</code> in nodejs (database IO are async).</li>



<li>Preparing project for a Test Driven Development approach.</li>
</ul>



<h4>Specifications</h4>



<p>In this tutorial, you will prepare the foundations for the <code>Identity and Access Management</code> layer for a future RestAPI. The start point is user registration and cookies-based session management.</p>



<p>The following tutorials will leverage those capabilities to build an Oauth2 authorisation server and fine-grained permission management in front of a Rest API.</p>



<p>At the end of the tutorial, the database and model parts have to be set up. The proper functioning will be checked through automated <strong>integration tests</strong> against a live database.</p>



<h4>Prerequires</h4>



<ul>
<li>Ensure you installed NodeJS 16+, using the <code>node --version</code> command.</li>



<li>Operate a relational database server.  During code demonstrations, I will use a dockerized <code>postgresql</code> instance. This engine is strongly recommended, but a regular <code>mysql</code> or <code>mariadb</code> instance should be fine (except for the ungraded exercise for <code>uuid</code> primary keys).</li>
</ul>



<p>You are free to install the RDBMS the way you want (docker, system wide install, etc.). For the users of <code>docker-compose</code>, here is a ready-to-use recipe:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="YAML" data-shcb-language-slug="yaml"><div><code class="hljs language-yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">'3.1'</span>

<span class="hljs-attr">services:</span>
  <span class="hljs-attr">postgres:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres</span>
    <span class="hljs-attr">environment:</span>
      <span class="hljs-attr">POSTGRES_USER:</span> <span class="hljs-string">tutorial</span>
      <span class="hljs-attr">POSTGRES_DB:</span> <span class="hljs-string">iam</span>
      <span class="hljs-attr">POSTGRES_PASSWORD:</span> <span class="hljs-string">privatepassword</span>
    <span class="hljs-attr">ports:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:5432:5432</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./docker/postgres:/var/lib/postgresql/data</span>

  <span class="hljs-attr">pgadmin:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">dpage/pgadmin4</span>
    <span class="hljs-attr">links:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">postgres</span>
    <span class="hljs-attr">environment:</span>
      <span class="hljs-attr">PGADMIN_DEFAULT_EMAIL:</span> <span class="hljs-string">admin@admin.com</span>
      <span class="hljs-attr">PGADMIN_DEFAULT_PASSWORD:</span> <span class="hljs-string">privatepassword</span>
    <span class="hljs-attr">ports:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8000:80</span></code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">YAML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">yaml</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Basic typescript project template</h4>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-download" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  <a href="https://thomas-veillard.fr/wp-content/uploads/2021/11/node-typescript-template.zip">Download the template for node + typescript projects (source code)</a>
</div>
</div>



<p>I provide you a ready to go hello-world template, with out-of-the-box support for <code>typescript</code> and my recommended set of <code>eslint</code> code quality rules. Nothing else is included. The following bullets explain how to get started with that template:</p>



<ol>
<li>Take a look at the dependencies of the template and understand their goal. </li>



<li>Then install those dependencies using <code>npm install</code>. In a general manner, you should check the code you are about to pull and run before actually running it.</li>



<li>Discover the preset commands inside <code>package.json#scripts</code>.</li>



<li>Write your code in <code>src</code> folder, use <code>npm run lint</code> to check the code quality, compile it to js using <code>npm run build</code> and eventually run the transpiled code using <code>npm run start</code>.</li>
</ol>



<h4>What is an ORM?</h4>



<p>In this tutorial, you will use <code>TypeORM</code>, an Object Relational Mapping built for typescript. Its primary purpose is exposing the tables and records of your database as objects to the rest of your code. As the name suggests, it « maps » typescript classes to databases&rsquo; tables and vis-versa. The ORM also abstracts the underlying database engine, allowing support of multiple providers mostly without any code change.</p>



<p>Today, you are about to leverage its schema sync capability (that works both for initial sync and incremental changes). By defining our model classes the typeorm way, the library will automatically populate the database with the right tables, columns and indexes. Warning: never use this feature on production data and existing databases, because it tends to destroy and recreate columns. The proper way to maintain schema over time is called <a href="https://typeorm.io/migrations" target="_blank" rel="noreferrer noopener">migration</a>.</p>



<p>Please refer to the official documentation about <a href="https://typeorm.io/" target="_blank" rel="noreferrer noopener">how to get started with typeorm.</a> In addition, <strong>a code demonstration is scheduled</strong>.</p>



<div class="is-layout-flex wp-container-3 wp-block-columns exercice">
<div class="is-layout-flow wp-block-column exercise">
<p><strong>Exercise 1</strong>: Set up a <code>datasource</code> (exported from <code>src/lib/typeorm.ts</code>) that connects to your newly created (and empty) database. Take a look at the <code>dotenv</code> package for managing credentials and configurations. Then, define the <code>User</code> model inside <code>src/entities/user.ts</code>. Running the node server should automatically create the <code>user</code> table.</p>



<p>The <code>user</code> table should contain the following columns:</p>



<ul class="u-mlm">
<li><code>id</code> (integer, auto-incremented, not null) ;</li>



<li><code>firstname</code> (string, not null) ;</li>



<li><code>lastname</code> (string, not null) ;</li>



<li><code>email</code> (string, not null) ;</li>



<li><code>passwordHash</code> (string, not null).</li>
</ul>



<p class="u-mbn">Prefer the <code>Data Mapper</code> paradigm over <code>Active Record</code> paradigm (your model class must not extend the <code>BaseEntity</code> class). You will discover why in the next session.</p>
</div>
</div>



<h4>Test Driven Development</h4>



<p>TDD supposes you set up asap a test runner (a library responsible for preparing the scenario of each test case and actually run the code of the test). Let&rsquo;s do this by installing <code>mocha</code> (the test runner) and <code>chai</code> (an assertion library). Those familiar with <code>jest</code> can rely on it instead.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">npm install --save-dev mocha @types/mocha chai @types/chai chai-as-promised @types/chai-as-promised</code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>In addition, you can register additional scripts in <code>package.json</code>. Above is my command to run the whole test suite. Windows users: you may need to change the way the <code>NODE_ENV</code> environment variable is set.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript">NODE_ENV=test mocha --recursive dist/specs --exit --<span class="hljs-keyword">async</span>-stack-traces</code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>You will map the test file based on the original source (ex. <code>src/entities/user.ts</code> will be covered by <code>src/specs/entities/user.spec.ts</code>). While this structure plays well for unit testing and integration tests, you are also allowed to create additional files into the <code>src/specs</code> folder.</p>



<p>Here a start point for the source code of your test:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// src/specs/entities/user.ts</span>
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> chai <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> chaiAsPromised <span class="hljs-keyword">from</span> <span class="hljs-string">'chai-as-promised'</span>
<span class="hljs-keyword">import</span> { User } <span class="hljs-keyword">from</span> <span class="hljs-string">'...'</span>

chai.use(chaiAsPromised)

describe(<span class="hljs-string">'User'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  before(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> initialise the datasource (database connection)</span>
  })
    
  beforeEach(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> drop the content of the user table between each it().</span>
  })

  describe(<span class="hljs-string">'validations'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    it(<span class="hljs-string">'should create a new User in database'</span>)

    it(<span class="hljs-string">'should raise error if email is missing'</span>, <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
      <span class="hljs-comment">// hint to check if a promise fails with chai + chai-as-promise:</span>
      <span class="hljs-comment">// await chai.expect(promise).to.eventually.be.rejectedWith(QueryFailedError, "message")</span>
    })
  })
})
</code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 2</strong>: Please first focus on implementing (and passing green) the two test cases. Once done, you can think about DRY (don&rsquo;t repeat yourself principle) and mutualise the test database management across the whole test suite (only composed of <code>src/specs/entities/user.spec.ts</code> for now). In addition, you could rely on <code>NODE_ENV=test</code> to override the database name (and potentially more configurations).</p>



<p class="question"><strong>Question 1</strong>: Why should you reset the database before each test case? Give examples of issues you may meet otherwise.</p>



<h4>Adding presence validations and cover them with test cases</h4>



<p class="question"><strong>Question 2</strong>: What kind of error is currently thrown in test case <code> "should raise error if email is missing"</code>? Is it an SQL error (occurring in the database server) or a validation error before the query got executed? What should it be, so it is easy and secure to format an error message to the end user (considering security, message internationalisation, etc.)?</p>



<div class="is-layout-flex wp-container-9 wp-block-columns">
<div class="is-layout-flow wp-block-column exercice">
<p><strong>Exercise 3</strong>: Implement a custom <code>ValidationError</code> class (with appropriate inheritance) that will be raised when trying to save (both on creation and update) an invalid user object. You can take advantage of <a href="https://typeorm.io/listeners-and-subscribers#what-is-a-subscriber" target="_blank" rel="noreferrer noopener">typeorm listeners</a>, especially <code>@BeforeInsert</code> and <code>@BeforeUpdate</code> on purpose. Your first use case is checking that required properties are present (not null, nor empty string).</p>



<p>An instance of <code>ValidationError</code> should expose the following properties:</p>



<ul class="u-mlm">
<li><code>error.message</code> of type string;</li>



<li><code>error.stack</code> of type string;</li>



<li><code>error.target</code> of type object (ex. an instance of <code>User</code>);</li>



<li><code>error.property</code> of type string (ex. <code>'email', 'firstname'</code>, etc.).
<ul>
<li></li>
</ul>
</li>
</ul>



<p>Update the corresponding integration test. I give you a part of it:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">await</span> expect(repo.save(user)).to.eventually
  .be.rejectedWith(ValidationError, <span class="hljs-string">"The email is required"</span>)
  .and.include({ target: user, property: <span class="hljs-string">'email'</span> })</code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p><strong>Tips</strong>: do not use <code>class-validator</code> yet, as it is described in the typeorm documentation about validations. That is for the next exercise.</p>



<p class="u-mbn"><strong>Bonus</strong>: most advanced developers may infer the requireness of properties based on null acceptance defined in <a href="https://typeorm.delightful.studio/classes/_metadata_entitymetadata_.entitymetadata.html" target="_blank" rel="noreferrer noopener">typeorm column metadata</a>. Metadata are collected when using typescript annotation like <code>@Column()</code> and can be retrieved from the global metadata store via <code>getMetadataArgsStorage()</code>.</p>
</div>
</div>



<h4>Support for asynchronous validations and refactoring using <code>class-validator</code></h4>



<p>The typeorm team recommends using  <code>class-validator</code>, as described <a href="https://typeorm.io/validation" target="_blank" rel="noreferrer noopener">here</a>. The validations are then defined as decorators on properties. Once defined, you can validate any <code>user</code> this way:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-10" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> errors = <span class="hljs-keyword">await</span> validate(user)
<span class="hljs-keyword">if</span> (errors.length) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`Validation failed!`</span>)</code></div><small class="shcb-language" id="shcb-language-10"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Things to note about this way of doing:</p>



<ul>
<li>the code that will persist an entity must not forget to manually run the validation, while your own implementation triggers them as part of the life-cycle of the entity;</li>



<li>the <code>validate()</code> function is asynchronous (because decorators are able to validate promises and because you can write async validations);</li>



<li>the annotations are a convenient and highly readable way of expression;</li>



<li>the <code>class-validator</code> contains a lot of built-in validations that can be extended and other features such as validation groups (see doc for details);</li>



<li>it is possible to know if an entity seems valid, without actually trying to save it;</li>



<li>the reported validations errors are structured, allowing processing them semantically (for example in http error responses).</li>
</ul>



<div class="is-layout-flex wp-container-13 wp-block-columns">
<div class="is-layout-flow wp-block-column exercice">
<p><strong>Exercise 4</strong>: you will migrate to <code>class-validator</code>, why preserving the systematic validation on persist. You cannot call the <code>async validate(this)</code> instruction inside an Entity Listener like <code>@BeforeUpdate</code>, because any returned promise is not awaited. Instead, you will need a <a href="https://typeorm.io/listeners-and-subscribers#what-is-a-subscriber" target="_blank" rel="noreferrer noopener">Subscriber</a>. Of course, you have to write the corresponding specs. Your custom error class defined in <code>errors/validation-error.ts</code> will become obsolete, replaced with a class managed by the <code>class-validator</code> package. For performance reasons, it would be nice to raise on the first validation error.</p>



<p>Here a hint for the updated spec:</p>


<pre class="wp-block-code u-mbn" aria-describedby="shcb-language-11" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">await</span> expect(repo.save(user)).to.eventually.be.rejected.and.deep.include({
  target: user,
  property: <span class="hljs-string">'email'</span>,
  constraints: { isNotEmpty: <span class="hljs-string">'email should not be empty'</span> }
})</code></div><small class="shcb-language" id="shcb-language-11"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre></div>
</div>



<p>The next attribute to validate is the email. It must be unique (case insensitive) in the whole table. For integrity reasons, we will validate this at the database level. But since the error messages from the database are hard to manage (and should not be disclosed), we will prefer throwing a <code>ValidationError</code> (the class from <code>class-validator</code>) before even running the SQL query.</p>



<p class="question"><strong>Question 3</strong>: why do we need both a database constrain and a validation in typescript for the same check?</p>



<p class="exercice"><strong>Exercise 5</strong>: Implement a unique index on the <code>email</code> column directly in the database. TypeORM does not support out-of-the-box transformations such as <code>LOWER(email)</code> in the index definition (<a href="https://typeorm.io/indices#disabling-synchronization" target="_blank" rel="noreferrer noopener">see. the doc</a>). One way could be using migrations to define the index with pure SQL, but I do not want you to play with this complexity yet. Another solution would be using <code>transformer</code>s as defined in the <a href="https://typeorm.io/entities#column-options" target="_blank" rel="noreferrer noopener"><code>@Column</code> options</a>. You could also define setters or try <code>@BeforeInsert</code>, etc. Last, but not least, you know what I think about testing&#8230;</p>



<p class="exercice"><strong>Exercise 6:</strong> Implement a validation that ensures the uniqueness (case insensitive) of the email. That validation will trigger a DB call, so is async by nature. That the reason the <code>validate(user)</code> function is async. Take a look at <a href="https://www.npmjs.com/package/class-validator#custom-validation-decorators" target="_blank" rel="noreferrer noopener">custom validation decorators</a>, then implement an <code>@UniqueInColumn()</code> decorator to be applied on <code>email</code>. Keep in mind this decorator may become more generic over time (ex. with a parameter to toggle on/off the case insensitivity, the other columns for uniqueness key, etc.).</p>



<p>In exercise 5, you probably relied on a global <code>datasource</code> object to query your database. This works only if your validation is not executed inside a transaction. In the <a href="https://github.com/typestack/class-validator/issues/631" target="_blank" rel="noreferrer noopener">absence of a context being passed to the custom validation</a>, I will show you a monkey patch in a <strong>code demonstration</strong>. Ideas are welcome.</p>



<h4>Validations and security considerations</h4>



<div class="is-layout-flex wp-container-15 wp-block-columns">
<div class="is-layout-flow wp-block-column question">
<p><strong>Question 4</strong>: how models validations, such as the one you just wrote, can serve the security of your application? Give an example.</p>



<p class="u-mbn">In addition, which database mechanism can be leveraged for security hardening in case a validation fails (ex. while persisting 2 entities in response to the same action)? Clue: the mechanism I am thinking about could also operate on <code>afterUpdate</code> subscriptions.</p>
</div>
</div>



<h4>The <code><code>setPassword(password, passwordConfirmation)</code></code> method</h4>



<p>Nowadays, it is pretty well known that passwords cannot be stored as plain texts inside the database for security reasons. Our application primarily needs a way to compare the user input with a fingerprint stored in the database. In case of data breaches, that same fingerprint should prevent the recovery of the original plain text. In cryptographic science lingo, that what we call a <strong>hash</strong>.</p>



<p>The equality comparison is possible because the same password hashed with the same algorithm and parameters outputs a determinist hash.</p>



<p>Excluding potential flaws in the hashing algorithm, the only way to recover the plain text is brute force attack. Any small change to the input must trigger major changes in the output. Otherwise, attackers could use heuristics and kinds of dichotomy algorithms to reduce the spectrum of values to test. The hash algorithm must also be expensive enough (in computations and memory usage) to limit the number of random clear passwords attackers can try in a brute force attack for a reasonable amount of time. Some algorithms provide parameters that increase the number of internal iterations and therefore, increase the compute requirements, making them more future proof.</p>



<p>Since the same input is expected to generate the same output, attackers could operate with <a href="https://en.wikipedia.org/wiki/Rainbow_table" target="_blank" rel="noreferrer noopener">rainbow tables</a>: precomputed tables of hashes. Honestly, those tables focus on entries coming from dictionaries and potential passwords (ex. word with characters substitution and frequently used sequences). That where the <strong>salt</strong> comes to play. If you add random bytes (aka. additional entropy) to the plain text, the input of the hash algorithm is no more in the rainbow table. To ensure the bad actor does not craft a rainbow table for your salt, you have to generate one shot salts.</p>



<p>In this tutorial, you will use the <code>bcrypt</code> package. It is a production grade hashing algorithm and library with built-in support for hashing.</p>



<p class="exercice"><strong>Exercise 7</strong>: add an <code>async setPassword(password, passwordConfirmation)</code> method in the <code>User</code> class. <code>Bcrypt</code> can offload the hashing work outside of the main thread, allowing the main thread to process other tasks during that time (from security criteria, it matters for the <strong>availability</strong> of your app because nodejs is single-threaded). If the password does not match, raise a semantic error (instance of  <code>ValidationError</code>). Else, hash the password and discard the inputs. Improve your test suite. <strong>Tips</strong>: implement a <code>SetPasswordDTO</code> class.</p>



<p class="exercice"><strong>Exercise 8</strong>: Compute the strength (entropy) of the password being set in bits. Use can play with the <a href="https://www.ssi.gouv.fr/administration/precautions-elementaires/calculer-la-force-dun-mot-de-passe/" target="_blank" rel="noreferrer noopener">strength calculator provided by ANSSI</a> and get more familiar with the criteria that improve password robustness. Then, implement a validation so password has at least 80 bits of entropy (with TDD).  Unit tests against the function computing the entropy would be appreciated. PS: you do not need any <code>npm</code> package for that.</p>



<p class="exercice"><strong>Exercise 9</strong>: add an <code>async isPasswordValid(password)</code> method in the <code>User</code> class, that returns a <code>Promise&lt;boolean></code>. The promise resolves as <code>true</code> if the input matches the stored hashed password. Cover this method with tests.</p>



<h4>Mitigation against OWASP <code><a href="https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html" target="_blank" rel="noreferrer noopener">A5:2017-Broken Access Control</a></code></h4>



<p>When using sequential integer <code>id</code> primary key, it is obviously easy for an attacker to guess other entities id and enumerable them. Of course, your app must implement a policy mechanism able to reject access to an unauthorised entity, but bugs happen. What if the bad actor was unable to find the ids in the first place, by making them more random?</p>



<p>A de facto standard is <code>uuid</code> version 4 (ex. <code>123e4567-e89b-12d3-a456-426614174000</code>). An <code>uuid</code> can be stored as a 16 bytes integer, while biginteger used for primary keys are 8 bytes length. The spacial performance impact is reasonable as long as you use the appropriate database type (<code>uuid</code> for postgresql, raw array of bytes for mysql).</p>



<p class="exercice"><strong>Exercise 10</strong>: If your RDBMS provides a transparent <code>uuid</code> datatype (so if you use postgresql), change your schema definition.</p>



<h4>Prepare the arrival of new specs files</h4>



<p>The next tutorial session will focus on implementing the login and registration http endpoints. Development being driven by tests, you will create new test files.</p>



<p class="exercice">Move what will be common to the whole test suite into  <code>specs/spec-helper.ts</code> now.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/04-backend/03-iam-app-database-model-bootstraping-pratical-activity/">03. IAM App: database &amp; model bootstraping (practical activity)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>02. Invoice PDF generation HTTP API (practical activity)</title>
		<link>https://thomas-veillard.fr/front-end-web-development/04-backend/invoice-pdf-generation-http-api/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sun, 05 Dec 2021 15:19:24 +0000</pubDate>
				<category><![CDATA[04. Backend]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=4225</guid>

					<description><![CDATA[<p>Learning outcomes Build a simple HTTP server using fastify. Validate inputs and serialise payloads using JSON schemas. Generate TypeScript interfaces from JSON schemas. Serve text/html, application/json and application/pdf content-types. Write server-side statically checkable templates (thanks to JSX). Generate high quality PDF using puppeteer. Work with promises, async error handling, error serialisation, etc. Write specs, compute &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/04-backend/invoice-pdf-generation-http-api/" class="more-link">Continuer la lecture de <span class="screen-reader-text">02. Invoice PDF generation HTTP API (practical activity)</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/04-backend/invoice-pdf-generation-http-api/">02. Invoice PDF generation HTTP API (practical activity)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Build a simple HTTP server using fastify.</li><li>Validate inputs and serialise payloads using JSON schemas.</li><li>Generate TypeScript interfaces from JSON schemas.</li><li>Serve <code>text/html</code>,  <code>application/json</code> and <code>application/pdf</code> content-types.</li><li>Write server-side statically checkable templates (thanks to JSX).</li><li>Generate high quality PDF using puppeteer.</li><li>Work with promises, async error handling, error serialisation, etc.</li><li>Write specs, compute a test coverage report.</li><li>Generate OpenAPI documentation (fastify-swagger).</li></ul>



<h4>Context</h4>



<p>Necessarily, companies have to produce invoices and other kinds of formal documents.  Because this is error-prone and time consuming, they may establish automated workflows. Through this tutorial, you will implement an invoice PDF renderer API.</p>



<p>At the end of the tutorial, no persistence is expected. You do not have to implement any database connection or session management. All is about core fastify features, PDF generation and TypeScript support.</p>



<p>A single endpoint is expected. It accepts a JSON payload as POST body and may return a JSON response, an HTML rendered preview or a PDF blob depending on the <code>Accept</code> header.</p>



<h4>Data schema</h4>



<p>In a real-world application, the data could be formalised as multiple entities: <code>Address</code>, <code>Customer</code>, <code>Biller</code>, <code>ItemInvoice</code> and finally <code>Invoice</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-16" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">interface</span> Address {
  street: <span class="hljs-built_in">string</span>
  city: <span class="hljs-built_in">string</span>
  zipcode: <span class="hljs-built_in">string</span>
  country: <span class="hljs-built_in">string</span>
  state: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span>
  additional: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span>
}

<span class="hljs-keyword">interface</span> Customer {
  name: <span class="hljs-built_in">string</span>
  address: Address
}

<span class="hljs-keyword">interface</span> Biller {
  address: Address
  phoneNumber: <span class="hljs-built_in">string</span>
  email: <span class="hljs-built_in">string</span>
  invoiceLegalFooter: <span class="hljs-built_in">string</span>
}

<span class="hljs-keyword">interface</span> ItemInvoice {
  description: <span class="hljs-built_in">string</span>
  quantity: <span class="hljs-built_in">number</span>
  unitPriceWithoutTax: <span class="hljs-built_in">number</span>
  taxPercent: <span class="hljs-built_in">number</span>
}

<span class="hljs-keyword">interface</span> Invoice {
  reference: <span class="hljs-built_in">string</span>
  date: <span class="hljs-built_in">Date</span>
  customer: Customer
  biller: Biller
  itemInvoices: ItemInvoice[]
  paymentDelayInDays: <span class="hljs-built_in">number</span>
}</code></div><small class="shcb-language" id="shcb-language-16"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>In our case, the endpoint will receive a single payload with nested properties matching the above <code>Invoice</code> interface. Also, note that the JSON format encodes dates as strings. For example:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-17" data-shcb-language-name="JSON / JSON avec commentaires" data-shcb-language-slug="json"><div><code class="hljs language-json">{
  <span class="hljs-attr">"reference"</span>: <span class="hljs-string">"2021-001"</span>,
  <span class="hljs-attr">"date"</span>: <span class="hljs-string">"2021-12-01"</span>,
  <span class="hljs-attr">"paymentDelayInDays"</span>: <span class="hljs-number">30</span>,
  <span class="hljs-attr">"customer"</span>: {
    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Andrew SMITH"</span>,
    <span class="hljs-attr">"address"</span>: {
      <span class="hljs-attr">"street"</span>: <span class="hljs-string">"1111 Woodvale Drive"</span>,
      <span class="hljs-attr">"city"</span>: <span class="hljs-string">"Rodney"</span>,
      <span class="hljs-attr">"zipcode"</span>: <span class="hljs-string">"N0L 2C0"</span>,
      <span class="hljs-attr">"state"</span>: <span class="hljs-string">"Ontario"</span>,
      <span class="hljs-attr">"country"</span>: <span class="hljs-string">"Canada"</span>,
      <span class="hljs-attr">"additional"</span>: <span class="hljs-string">"Appartement B110"</span>
    }
  },
  <span class="hljs-attr">"biller"</span>: {
    <span class="hljs-attr">"phoneNumber"</span>: <span class="hljs-string">"+33123456789"</span>,
    <span class="hljs-attr">"email"</span>: <span class="hljs-string">"seller@myshop.com"</span>,
    <span class="hljs-attr">"invoiceLegalFooter"</span>: <span class="hljs-string">"IBAN to pay: FRXX XXXX XXXX XXXX XXXX\n SIRET: XXXXXXXXXXXX, TVA number: XXXXXXXXXXXXXXXX"</span>,
    <span class="hljs-attr">"address"</span>: {
      <span class="hljs-attr">"street"</span>: <span class="hljs-string">"92 rue du Clair Bocage"</span>,
      <span class="hljs-attr">"city"</span>: <span class="hljs-string">"LA ROCHE-SUR-YON"</span>,
      <span class="hljs-attr">"zipcode"</span>: <span class="hljs-string">"85000"</span>,
      <span class="hljs-attr">"state"</span>: <span class="hljs-literal">null</span>,
      <span class="hljs-attr">"country"</span>: <span class="hljs-string">"France"</span>,
      <span class="hljs-attr">"additional"</span>: <span class="hljs-literal">null</span>
    }
  },
  <span class="hljs-attr">"itemInvoices"</span>: [
    {
      <span class="hljs-attr">"description"</span>: <span class="hljs-string">"APhone Z001"</span>,
      <span class="hljs-attr">"quantity"</span>: <span class="hljs-number">1</span>,
      <span class="hljs-attr">"unitPriceWithoutTax"</span>: <span class="hljs-number">300</span>,
      <span class="hljs-attr">"taxPercent"</span>: <span class="hljs-number">20</span>
    }
  ]
}</code></div><small class="shcb-language" id="shcb-language-17"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JSON / JSON avec commentaires</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">json</span><span class="shcb-language__paren">)</span></small></pre>


<h4>Simple echo server</h4>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-download" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  <a href="https://thomas-veillard.fr/wp-content/uploads/2021/11/node-typescript-template.zip">Download the template for node + typescript projects (source code)</a>
</div>
</div>



<div class="is-layout-flex wp-container-19 wp-block-columns">
<div class="is-layout-flow wp-block-column exercice">
<p id="exercice"><strong>Exercise 1</strong>: Now the context is given, please create a simple HTTP server with <a href="https://www.fastify.io/" target="_blank" rel="noreferrer noopener">fastify</a>, that:</p>



<ul class="u-mlm u-mbs"><li>implements a single route (POST: /invoices);</li><li>accepts any JSON entity on that endpoint;</li><li>responds with the input JSON (like an echo server).</li></ul>
</div>
</div>



<p class="exercice"><strong>Exercise 2</strong>: Then, write a JSON schema that matches the invoice entity (as described previously). There are plenty of examples <a href="https://json-schema.org/learn/miscellaneous-examples.html" target="_blank" rel="noreferrer noopener">here</a>. In addition, you can manually test your schema against a payload <a href="https://www.jsonschemavalidator.net/" target="_blank" rel="noreferrer noopener">here</a>.</p>



<p class="exercice"><strong>Exercise 3</strong>: Finally, use that schema as part of input validation <strong>and</strong> output serialisation (<a href="https://www.fastify.io/docs/latest/Validation-and-Serialization/" target="_blank" rel="noreferrer noopener">see the fastify&rsquo;s documentation</a>).</p>



<p>The JSON schema validates inputs at runtime (it is a core feature of fastify). But Typescript cannot infer the type by its own. You could of course write static type definitions&#8230; But they may become obsolete. Anyway, code duplication is mostly always a bad idea.</p>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> Instead, I will show in class how to generate typescript interfaces from JSON schemas using <a href="https://www.npmjs.com/package/json-schema-to-typescript" target="_blank" rel="noreferrer noopener">json-schema-to-typescript</a>.</p>



<h4>Hand-testing the fastify&rsquo;s JSON-schema algorithms.</h4>



<p>Since input validation and output serialisation are critical points for the application security, we must understand how it behaves on « edge » cases (when things do not follow the nominal case).</p>



<p>Please answer the above questions in your <code>README.md</code>.</p>



<div class="is-layout-flex wp-container-21 wp-block-columns">
<div class="is-layout-flow wp-block-column question">
<p><strong>Question 1</strong>: About input validation:</p>



<ul class="u-mlm u-mbs"><li>How fastify processes unknown properties?</li><li>How fastify behaves if a known property is missing in the payload?</li><li>What happens if an input property is <code>null</code>?</li></ul>
</div>
</div>



<div class="is-layout-flex wp-container-23 wp-block-columns">
<div class="is-layout-flow wp-block-column question">
<p><strong>Question 2</strong>: About response serialisation:</p>



<ul class="u-mlm u-mbs"><li>How fastify processes unknown properties?</li><li>How fastify behaves if a known property is missing in the payload?</li></ul>
</div>
</div>



<p class="question"><strong>Question 3</strong>: Is input validation just a matter of types and schemae?</p>



<h4>Setting up tests with fastify</h4>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> We will set up together a first automated spec for this endpoint. Starting from now, you are strongly encouraged to systematically write specs for any further work during this module.</p>



<p>Useful resources:&nbsp;<a href="https://istanbul.js.org/" target="_blank" rel="noreferrer noopener">istanbul</a>,&nbsp;<a href="https://mochajs.org/" target="_blank" rel="noreferrer noopener">mocha</a>,&nbsp;<a href="https://www.chaijs.com/" target="_blank" rel="noreferrer noopener">chai</a>,&nbsp;<a href="https://www.npmjs.com/package/faker" target="_blank" rel="noreferrer noopener">faker</a>, <a href="https://code.visualstudio.com/docs/editor/debugging" target="_blank" rel="noreferrer noopener">debugging</a>…</p>



<h4>Conditional response format</h4>



<p>Depending on the mimetype provided in the request <code>Accept</code> header, the server may respond with another type of content. Currently, whatever the value of this header, your current implementation outputs a JSON payload.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-24" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">enum</span> MIME_TYPES {
  HTML = <span class="hljs-string">'text/html'</span>,
  <span class="hljs-built_in">JSON</span> = <span class="hljs-string">'application/json'</span>,
  PDF = <span class="hljs-string">'application/pdf'</span>
}

instance.post(<span class="hljs-string">'/invoices'</span>, <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">request, reply</span>) </span>{
  <span class="hljs-keyword">switch</span> (request.headers.accept) {
    <span class="hljs-keyword">case</span> MIME_TYPES.JSON:
      <span class="hljs-keyword">return</span> request.body;

    <span class="hljs-keyword">case</span> MIME_TYPES.PDF:
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'PDF are not yet implemented'</span>);
    
    <span class="hljs-keyword">default</span>:
      <span class="hljs-keyword">return</span> reply.type(MIME_TYPES.HTML).send(<span class="hljs-string">'&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;Hello world&lt;/body&gt;&lt;/html&gt;'</span>)
  }
})</code></div><small class="shcb-language" id="shcb-language-24"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>The core topic of this section is rendering the HTML template on the server side. There are plenty of ways:</p>



<ul><li>Working with raw string concatenation: zero-dependency solution, with readability and maintainability issues. It can easily lead to XSS injections.</li><li>Working with a template rendering engine, such as <a href="https://ejs.co/" target="_blank" rel="noreferrer noopener">ejs</a>: robust solution with built-in HTML special character escapement, preventing most (but not all) XSS. That template engine was built for JS, so is basically out of the scope of TypeScript!</li><li>Working with JSX (or more exactly TSX in case of TypeScript). This is a way to write a kind of HTML in JavaScript. Plenty of tools can render the HTML from a JSX source. One of them is <a href="https://fr.reactjs.org/docs/react-dom-server.html" target="_blank" rel="noreferrer noopener">react-dom/server</a>. All TypeScript features work natively in .tsx files.</li></ul>



<p class="exercice"><strong>Exercise 4</strong>: Render the invoice as an HTML page if the request asks for HTML format. JSX should be preferred because of static type checks. But it is also more complex to start with. Ejs is also a valid option to fulfil the exercise at time. For the review, please include a screenshot of the rendered page: the feature coverage, the visual result and the code quality* all matter.</p>



<p>* proper use of typescript checking, addition of specs, etc.</p>



<h4>Render as PDF</h4>



<p class="exercice"><strong>Exercise 5</strong>: Using Google <a href="https://www.npmjs.com/package/puppeteer" target="_blank" rel="noreferrer noopener">puppeteer</a> (a headless chromium instance with a nodejs driver), render your HTML payload as PDF. Unlike previous content types, a PDF is a binary file. So you have to deal with binary <a href="https://nodejs.org/api/buffer.html" target="_blank" rel="noreferrer noopener">Buffer</a>. In addition, puppeteer uses promises. Add a spec for this case.</p>



<p class="question"><strong>Question 4</strong>: Why should you disable JavaScript in the headless browser instance? And, of course, disable it!</p>



<h4>Safer error handling</h4>



<p>As for the final project, we will take care of the security of error handling. Web applications should not leak sensitive information. One of the attack vectors is error serialisation when the app sends internal errors messages.</p>



<p>A status code 400 notifies an invalid request. It is acceptable to send the failure&rsquo;s reason to the user. If the server provides an API consumed by developers, this is a welcome help for them.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-25" data-shcb-language-name="JSON / JSON avec commentaires" data-shcb-language-slug="json"><div><code class="hljs language-json">{
    <span class="hljs-attr">"statusCode"</span>: <span class="hljs-number">400</span>,
    <span class="hljs-attr">"error"</span>: <span class="hljs-string">"Bad Request"</span>,
    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"body should have required property 'hello'"</span>
}</code></div><small class="shcb-language" id="shcb-language-25"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JSON / JSON avec commentaires</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">json</span><span class="shcb-language__paren">)</span></small></pre>


<p>But is it OK to serve this?</p>


<pre class="wp-block-code" aria-describedby="shcb-language-26" data-shcb-language-name="JSON / JSON avec commentaires" data-shcb-language-slug="json"><div><code class="hljs language-json">{
    <span class="hljs-attr">"statusCode"</span>: <span class="hljs-number">500</span>,
    <span class="hljs-attr">"error"</span>: <span class="hljs-string">"Internal Server Error"</span>,
    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"Unable to connect to database on root@localhost, with password authentication"</span>
}</code></div><small class="shcb-language" id="shcb-language-26"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JSON / JSON avec commentaires</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">json</span><span class="shcb-language__paren">)</span></small></pre>


<p>Or this?</p>


<pre class="wp-block-code" aria-describedby="shcb-language-27" data-shcb-language-name="JSON / JSON avec commentaires" data-shcb-language-slug="json"><div><code class="hljs language-json">{
    <span class="hljs-attr">"statusCode"</span>: <span class="hljs-number">500</span>,
    <span class="hljs-attr">"error"</span>: <span class="hljs-string">"Internal Server Error"</span>,
    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"Ambiguous column name \"id\"; SQL statement: SELECT * FROM exhibit JOIN exhibit ON (id = previous_id); [90059-176]"</span>
}</code></div><small class="shcb-language" id="shcb-language-27"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JSON / JSON avec commentaires</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">json</span><span class="shcb-language__paren">)</span></small></pre>


<p>Everything that is related to <code>Internal Server Error</code> (HTTP code 500) should never reach the end user (unless you are in development environment). But if you try yourself, you will notice fastify sends those errors in production mode (<code>NODE_ENV=production</code>)! As a web developer, I saw this on publicly routed servers!</p>



<p>This is because of the default <a href="https://github.com/fastify/fastify/blob/1e94070992d911a81a26597c25f2d35ae65f3d91/fastify.js#L74" target="_blank" rel="noreferrer noopener">error handler (the link redirects to fastify source code)</a> . You should override the handler globally using <a href="https://www.fastify.io/docs/latest/Server/#seterrorhandler" target="_blank" rel="noreferrer noopener">setErrorHandler</a>.</p>



<p class="exercice"><strong>Exercise 6</strong>: override the default error handler, with security in mind.</p>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> Then I will show you how to use the error handler and Promise rejection to cover various failures scenario in a DRY* way (from invalid phone numbers validation to illegal accesses&#8230;). Thanks to that, you will say goodbye to verbose and overcomplicated errors management in HTTP controllers.</p>



<p>* DRY = Don&rsquo;t Repeat Yourself (and I would like to not repeat this anymore 🙂)</p>



<p class="exercice"><strong>Exercise 7</strong>: Accoding to my previous demonstration, validate that the phone number is valid (using <a href="https://www.npmjs.com/package/libphonenumber-js" target="_blank" rel="noreferrer noopener">libphonenumber-js</a>), that emails match <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#basic_validation" target="_blank" rel="noreferrer noopener">HTML5 official regex</a> and that all prices are positive. Else, throw an error the message of which is sent to the client. The HTTP status code should be 422 in case of rejection.</p>



<p>In facts, the previous validations should not be in the controller&#8230; but moved inside models. This is much cleaner, DRY and consistent across the app (checked every time an entity is persisted, whatever the code calling it). But we do not have models yet, so that is for another day!</p>



<p><strong>Bonus</strong>: If we have enough time. I will show how to write unit tests using stubs (from the <a href="https://sinonjs.org/releases/latest/stubs/" target="_blank" rel="noreferrer noopener">sinon</a> package) against the custom error handler.</p>



<h4>Swagger documentation</h4>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> <a href="https://github.com/fastify/fastify-swagger" target="_blank" rel="noreferrer noopener">Fastify-swagger</a> automatically extracts the JSON-schema you provided for your routes, then produces an OpenAPI document. The ore information you provide in your JSON-schema (like description of each field), the better is the resulting documentation. Try it yourself if you completed the tutorial before your teammates.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/04-backend/invoice-pdf-generation-http-api/">02. Invoice PDF generation HTTP API (practical activity)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>01. Simple plagiarism detection CLI (pratical activity)</title>
		<link>https://thomas-veillard.fr/front-end-web-development/04-backend/practical-activity-simple-plagiarism-detection-cli/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Wed, 10 Nov 2021 20:13:12 +0000</pubDate>
				<category><![CDATA[04. Backend]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=4051</guid>

					<description><![CDATA[<p>Learning outcomes Parsing command line with the popular yargs module. Working with external module definitions, such as @types/yargs. Basic filesystem manipulations (CRUD operations of files and folders). Getting familiar with the glob filepath matching expressions and library. Working with Promise, util.promisify(), async, await, etc. Getting starting with natural language manipulation (see the natural module). Packaging &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/04-backend/practical-activity-simple-plagiarism-detection-cli/" class="more-link">Continuer la lecture de <span class="screen-reader-text">01. Simple plagiarism detection CLI (pratical activity)</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/04-backend/practical-activity-simple-plagiarism-detection-cli/">01. Simple plagiarism detection CLI (pratical activity)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Parsing command line with the popular <code>yargs</code> module.</li><li>Working with external module definitions, such as <code>@types/yargs</code>.</li><li>Basic filesystem manipulations (CRUD operations of files and folders).</li><li>Getting familiar with the <code>glob</code> filepath matching expressions and library.</li><li>Working with <code>Promise</code>, <code>util.promisify()</code>, <code>async</code>, <code>await</code>, etc.</li><li>Getting starting with natural language manipulation (see the <code>natural</code> module).</li><li>Packaging a Typescript library to be installable with <code>npm</code>.</li><li>Writing mocha specs against the library.</li></ul>



<h4>Context</h4>



<p>While I was personally reviewing submissions from a degraded examination context, I suspected fraudulent behaviours. Various tools exist to detect plagiarism, but are highly expensive. I expected a basic analysis to catch the most obvious cases easily.</p>



<p class="u-mbs">Such tools generally provide 2 primary features:</p>



<ol class="u-mlm"><li>comparing together various submissions to the same exercise;</li><li>comparing a single submission to online contents.</li></ol>



<p>Point (2.) implies using expensive search API such as Google (max 100 free queries a day) or Bind (max 1000 free queries a month).</p>



<p>This adds extra layer of complexity, caching strategy and performance concerns. For those reasons, you will <strong>exclusively focus on point (1.)</strong>.</p>



<h4>Provided assets</h4>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-download" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  <a href="https://thomas-veillard.fr/wp-content/uploads/2021/11/6-samples.zip">Download the submission samples (ZIP of TXT files)</a>
</div>
</div>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-download" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  <a href="https://thomas-veillard.fr/wp-content/uploads/2021/11/node-typescript-template.zip">Download the template for node + typescript projects (source code)</a>
</div>
</div>



<h4>Specifications</h4>



<p>The CLI software should accept the following command-line options:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-28" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">Options:
  --inputFiles    Glob expression to files containing answers. Each file
                  contains a single text to compare to each others. It assumes
                  all texts refer to the same question.      [string] [required]
  --outputFile    Path to the output file. If missing, output to console.
                                                                        [string]
  --format        The output format. [choices: <span class="hljs-string">"json"</span>, <span class="hljs-string">"text"</span>] [default: <span class="hljs-string">"text"</span>]
  --clusterScore  The minimum matching score to merge 2 submissions <span class="hljs-keyword">in</span> the same
                  report. It is a number between 0 (merge even <span class="hljs-keyword">if</span> not really
                  similar) and 1 (merge only <span class="hljs-keyword">if</span> exactly same). Default is 0.9.
                                                         [number] [default: 0.9]</code></div><small class="shcb-language" id="shcb-language-28"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="u-mbs">You will extract IO-related code and plagiarism detection code in 2 distinct modules:</p>



<ul><li><strong>IO-related code</strong>: includes argument parsing, files reading, outputs (both to console and filesystem);</li><li><strong>Plagiarism detection code</strong>: the function accepting a set of submissions and returns cluster metered with matching score.</li></ul>



<p>Later on, the <strong>Plagiarism detection code</strong> will become a self-packaged module (similar to those on <code>npm registry</code>, but not released).</p>



<p>This allows reusing the library anywhere and replace the IO-presentation layer by a webserver (💲 think about an anti-plagiarism SaaS API 💲).</p>



<p>Side note: As for now, the <strong>Plagiarism detection code</strong> only performs on in-memory data, especially string transformations. This is CPU-bound task.</p>



<h4><strong>PoC Implementation (step by step)</strong></h4>



<p>Despite a lot of topics are covered in this tutorial, the resulting codebase (excluding specs) could be fewer than 100 lines of code.</p>



<p>Before getting deeper in the code, let&rsquo;s try some experiments. The final delivery will just be a smart assembly of all those experiments.</p>



<h5><strong>Parse options, provide their descriptions and requireness.</strong></h5>



<p>Calling your script without mandatory options should print the documentation:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-29" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">$ node dist/index.js
Options:
  --<span class="hljs-built_in">help</span>          Show <span class="hljs-built_in">help</span>                                            [boolean]
  --version       Show version number                                  [boolean]
  --inputFiles    Glob expression to files containing answers. Each file
                  contains a single text to compare to each others. It assumes
                  all texts refer to the same question.      [string] [required]
  --outputFile    Path to the output file. If missing, output to console.
                                                                        [string]
  --format        The output format. [choices: <span class="hljs-string">"json"</span>, <span class="hljs-string">"text"</span>] [default: <span class="hljs-string">"text"</span>]
  --clusterScore  The minimum matching score to merge 2 submissions <span class="hljs-keyword">in</span> the same
                  report. It is a number between 0 (merge even <span class="hljs-keyword">if</span> not really
                  similar) and 1 (merge only <span class="hljs-keyword">if</span> exactly same). Default is 0.9.
                                                         [number] [default: 0.9]

Missing required argument: inputFiles</code></div><small class="shcb-language" id="shcb-language-29"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="u-mbs">Tips:</p>



<ul><li>Note that <code>yargs(...).parse()</code>&nbsp;returns a Promise. Unless you use <a href="https://dev.to/mikeesto/top-level-await-in-node-2jad" target="_blank" rel="noreferrer noopener">node 14.8.0</a>+, you cannot <code>await</code> a Promise outside an <code>async</code> function (ex. in a&nbsp;<a href="https://stackabuse.com/javascripts-immediately-invoked-function-expressions">IIFE</a>).</li><li>Let&rsquo;s&nbsp;<code>yargs</code>&nbsp;infer&nbsp;<code>format: 'json' | 'text'</code>&nbsp;for you. In facts,&nbsp;<code>yargs</code>&nbsp;type definition infers attributes&rsquo; names and types. It even supports&nbsp;<a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types" target="_blank" rel="noreferrer noopener">literal union</a>, as shown in this&nbsp;<a href="https://github.com/yargs/yargs/blob/main/docs/typescript.md#more-specific-typing-for-choices" target="_blank" rel="noreferrer noopener">example</a>.</li><li>Use the&nbsp;<code>demandOption</code> method to require an option&nbsp;(and not&nbsp;<code>requiresArg</code>, that is for another purpose).</li><li>You do&nbsp;<strong>NOT</strong>&nbsp;need the&nbsp;<code>any</code>&nbsp;type, so do not use it.</li></ul>



<p>Here the template to help you:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-30" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">import</span> yargs <span class="hljs-keyword">from</span> <span class="hljs-string">'yargs'</span>
<span class="hljs-keyword">import</span> { hideBin } <span class="hljs-keyword">from</span> <span class="hljs-string">'yargs/helpers'</span>

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> argv = <span class="hljs-keyword">await</span> yargs(hideBin(process.argv))
  .option(<span class="hljs-string">'inputFiles'</span>, { <span class="hljs-keyword">type</span>: <span class="hljs-string">'string'</span>, demandOption: <span class="hljs-literal">true</span> <span class="hljs-comment">/* ... */</span> })
  .parse()

  <span class="hljs-built_in">console</span>.log(argv)
}

run().catch(<span class="hljs-built_in">console</span>.error)</code></div><small class="shcb-language" id="shcb-language-30"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Once completed, the <code>argv</code>&lsquo;s type should be inferred as:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-31" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">interface</span> Argv {
  inputFiles: <span class="hljs-built_in">string</span>
  outputFile: <span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span>
  format: <span class="hljs-string">'json'</span> | <span class="hljs-string">'text'</span>
  clusterScore: <span class="hljs-built_in">number</span>
}</code></div><small class="shcb-language" id="shcb-language-31"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<h5><strong>List all files that match the glob expression from <code>--inputFiles</code></strong></h5>



<p><strong>Tips</strong>: Use the&nbsp;<code>glob</code>&nbsp;module. <code>glob(cb)</code>&nbsp;is callback-based asynchronous function. Promise are easier to maintain. The  built-in&nbsp;<code>util</code>&nbsp;module provides a very useful helper called&nbsp;<code>util.promisify(callbackBasedFunc)</code>. See the&nbsp;<a href="https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original" target="_blank" rel="noreferrer noopener">documentation</a>.</p>



<p>Example of valid glob expressions:</p>



<ul><li><code>./path/to/file.txt</code>&nbsp;matches only a single file.</li><li><code>./path/to/*.txt</code>&nbsp;matches&nbsp;<code>./path/to/file.txt</code>, but not&nbsp;<code>./path/to/deep/file.txt</code>.</li><li><code>./path/to/**/*.txt</code> matches&nbsp;<code>./path/to/file.txt</code> and <code>./path/to/deep/file.txt</code>.</li></ul>



<p>The expected output:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-32" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash">$ node dist/index --inputFiles=<span class="hljs-string">'../samples/*.txt'</span>
[
  <span class="hljs-string">'../samples/1.txt'</span>,  <span class="hljs-string">'../samples/10.txt'</span>, <span class="hljs-string">'../samples/11.txt'</span>,
  <span class="hljs-string">'../samples/12.txt'</span>, <span class="hljs-string">'../samples/13.txt'</span>, <span class="hljs-string">'../samples/14.txt'</span>,
  <span class="hljs-string">'../samples/15.txt'</span>, <span class="hljs-string">'../samples/16.txt'</span>, <span class="hljs-string">'../samples/17.txt'</span>,
  <span class="hljs-string">'../samples/18.txt'</span>, <span class="hljs-string">'../samples/19.txt'</span>, <span class="hljs-string">'../samples/2.txt'</span>,
  <span class="hljs-string">'../samples/20.txt'</span>, <span class="hljs-string">'../samples/21.txt'</span>, <span class="hljs-string">'../samples/22.txt'</span>,
  <span class="hljs-string">'../samples/23.txt'</span>, <span class="hljs-string">'../samples/24.txt'</span>, <span class="hljs-string">'../samples/25.txt'</span>,
  <span class="hljs-string">'../samples/26.txt'</span>, <span class="hljs-string">'../samples/27.txt'</span>, <span class="hljs-string">'../samples/28.txt'</span>,
  <span class="hljs-string">'../samples/29.txt'</span>, <span class="hljs-string">'../samples/3.txt'</span>,  <span class="hljs-string">'../samples/30.txt'</span>,
  <span class="hljs-string">'../samples/31.txt'</span>, <span class="hljs-string">'../samples/32.txt'</span>, <span class="hljs-string">'../samples/33.txt'</span>,
  <span class="hljs-string">'../samples/34.txt'</span>, <span class="hljs-string">'../samples/35.txt'</span>, <span class="hljs-string">'../samples/36.txt'</span>,
  <span class="hljs-string">'../samples/37.txt'</span>, <span class="hljs-string">'../samples/38.txt'</span>, <span class="hljs-string">'../samples/39.txt'</span>,
  <span class="hljs-string">'../samples/4.txt'</span>,  <span class="hljs-string">'../samples/40.txt'</span>, <span class="hljs-string">'../samples/41.txt'</span>,
  <span class="hljs-string">'../samples/42.txt'</span>, <span class="hljs-string">'../samples/43.txt'</span>, <span class="hljs-string">'../samples/44.txt'</span>,
  <span class="hljs-string">'../samples/45.txt'</span>, <span class="hljs-string">'../samples/46.txt'</span>, <span class="hljs-string">'../samples/47.txt'</span>,
  <span class="hljs-string">'../samples/48.txt'</span>, <span class="hljs-string">'../samples/49.txt'</span>, <span class="hljs-string">'../samples/5.txt'</span>,
  <span class="hljs-string">'../samples/50.txt'</span>, <span class="hljs-string">'../samples/51.txt'</span>, <span class="hljs-string">'../samples/52.txt'</span>,
  <span class="hljs-string">'../samples/53.txt'</span>, <span class="hljs-string">'../samples/54.txt'</span>, <span class="hljs-string">'../samples/55.txt'</span>,
  <span class="hljs-string">'../samples/56.txt'</span>, <span class="hljs-string">'../samples/57.txt'</span>, <span class="hljs-string">'../samples/58.txt'</span>,
  <span class="hljs-string">'../samples/59.txt'</span>, <span class="hljs-string">'../samples/6.txt'</span>,  <span class="hljs-string">'../samples/60.txt'</span>,
  <span class="hljs-string">'../samples/61.txt'</span>, <span class="hljs-string">'../samples/62.txt'</span>, <span class="hljs-string">'../samples/63.txt'</span>,
  <span class="hljs-string">'../samples/64.txt'</span>, <span class="hljs-string">'../samples/65.txt'</span>, <span class="hljs-string">'../samples/66.txt'</span>,
  <span class="hljs-string">'../samples/67.txt'</span>, <span class="hljs-string">'../samples/68.txt'</span>, <span class="hljs-string">'../samples/69.txt'</span>,
  <span class="hljs-string">'../samples/7.txt'</span>,  <span class="hljs-string">'../samples/70.txt'</span>, <span class="hljs-string">'../samples/71.txt'</span>,
  <span class="hljs-string">'../samples/8.txt'</span>,  <span class="hljs-string">'../samples/9.txt'</span>
]</code></div><small class="shcb-language" id="shcb-language-32"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<h5><strong>Read each <code>inputFile</code> and put its content into an array</strong></h5>



<p>Each item of the array should contain both a way to locate original file (such a path) and, of course, the file content:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-33" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">const</span> loadedFiles: { path: <span class="hljs-built_in">string</span>, content: <span class="hljs-built_in">string</span> }[] = []</code></div><small class="shcb-language" id="shcb-language-33"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<h4><strong>Implement a function that finds clusters of similar submissions</strong></h4>



<p>This function must be implemented into its own module, with that prototype:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-34" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">interface</span> Sample {
  content: <span class="hljs-built_in">string</span>
  path: <span class="hljs-built_in">string</span>
}

<span class="hljs-comment">/**
 * Groups samples into cluster depending on how similar they are.
 * If a sample not far from all other samples, it is not returned.
 * A cluster is basically an array of samples, and this function returns a array of clusters.
 * Each sample has both an identifier (ex. the path to the original file) and a content.
 */</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">computePlagiarismClusters</span> (<span class="hljs-params">
  samples: Sample[],
  options: { clusterScore: <span class="hljs-built_in">number</span> }
</span>): <span class="hljs-title">Sample</span>[][] </span>{
  <span class="hljs-keyword">return</span> []
}</code></div><small class="shcb-language" id="shcb-language-34"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>You are encouraged to think this algorithm the way you want. It will not be graded.</p>



<p>If you do not know how to start, you can look the following naive, but yet efficient algorithm. It heavily relies on&nbsp;<code>natural</code>&nbsp;package features.</p>



<ol><li>Install the&nbsp;<code>natural</code>&nbsp;package, which is natural language manipulation library;</li><li>Split input texts into arrays of tokens&nbsp;<a href="https://naturalnode.github.io/natural/Tokenizers.html">using Tokenizers</a>;</li><li>Reduce each token to its&nbsp;<a href="https://en.wikipedia.org/wiki/Word_stem">word stem</a>&nbsp;through&nbsp;<a href="http://naturalnode.github.io/natural/stemmers.html">Stemmers</a>;</li><li>Compute similarity score of 2 cleaned inputs based on&nbsp;<a href="http://naturalnode.github.io/natural/string_distance.html">Levenshtein distance</a>.</li><li>Group in clusters detected fraudulent samples using the previous scoring method (remember a cluster may contain more than 2 samples).</li></ol>



<figure class="wp-block-table"><table><thead><tr><th>&#8211;clusterScore</th><th>Nb of discovered clusters</th><th>Files</th></tr></thead><tbody><tr><td>0.9</td><td>1</td><td>&#8211; 5.txt, 63.txt, 69.txt</td></tr><tr><td>0.8</td><td>2</td><td>&#8211; 5.txt, 63.txt, 69.txt<br>&#8211; 18.txt, 32.txt</td></tr></tbody></table><figcaption>By applying myself the previous tips, I was able to detect those clusters.</figcaption></figure>



<h5>Code demonstration: adding automated specs 🎯</h5>



<p>I will write some specs using <a href="https://mochajs.org/" target="_blank" rel="noreferrer noopener">mocha</a> for <code>computePlagiarismClusters</code>.</p>



<h5><strong>Output the result depending on CLI arguments</strong></h5>



<p>For that exercise, you can use your own implementation of <code>computePlagiarismClusters</code> or my proposal of correction.</p>



<p>Properly implement&nbsp;<code>format</code>&nbsp;and&nbsp;<code>outputFile</code>.</p>



<h5>Code demonstration: create a standalone npm package 🎯</h5>



<p class="u-mbs">I will extract <strong>Plagiarism detection code</strong> to its own package:</p>



<ul><li>As a local folder that I may manually install using <a href="https://docs.npmjs.com/cli/v7/commands/npm-link" target="_blank" rel="noreferrer noopener">npm link</a>.</li><li>As a git repository that I may reference in my package.json.</li></ul>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/04-backend/practical-activity-simple-plagiarism-detection-cli/">01. Simple plagiarism detection CLI (pratical activity)</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
