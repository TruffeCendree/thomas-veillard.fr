<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>01. Introduction &#8211; Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/category/front-end-web-development/introduction/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/</link>
	<description>Mes cours et supports pÃ©dagogiques pour l&#039;enseignement de l&#039;ingÃ©nierie informatique.</description>
	<lastBuildDate>Sat, 31 Jul 2021 05:01:55 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.4</generator>
	<item>
		<title>05. What can the web do today ?</title>
		<link>https://thomas-veillard.fr/front-end-web-development/introduction/5-what-can-the-web-do-today/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:03:36 +0000</pubDate>
				<category><![CDATA[01. Introduction]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1780</guid>

					<description><![CDATA[<p>Although HTML is a markup language for structuring the content, HTML5 standard also specified new APIs for Javascript and the browser. You can find an overview of these features on https://whatwebcando.today./ You may be surprised for example that your app can delegate payment to the customer&#8217;s browser! Examples about connectivity Nowadays, your front-end application can &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/introduction/5-what-can-the-web-do-today/" class="more-link">Continuer la lecture de <span class="screen-reader-text">05. What can the web do today ?</span></a></p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/introduction/5-what-can-the-web-do-today/">05. What can the web do today ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Although HTML is a markup language for structuring the content, <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5" target="_blank" rel="noreferrer noopener">HTML5 standard</a> also specified new APIs for Javascript and the browser.</p>



<p>You can find an overview of these features on <a href="https://whatwebcando.today/" target="_blank" rel="noreferrer noopener">https://whatwebcando.today/</a>. You may be surprised for example that your app can delegate payment to the customer&rsquo;s browser!</p>



<figure class="wp-block-image size-large"><img src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Your-browser-can-process-payments.png" alt="" class="wp-image-1788"/><figcaption>Demonstration of <a href="https://whatwebcando.today/payments.html" target="_blank" rel="noreferrer noopener">Payments API</a>, allowing app to delegate all the shipping process to the browser. This includes price summary, payment card registration, etc.</figcaption></figure>



<h4>Examples about connectivity</h4>



<p>Nowadays, your front-end application can receive or send events to the server in real time. Depending on your needs, you may use:</p>



<ul><li>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" target="_blank" rel="noreferrer noopener">WebSocket API</a> for a bidirectional connection.</li><li>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events" target="_blank" rel="noreferrer noopener">server-sent events</a> to send events from the server to the client (simpler backend architecture).</li></ul>



<h4>Examples about media</h4>



<p>Your browser also probably supports audio and video stream real-time communication via <a href="https://developer.mozilla.org/fr/docs/WebRTC" target="_blank" rel="noreferrer noopener">WebRTC</a>. This API leverages media capacities (including built-in audio and video codecs, stream recording from microphones, webcams and screens&#8230;).</p>



<p>Also, 2D and 3D rendering through the GPU are available thanks to <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="noreferrer noopener">Canvas API</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API" target="_blank" rel="noreferrer noopener">WebGL API</a>.</p>



<h4>Your browser is a database management system</h4>



<p>There are various ways to store data on the client side. Here some of them:</p>



<ul><li><a href="https://developer.mozilla.org/fr/docs/Web/HTTP/Cookies" target="_blank" rel="noreferrer noopener">Cookies</a> are short plain-text payloads the server lets on the client. The client sends them to the server on each HTTP(s) request. Cookies are useful to build session persistence for authentication.</li><li>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer noopener">localStorage</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage" target="_blank" rel="noreferrer noopener">sessionStorage</a> are key-value databases able to store strings. You may serialise small objects with <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/JSON/stringify" target="_blank" rel="noreferrer noopener">JSON.stringify</a>.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noreferrer noopener">IndexedDB</a> is a transactional database system (kind of RDBMS) allowing you application to store large amount of data in the browser (many GB ðŸ¤©).</li></ul>



<h4>To conclude</h4>



<p>The browser is a rich platform allowing running complex applications with strong APIs and a lot of features.</p>



<p>Before using any of these features, you may refer to <a href="https://caniuse.com/" target="_blank" rel="noreferrer noopener">https://caniuse.com/</a> for current support across active browsers on the market.</p>



<p> </p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/introduction/5-what-can-the-web-do-today/">05. What can the web do today ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>04. Using web tools to build something else</title>
		<link>https://thomas-veillard.fr/front-end-web-development/introduction/using-web-technologies-to-build-something-else/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 10:02:36 +0000</pubDate>
				<category><![CDATA[01. Introduction]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1440</guid>

					<description><![CDATA[<p>For desktops and phones Since front-end technologies were so convenient, developers found ways to reuse web technologies in other contexts. This targets specially desktop and phone app. The idea is always the same: to write an application using HTML/CSS/JS and bundle it inside a webview. Everything related to the browser UI is hidden. The user &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/introduction/using-web-technologies-to-build-something-else/" class="more-link">Continuer la lecture de <span class="screen-reader-text">04. Using web tools to build something else</span></a></p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/introduction/using-web-technologies-to-build-something-else/">04. Using web tools to build something else</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>For desktops and phones</h4>



<p>Since front-end technologies were so convenient, developers found ways to reuse web technologies in other contexts. This targets specially desktop and phone app.</p>



<p>The idea is always the same: to write an application using HTML/CSS/JS and bundle it inside a webview. Everything related to the browser UI is hidden. The user only see what the developer wants to show.</p>



<p>Once packaged, the user does not see any difference compared to another software. It installs itself in the same way as native software. On Android, the application can be exported as an APK/AAB file and shipped via Google Play. On iOS, you submit an IPA file to the App Store Connect.</p>



<blockquote class="wp-block-quote"><p>Write once, run everywhere. ðŸŽ‰</p><cite>Originally a <a href="https://en.wikipedia.org/wiki/Write_once,_run_anywhere" target="_blank" rel="noreferrer noopener">quote of Java</a>.</cite></blockquote>



<p>This sentence summarises another benefit of sharing your codebase between the website version and the desktop/phone version. You only have a single codebase to maintain, so features are immediately available on all platforms. Finally, you may conditionally enable some features depending on the running environment capabilities.</p>



<p>Users may expect more features in an app that they installed compared to the web version. Effectively, by packaging your application using <code>Electron</code> or <code>Cordova</code>, you got access to advanced features and OS integrations. That is possible because <code>Electron</code> and <code>Cordova</code> trust your code.</p>



<p>Conversely, the browser has to deal with security issues. It always considers the website as mistrusted code running on your computer. It must sandbox and protect itself from it. For that reason, APIs like direct access to filesystems from the website are unavailable. </p>



<h4>For command line and back-end</h4>



<p>Nowadays, Javascript can run outside the browser. The leader platform is Node.js, built on top of the Chromium Javascript engine (V8). Node.js powers various cli tools (including those we will use in this module) and HTTP servers.</p>



<p>For developers, using the same languages for front-end and back-end improve productivity.</p>



<ul><li>There is only a single language to master.</li><li>Your stack is consistent and you may reuse dependencies across front and back.</li><li>You can share code between front and back.</li></ul>



<h4>For website thumb (screenshot) and PDF generation</h4>



<p>Major browsers provide a headless mode that launches the browser without opening a window. Those browsers can be controlled from an external process in non-graphical environments.</p>



<p>This allows the external process (aka. your running application) to render pages and handle interactions like a normal user. Here some common usages:</p>



<ul><li>automatise in-browser tests ;</li><li>scrap a page once the client-side JavaScript has changed the DOM ;</li><li>generate screenshot of a website ;</li><li>export a page to PDF file ;</li><li>etc.</li></ul>



<p>Most commonly generated files are images, documents and spreadsheets. Building a word document or a PDF file, especially with advanced layout and variable content length is a pain. On another side, generating an HTML page and render it in the browser is a lot simpler.</p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/introduction/using-web-technologies-to-build-something-else/">04. Using web tools to build something else</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>03. How rich and interactive is this UI ?</title>
		<link>https://thomas-veillard.fr/front-end-web-development/introduction/how-rich-interactive-and-complex-is-this-ui/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Fri, 05 Feb 2021 08:38:14 +0000</pubDate>
				<category><![CDATA[01. Introduction]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1394</guid>

					<description><![CDATA[<p>The layout The layout is the way blocks are organized and sized. The Â«Â add serverÂ Â» page&#8217;s layout is composed of 4 main blocks: a header, containing site identity, notification centre and accesses to other parts of the customer portal ; a left menu, to navigate between the cloud portal features ; a content area, where &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/introduction/how-rich-interactive-and-complex-is-this-ui/" class="more-link">Continuer la lecture de <span class="screen-reader-text">03. How rich and interactive is this UI ?</span></a></p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/introduction/how-rich-interactive-and-complex-is-this-ui/">03. How rich and interactive is this UI ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-image size-large"><img src="https://thomas-veillard.fr/wp-content/uploads/2021/02/How-rich-can-be-a-web-ui-.gif" alt="" class="wp-image-1395"/><figcaption>The control panel of Hetzner Cloud, which is a nice example of Single Page Application.</figcaption></figure>



<h4>The layout</h4>



<p>The layout is the way blocks are organized and sized. The Â«Â add serverÂ Â» page&rsquo;s layout is composed of 4 main blocks:</p>



<ul><li>a header, containing site identity, notification centre and accesses to other parts of the customer portal ;</li><li>a left menu, to navigate between the cloud portal features ;</li><li>a content area, where the form takes place ;</li><li>a floating footer summarizing the delivery.</li></ul>



<h4>The form</h4>



<p>The form itself is highly interactive. Actions available at a step depends on a combination of previous choices. It opens modals containing another embedded form, computes the total price on the client side, prints warnings for misconfigurations, etc. All computations related to content are powered by Javascript. Under the hood, this panel is powered by angular (at the time I wrote this post).</p>



<h4>The style</h4>



<p>Fonts, colours, backgrounds, gradients, border radiuses, margins, paddings, text positioning and so much more are handled by the browser rendering engine for you. </p>



<p>Imagine how complex it could be to round corners and center text of the following block if you had to deal with raw pixels&#8230; But that is so simple with CSS.</p>





<p class="my-rounded-block">Example of paragraph with background and rounded border.</p>



<div class="wp-block-columns">
<div class="wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="CSS" data-shcb-language-slug="css"><div><code class="hljs language-css"><span class="hljs-selector-class">.my-rounded-block</span> {
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffecb8</span>;
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#795548</span>;
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;
  <span class="hljs-attribute">text-align</span>: center;
}</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Langage du codeÂ :</span> <span class="shcb-language__name">CSS</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">css</span><span class="shcb-language__paren">)</span></small></pre></div>



<div class="wp-block-column"><pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-rounded-block"</span>&gt;</span>
  Example of paragraph with background and rounded border.
<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Langage du codeÂ :</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre></div>
</div>



<h4>Animations</h4>



<p>Building animations from scratch is something difficult. You must write mathematical functions describing the transformation, then compute each frame and render them. Your goal is to achieve 60 images per second, which requires optimisations.</p>



<p>Thanks to CSS3, animations are now easy to build. You just describe an initial and final state. The browser handle the rest. It even selects the best hardware available for the task and does concessions to maintain the framerate.</p>



<p>Animations give feedback to the user. They also make the UI interaction fluid. Some examples:</p>



<ul><li>The colour of a button changes on hover, on focus or on click.</li><li>Newly created elements inside the page are highlighted on append.</li></ul>



<p>This example of app illustrates perfectly why web technologies are so efficient for UI/UX compared to dinosaurs ðŸ¦–. (Hi JAVA and its Swing UI framework !)</p>
<style class="advgb-styles-renderer">
.my-rounded-block {
  background-color: #ffecb8;
  border: 1px solid #795548;
  border-radius: 3px;
  text-align: center;
}
</style><p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/introduction/how-rich-interactive-and-complex-is-this-ui/">03. How rich and interactive is this UI ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>02. Why are web technologies so popular ?</title>
		<link>https://thomas-veillard.fr/front-end-web-development/introduction/why-are-web-technologies-so-popular/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sun, 24 Jan 2021 08:24:00 +0000</pubDate>
				<category><![CDATA[01. Introduction]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1342</guid>

					<description><![CDATA[<p>They are cross-platform. End user just needs a browser. The primary homes of front-end technologies are browsers themselves. Those browsers exist in almost any operating system. That is true for computers (Windows, MacOs, GNU/Linux&#8230;) as for phones and pads (Android, iOS&#8230;). If the end user is running an up-to-date browser, it immediately access all web &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/introduction/why-are-web-technologies-so-popular/" class="more-link">Continuer la lecture de <span class="screen-reader-text">02. Why are web technologies so popular ?</span></a></p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/introduction/why-are-web-technologies-so-popular/">02. Why are web technologies so popular ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>They are cross-platform. End user just needs a browser.</h4>



<p>The primary homes of front-end technologies are browsers themselves. Those browsers exist in almost any operating system. That is true for computers (Windows, MacOs, GNU/Linux&#8230;) as for phones and pads (Android, iOS&#8230;).</p>



<p>If the end user is running an up-to-date browser, it immediately access all web applications published on the Internet.</p>



<h4>They are well known, mature and still evolving.</h4>



<p>The web is not born yesterday. So the community learned from its experience. Nowadays, the web is a good place for standards. Standards ensure your projects will still work in decades if you strictly rely on them.</p>



<p>Have you seen the <a href="http://info.cern.ch/" target="_blank" rel="noreferrer noopener">first website ever built</a> ? It is still online and fully functional because it followed standards.</p>



<p>Of course, the web continues to grow and standards to evolve.</p>



<h4>Building rich and responsive UI is easy.</h4>



<p>The core business of web browsers is to render pages. As you can expect, browsers perform very well at this task.</p>



<p>From the point of view of web developers, you first have to write your content (with HTML). Then, you build the layout and apply styles thanks to CSS. Those two languages are quick and easy to learn. And they are so powerful (specially CSS which handles all the complexity).</p>



<h4>Javascript allows complex interaction inside the browser.</h4>



<p>Javascript comes from the old days of the Web. At this time, HTML and CSS were produced on server. Javascript purpose was to add a bit of dynamicity on the client-side. For example, it allowed:</p>



<ul><li>to animate elements (now replaced by CSS3 animations) ;</li><li>to apply minor changes to the page on user interaction (like showing or hiding a block when the user clicks a button).</li></ul>



<p>At that time, websites were organised in 2 categories:</p>



<ul><li><strong>Static websites</strong> when the content is served as it is stored on the server&rsquo;s disk. Every user sees the same content, which does not change between deployments.</li><li><strong>Dynamic websites</strong> when the server generates the page (mainly the HTML). The server can customise the page based on current identity, other user contributions, entries in the database&#8230;</li></ul>



<p class="has-text-align-center">***</p>



<p>Last decade, the JavaScript language and its ecosystem have matured. A lot of frameworks help developers to produce all the HTML (and potentially the CSS) using only Javascript on the client side.</p>



<blockquote class="wp-block-quote"><p>We call that kind of applications Â«Â Single Page ApplicationÂ Â».</p></blockquote>



<p>Even when a user clicks a link, the new page is produced by JavaScript and may not trigger any job on the server.</p>



<h4>If both building and rendering the page can be done on client-side, is there still a place for servers ?</h4>



<p>It depends on your need. Some tasks, like authentication and authorisation can only run in trusted environments. Some other requires infrastructure, like files and contents sharing.</p>



<h4>Ecosystem is rich of tools</h4>



<p>During this module, you will discover some tools. First of all, your browser includes a lot of utilities like an element inspector, a JavaScript debugger, a network analyser, etc. You will also import and manage dependencies (that contains reusable code) using package managers. And so much more.</p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/introduction/why-are-web-technologies-so-popular/">02. Why are web technologies so popular ?</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>01. Introduction &#038; prerequisites</title>
		<link>https://thomas-veillard.fr/front-end-web-development/introduction/introduction/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sun, 24 Jan 2021 08:23:21 +0000</pubDate>
				<category><![CDATA[01. Introduction]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=884</guid>

					<description><![CDATA[<p>This course is about creating front-end applications, with modern web technologies. Important note Despite this module is an additional resource for my in-class teachings, you can follow it on your own as a standalone online course. Depending on the school&#8217;s preference for each course instance, the learning outcomes and tools may be slightly different. For &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/introduction/introduction/" class="more-link">Continuer la lecture de <span class="screen-reader-text">01. Introduction &#038; prerequisites</span></a></p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/introduction/introduction/">01. Introduction &#038; prerequisites</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>This course is about creating front-end applications, with modern web technologies. </p>



<h4>Important note</h4>



<p>Despite this module is an additional resource for my in-class teachings, you can follow it on your own as a standalone online course.</p>



<p>Depending on the school&rsquo;s preference for each course instance, the learning outcomes and tools may be slightly different. For that reason, varying parts are extracted into optional standalone sections.</p>



<p>For example, you may choice to ignore the <code>Angular</code>-related chapiters if you are focusing on <code>Vue.js</code>. The <code>Typescript</code>-related chapiters are optional if you do not learn <code>Angular</code>. Etc.</p>



<h4>Learning objectives</h4>



<ul><li>Build modern web interfaces with Single Page Applications.</li><li>Understand the Event-oriented programming paradigm.</li><li>Manage your code source and collaborate with Git and Git Flow workflow.</li><li>Manage your dependencies with npm.</li><li>Write quality code (good practices, modularity, static typing with TS&#8230;)</li><li>Get an overview of web ecosystem (usages, tools, pro and cons&#8230;).</li></ul>



<h4>Skills</h4>



<p>This teaching assumes you know the basics of HTML and CSS, besides having knowledge of algorithmic and software programming (including object-oriented concepts). If that is not the case, please consider the following resources. They are quick and basic.</p>



<ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started" target="_blank" rel="noreferrer noopener">Getting started with HTML</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works" target="_blank" rel="noreferrer noopener">How CSS works</a></li></ul>



<h4>Tools</h4>



<p>For end users, Front-end web technologies only require a modern browser. The operating system is not revelant anymore.</p>



<p>That is also true to a lesser extent for web developers. Most build tools work on any operating system. Nonetheless, your experience may drastically differ and some tasks harder to complete.</p>



<p>You are free to use Windows, MacOS or Linux. If you use Windows, you may have some difficulties to install Docker, which is a strong requirement for practical works.</p>



<p>My demonstrations will occur on a Linux Ubuntu system. You can get closer to this setup by installing a GNU/Linux distribution in a virtual machine.</p>



<p><strong>Before the first lecture, please:</strong></p>



<ul><li>bring your own computer, you will need it;</li><li>install <a href="https://nodejs.org/en/" target="_blank" rel="noreferrer noopener">Node.js</a>, as it is required for building applications. On Linux, prefer using <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer noopener">nvm</a>.</li><li>install a decent IDE or editor for web development like VSCode or WebStorm;</li></ul>



<p></p>
<p>Lâ€™article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/introduction/introduction/">01. Introduction &#038; prerequisites</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
