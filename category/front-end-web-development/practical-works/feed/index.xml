<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Practical works &#8211; Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/category/front-end-web-development/practical-works/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/</link>
	<description>Mes cours et supports pédagogiques pour l&#039;enseignement de l&#039;ingénierie informatique.</description>
	<lastBuildDate>Wed, 03 Mar 2021 20:57:13 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.6.2</generator>
	<item>
		<title>3. The booking experience</title>
		<link>https://thomas-veillard.fr/front-end-web-development/practical-works/the-booking-experience/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 09 Feb 2021 09:00:02 +0000</pubDate>
				<category><![CDATA[Front-end web development]]></category>
		<category><![CDATA[Practical works]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=2008</guid>

					<description><![CDATA[<p>Learning objectives &#38; expected results During this practical activity, you will build the booking experience and take care of business logic. That is the opportunity to: be more autonomous than during the last practical work ; build more complex forms than previous login component ; split the form in reusable components ; use @Input() and &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/the-booking-experience/" class="more-link">Continuer la lecture de <span class="screen-reader-text">3. The booking experience</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/the-booking-experience/">3. The booking experience</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning objectives &amp; expected results</h4>



<p>During this practical activity, you will build the booking experience and take care of business logic.</p>



<p>That is the opportunity to:</p>



<ul><li>be more autonomous than during the last practical work ;</li><li>build more complex forms than previous login component ;</li><li>split the form in reusable components ;</li><li>use <code>@Input()</code> and <code>@Output()</code> data bindings on component boundaries ;</li><li>manage the state of the application and persistence across form steps ;</li><li>train yourself with async http requests and angular services ;</li><li>think about your UI and UX, so it is convenient for customer ;</li><li>use directives such as <code>*ngIf</code> and <code>*ngFor</code>, template variables, etc.</li></ul>



<p>Your booking experience must satisfy the following requirements:</p>



<ol><li>The customer initiates the booking from the home page. It provides the location of the delivery (postal code or city name). This user input is validated against Openstreetmap API and geocoded.</li><li>Geocoded postal address (latitude and longitude) is sent to the server. If zone is covered, the customer goes on next step. Else, an explanation is displayed.</li><li>The customer provides basic informations describing the service (start date and time, duration).</li><li>All collected data are sent to the server, which revolves available employees. The user selects one proposal.</li><li>At that time, it may be unauthenticated or unregistered. The user logs in or creates a new customer account. Then it confirms the booking.</li></ol>



<h4>Let&rsquo;s go !</h4>



<p class="exercice"><strong>Exercise 1</strong>: Start a new feature branch and call it <code>booking-experience</code>.</p>



<p class="exercice"><strong>Exercise 2</strong>: You know more components will be created&#8230; Take a few minutes to reorganise your project, so it looks like the following tree.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">src
 ↳ app
    ↳ decorators         <span class="hljs-comment"># empty for now. Will contain typescript decorators.</span>
    ↳ guards             <span class="hljs-comment"># contains guards for @angular/router.</span>
    ↳ routes             <span class="hljs-comment"># contains components respecting the same tree structure as URL paths.</span>
       ↳ home
       ↳ login
       ↳ profile
    ↳ services           <span class="hljs-comment"># contains angular services.</span>
    ↳ shared             <span class="hljs-comment"># empty for now. Will contain shared and reusable components.</span></code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>

<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/24f0d2ac3d0754605b25769e5ec33d98698163f9/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/24f0d2ac3d0754605b25769e5ec33d98698163f9" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>Home page</h4>



<figure class="wp-block-image size-large"><img loading="lazy" width="1242" height="498" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-input-with-geocoding.gif" alt="" class="wp-image-2038"/><figcaption>The customer enters a city, postal code or postal address, which is geocoded using nominatim API.</figcaption></figure>



<p>I give you some pieces of code that you may reuse. First of all, the <code>GeocodeService</code> can query the <code>nominatim</code> to search places.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// src/app/services/geocode.service.ts</span>
<span class="hljs-keyword">import</span> { HttpClient } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/common/http'</span>;
<span class="hljs-keyword">import</span> { Injectable } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> NominatimResult {
  display_name: <span class="hljs-built_in">string</span>
  importance: <span class="hljs-built_in">number</span>  
  lat: <span class="hljs-built_in">string</span>
  lon: <span class="hljs-built_in">string</span>
}

<span class="hljs-meta">@Injectable</span>({
  providedIn: <span class="hljs-string">'root'</span>
})
<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> GeocodeService {
  <span class="hljs-keyword">constructor</span> (<span class="hljs-params"><span class="hljs-keyword">private</span> httpClient: HttpClient</span>) {}

  geocodeCity (postalAddress: <span class="hljs-built_in">string</span>, country = <span class="hljs-string">'fr'</span>): NominatimResult[] {
    <span class="hljs-comment">// no API call if input is too short</span>
    <span class="hljs-keyword">if</span> (postalAddress.length &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> [];

    <span class="hljs-comment">// find OpenStreetMap nominatim API documention at https://nominatim.org/release-docs/latest/api/Search/</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.httpClient.get(<span class="hljs-string">`https://nominatim.openstreetmap.org/search?format=json&amp;featuretype=city&amp;countrycodes=<span class="hljs-subst">${country}</span>&amp;q=<span class="hljs-subst">${postalAddress}</span>`</span>).toPromise() <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>;
  }
}
</code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Also, you <strong>must</strong> debounce HTTP calls to OpenStreetMap API. In other words, do not call the geocoding API until the customer stopped writing for 1 second. I provide you ready to use typescript decorator, usable on your callback component method.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-3" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">// src/app/decorators/debounce.decorator.ts</span>
<span class="hljs-comment">/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was invoked.
 * 
 * See https://blog.bitsrc.io/3-ways-to-debounce-http-requests-in-angular-c407eb165ada
 * 
 * Usage:
 * @Debounce(750)
 * static methodToDebound (args: any) {}
 */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Debounce</span> (<span class="hljs-params">ms: <span class="hljs-built_in">number</span></span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target: <span class="hljs-built_in">any</span>, key: <span class="hljs-built_in">any</span>, descriptor: <span class="hljs-built_in">any</span></span>) </span>{
    <span class="hljs-keyword">const</span> oldFunc = descriptor.value
    <span class="hljs-keyword">const</span> newFunc = debounce(oldFunc, ms)
    descriptor.value = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
      <span class="hljs-keyword">return</span> newFunc.apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>)
    }
  }
}

<span class="hljs-comment">/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was invoked.
 * See more at https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore.
 */</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>&lt;<span class="hljs-title">F</span> <span class="hljs-title">extends</span> <span class="hljs-title">Function</span>&gt;(<span class="hljs-params">func: F, wait: <span class="hljs-built_in">number</span>, immediate = <span class="hljs-literal">false</span></span>): <span class="hljs-title">F</span> </span>{
  <span class="hljs-keyword">let</span> timeout: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span>;

  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-comment">// @ts-ignore</span>
    <span class="hljs-keyword">let</span> context = <span class="hljs-keyword">this</span>, args = <span class="hljs-built_in">arguments</span>;

    <span class="hljs-keyword">if</span> (timeout) clearTimeout(timeout);
    timeout = <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
      timeout = <span class="hljs-literal">null</span>;
      <span class="hljs-keyword">if</span> (!immediate) func.apply(context, args);
    }, wait);

    <span class="hljs-keyword">if</span> (immediate &amp;&amp; !timeout) func.apply(context, args);
  } <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>
}</code></div><small class="shcb-language" id="shcb-language-3"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Here an example how to use the decorator.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-4" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">class</span> PostalAddressInputComponent {
  <span class="hljs-meta">@Debounce</span>(<span class="hljs-number">1000</span>)
  <span class="hljs-keyword">async</span> searchAddress (rawPostalAddress: <span class="hljs-built_in">string</span>) {
    <span class="hljs-comment">// trigerred 1 time per second max.</span>
    <span class="hljs-comment">// delayed until the method has not been call for 1 second.</span>
  }
}</code></div><small class="shcb-language" id="shcb-language-4"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Note <code>@angular/material</code> provides ready to use <a href="https://material.angular.io/components/autocomplete/overview" target="_blank" rel="noreferrer noopener">autocomplete field</a> you may import.</p>



<p class="exercice"><strong>Exercise 3</strong>: Build such autocomplete input (as a reusable component) and use it on the home page. You <strong>must</strong> debounce API calls. Also take a few minutes, so your home page looks more friendly.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/cb4425eb3f2f655548c71609d4ac51c47bc0feec/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/cb4425eb3f2f655548c71609d4ac51c47bc0feec" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<figure class="wp-block-image size-large"><img loading="lazy" width="1231" height="489" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/demo-coverage-check.gif" alt="" class="wp-image-2123"/><figcaption>The home page checks if zone is covered before continuing the booking process. </figcaption></figure>



<p class="exercice"><strong>Exercise 4</strong>: Using the <code>POST /api/bookings/coverage</code> endpoint, check if the customer-entered zone is covered. You should handle at least &lsquo;check in progress&rsquo; and &lsquo;uncovered&rsquo; states.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/83ceb34c503bdc8b3d63c01435e2f910a10f172f/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/83ceb34c503bdc8b3d63c01435e2f910a10f172f" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/the-booking-experience/">3. The booking experience</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>2. Managing authentication &#038; routing</title>
		<link>https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 09 Feb 2021 09:00:01 +0000</pubDate>
				<category><![CDATA[Front-end web development]]></category>
		<category><![CDATA[Practical works]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=1125</guid>

					<description><![CDATA[<p>You will build a basic navigation experience, with login capabilities and authenticated area. This is the opportunity to: create your first feature branch on git ; review the code of someone else pull request ; build components, forms and navigation ; write routing configuration with authorisation guards ; work with async processing and error handlers &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/" class="more-link">Continuer la lecture de <span class="screen-reader-text">2. Managing authentication &#038; routing</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/">2. Managing authentication &#038; routing</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>You will build a basic navigation experience, with login capabilities and authenticated area. This is the opportunity to:</p>



<ul><li>create your first feature branch on git ;</li><li>review the code of someone else pull request ;</li><li>build components, forms and navigation ;</li><li>write routing configuration with authorisation guards ;</li><li>work with async processing and error handlers ;</li><li>discover some angular&rsquo;s internals (text interpolation, dependency injection&#8230;).</li></ul>



<h2>Start a feature branch</h2>



<p>In our git workflow, a feature branch contains new code that is still under construction or need a peer review. Once that code seems mature (feature complete and code reviewed), it is merged into the develop branch. Finally, when develop has been well tested, you can create a release and push it to the production.</p>



<p>Of course, the notion of « production » is not applicable to this practical work. But it is appropriate for the project.</p>



<p class="exercice"><strong>Exercise 1</strong>: Start a new feature branch and call it <code>authentication-and-routing</code>. On Github, you should see a branch called <code>feature/authentication-and-routing</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># ensure you are on develop branch.</span>
git checkout develop

<span class="hljs-comment"># create a new local branch, which is even with develop</span>
git checkout -b feature/authentication-<span class="hljs-keyword">and</span>-routing

<span class="hljs-comment"># push it to remote repository</span>
git push --set-upstream origin feature/authentication-<span class="hljs-keyword">and</span>-routing</code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>I encourage you to commit regulary your changes (for example, at the end of each question). You may also reset your workspace to last commit when things go wrong.</p>



<h2>Basic navigation</h2>



<p class="exercice"><strong>Exercise 2</strong>: For this question, find your path using the angular-material <a href="https://material.angular.io/guide/getting-started" target="_blank" rel="noreferrer noopener">getting started guide</a>. Then, import and use the <a href="https://material.angular.io/components/toolbar/overview" target="_blank" rel="noreferrer noopener">mat-toolbar</a> component to display a menu with 3 navigation items (without link). At this step, you can put your code in <code>app.component.html</code>.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="703" height="317" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/image.png" alt="" class="wp-image-1151" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/02/image.png 703w, https://thomas-veillard.fr/wp-content/uploads/2021/02/image-300x135.png 300w" sizes="(max-width: 703px) 100vw, 703px" /><figcaption>The expected result. There is no link yet on &lsquo;home&rsquo;, &lsquo;login&rsquo;&#8230; The item &lsquo;profile&rsquo; is rendered even if the user is not logged. That will change once authentication is ready.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/2520313f41d90c53ca90e510b27b8a0d78679fdf/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/2520313f41d90c53ca90e510b27b8a0d78679fdf" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 3</strong>: Explain the pro and cons of moving the navigation to its own component.</p>



<p>The <code>@angular/cli</code> is able to generate some pieces of code, like a component.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># generate a new component called 'navigation' and reference it in app.module.ts.</span>
$ ng generate component navigation
CREATE src/app/navigation/navigation.component.css (<span class="hljs-number">0</span> bytes)
CREATE src/app/navigation/navigation.component.html (<span class="hljs-number">25</span> bytes)
CREATE src/app/navigation/navigation.component.ts (<span class="hljs-number">291</span> bytes)
UPDATE src/app/app.module.ts (<span class="hljs-number">684</span> bytes)</code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 4</strong>: Commit any existing change on git, then generate a new component called <code>navigation</code>. Examine changes made by <code>@angular/cli</code> (you can use git and the output of <code>ng generate</code> command). Finally, move the mat-toolbar into <code>navigation.component</code>. Visually, the result should be identical.</p>


<div class="wp-block-image" style="text-align: center;">
<figure class="size-large"><img loading="lazy" class="wp-image-1162" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/image-1.png" alt="" width="311" height="154"><figcaption>The new component tree with NavigationComponent. Captured with <a href="https://augury.rangle.io/" target="_blank" rel="noreferrer noopener">Augury</a>.</figcaption></figure>
</div>

<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/f9d1bd55c3069418a8d25c28c628c5e7d95112bf/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/f9d1bd55c3069418a8d25c28c628c5e7d95112bf" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 5</strong>: Generate 3 more components using the cli: <code>home</code>, <code>login</code> and <code>profile</code>. Those components do not have to be included in <code>app.component.html</code> yet. Later, we will let <code>@angular/router</code> dynamically include the right component depending on the current path.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/04f07d3630867a0e483288b2bae1a6e12882c8e0/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/04f07d3630867a0e483288b2bae1a6e12882c8e0" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<div class="exercice" style="padding-bottom: 0; margin-bottom: 1em">
<p><strong>Exercise 6</strong>: Implement 3 routes with <code>@angular/router</code>. Each route will render the eponym component.</p>

<ul style="margin-left: 1em;">
<li><code>/</code> will render <code>home.component</code></li>
<li><code>/login</code> will render <code>login.component</code></li>
<li><code>/profile</code> will render <code>profile.component</code></li>
</ul>

<p>You can use this <a href="https://angular.io/guide/router" target="_blank" rel="noopener">guide</a>. Remember that your project was previously generated with routing enabled. You just have to set up routes and use <code>router-outlet</code> in <code>app.component.html</code>.</p>
</div>



<figure class="wp-block-image size-large"><img loading="lazy" width="919" height="381" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-angular-routes-home-login-and-profile.gif" alt="" class="wp-image-1186"/><figcaption>Expected result. The component is dynamically rendered depending on the route.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/d87a674fddbf150030130be8939f2da71a409d08/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/d87a674fddbf150030130be8939f2da71a409d08" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p class="exercice"><strong>Exercise 7</strong>: Add links to your menu items.</p>



<p class="exercice"><strong>Exercise 8</strong>: Did you use <code>&lt;a href="PATH_OR_URL"&gt;&lt;/a&gt;</code> for your links ? Instead of the <code>href</code> HTML attribute, you must use the <code>routerLink</code> directive. Both ways will technically work, but there are major differences. What are they ?</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="919" height="381" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/routerLink-directive-in-action.gif" alt="" class="wp-image-1196"/><figcaption>Expected result. The user can click links in menu to navigate across views.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/419ccbb35fafeecc33a24e403830700c6521cc54/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/419ccbb35fafeecc33a24e403830700c6521cc54" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Login form</h2>



<p>Forms are a major part of most applications. In angular, you have 2 approaches available: template-driven and reactive. I will use template-driven form in my correction, because they are simple and strong-typable. You have an <a href="https://angular.io/guide/forms" target="_blank" rel="noreferrer noopener">example of template-driven forms</a> in the angular documentation.</p>



<p class="exercice"><strong>Exercise 9</strong>: Add a simple login form. When the user clicks on <code>submit</code> button, open a modal with content of inputs (see <a href="https://developer.mozilla.org/fr/docs/Web/API/Window/alert" target="_blank" rel="noreferrer noopener">window.alert</a>). Email and password fields are required to submit the form. If they are missing, the submit button is disabled.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="938" height="371" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-login-form-template.gif" alt="" class="wp-image-1212"/><figcaption>The login form as expected at this step.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/584e834ba044ac2c88b81c8df6f36edeb7eab798/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/584e834ba044ac2c88b81c8df6f36edeb7eab798" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p>Although this is not a design course, we can probably make this form more beautiful. For this we will use some components from <code>angular-material</code> like we did for the toolbar.</p>



<p class="exercice"><strong>Exercise 10</strong>: Improve the look and feel of the login page. Using <code>angular-material</code> is recommended.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="947" height="512" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/demo-login-form-material-design.gif" alt="" class="wp-image-1219"/><figcaption>The result once I used material components and a bit of CSS.</figcaption></figure>



<p>To achieve this look and feel, I used the following modules:</p>



<ul><li><a href="https://material.angular.io/components/card/overview" target="_blank" rel="noreferrer noopener">MatCardModule</a></li><li><a href="https://material.angular.io/components/form-field/overview" target="_blank" rel="noreferrer noopener">MatFormFieldModule</a> &amp; <a href="https://material.angular.io/components/input/overview" target="_blank" rel="noreferrer noopener">MatInputModule</a> (both works together)</li><li><a href="https://material.angular.io/components/button/overview" target="_blank" rel="noreferrer noopener">MatButtonModule</a></li></ul>



<p>Of course, you are free to layout the page and design the UI like you wish. That is just an example.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="947" height="804" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/login-form-responsive.gif" alt="" class="wp-image-1222"/><figcaption>Bonus: use <a href="https://css-tricks.com/css-media-queries/" target="_blank" rel="noreferrer noopener">CSS media queries</a> to make your form responsive. Your browser includes developers tools simulating phones and pads. They are useful to test your media queries.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/3ad2dcdb56ac6c87d48081cd9bb73f88513a07f7/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/3ad2dcdb56ac6c87d48081cd9bb73f88513a07f7" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<p>The same way we prefer <code>routerLink</code> over <code>href</code> because it does not reload the <code>Single Page Application</code>, you should use the <code>@angular/router</code> from your typescript controller (ex. from your submit method in <code>LoginComponent</code>). Here an example:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;
<span class="hljs-keyword">import</span> { Router } <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/router'</span>;

<span class="hljs-meta">@Component</span>({
  selector: <span class="hljs-string">'app-login'</span>,
  templateUrl: <span class="hljs-string">'./login.component.html'</span>,
  styleUrls: [<span class="hljs-string">'./login.component.css'</span>]
})
<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> LoginComponent {
  <span class="hljs-keyword">constructor</span> (<span class="hljs-params"><span class="hljs-keyword">private</span> router: Router</span>) {}

  <span class="hljs-keyword">async</span> submit () {
    <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.router.navigateByUrl(<span class="hljs-string">'/profile'</span>);
  }
}</code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>

<div class="exercice" style="margin-bottom: 1em;">
<p><strong>Exercise 11</strong>: This example is rich of typescript and angular features. Let&rsquo;s analyse it.</p>
<ul style="margin-left: 1em; margin-bottom: 0;">
<li>How many instance attributes has the <code>LoginComponent</code> class ?</li>
<li>Why is the visibility of <code>router</code> attribute restricted to <code>private</code> ?</li>
<li>Angular detects the class constructor requires an instance of <code>Router</code>. When it instantiates the <code>LoginComponent</code>, it will provide an instance of <code>Router</code>. Take a look at <a href="https://angular.io/guide/dependency-injection" target="_blank" rel="noopener">Angular&rsquo;s dependency injection</a>.</li>
<li><code>@Component</code> is a <a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noopener">decorator</a>. Although it is still a typescript experimental feature, Angular heavily relies on it.</li>
</ul>
</div>


<p>On submit, the form should send credentials to the server (using built-in <code>HttpService</code>). Then, your <code>submit</code> method will deal with the server&rsquo;s response. On success, the user will be redirected to <code>/profile</code>. Finally, he should be notified for any error that occurred.</p>



<p>Remember you have the documentation and playground of API. Also do not forget that calling the server is an <code>async</code> task.</p>



<p class="exercice"><strong>Exercise 12</strong>: Implement the submit method as specified above. For the first iteration, use <code>window.alert</code> to report errors.</p>



<p class="exercice"><strong>Exercise 13</strong>: Take a tour at <a href="https://angular.io/guide/template-syntax" target="_blank" rel="noreferrer noopener">template syntax guide</a>. For this question, you will need <code>text interpolation</code> and <code>*ngIf</code>. Then, report errors in the template itself.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="939" height="518" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/submit-error-handler-in-tempalte.gif" alt="" class="wp-image-1267"/><figcaption>Demonstration of error handler (errors are printed in the template using text interpolation and *ngIf directive).</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/9f6645b9cf8ca31cdd4996e439ab68d27ef87074/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/9f6645b9cf8ca31cdd4996e439ab68d27ef87074" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Using backend type definitions</h2>



<p>Front-end and back-end share some technologies, including the Typescript language. The front-end can benefit from back-end type definition exported by the compiler. You can <a href="https://backend.thomas-veillard.fr/typings.zip" target="_blank" rel="noreferrer noopener">download latest definitions</a> from the backend server.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-8" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># content of the typings.zip archive.</span>

<span class="hljs-comment"># these files contain type definitions of parameters and results of API routes</span>
./dist-typings/routes/auth/post.login.interfaces.d.ts
./dist-typings/routes/api/bookings/post.coverage.interfaces.d.ts
./dist-typings/routes/api/bookings/post.proposals.interfaces.d.ts

<span class="hljs-comment"># these files describe the models</span>
./dist-typings/models/delivery.d.ts
./dist-typings/models/user.d.ts
./dist-typings/models/booking.d.ts
./dist-typings/models/employee-information.d.ts</code></div><small class="shcb-language" id="shcb-language-8"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>Here a simple example of type definition for <code>POST /api/auth/login</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-9" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-comment">/* ./dist-typings/routes/auth/post.login.interfaces.d.ts */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> Auth$LoginParams {
    email: <span class="hljs-built_in">string</span>;
    password: <span class="hljs-built_in">string</span>;
}</code></div><small class="shcb-language" id="shcb-language-9"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Those definitions are up to date with the back-end implementation, since they are derived from it. If any change in the backend is incompatible with the front-end usage, the typescript compiler catches it.</p>



<p>To use those definitions with angular, please unzip the archive under the <code>src</code> folder.</p>



<p> </p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1273" height="767" src="https://thomas-veillard.fr/wp-content/uploads/2021/03/Demo-typings.gif" alt="" class="wp-image-2152"/><figcaption>How to use my back-end type definitions in Angular to add strong types on HTTP calls.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/0e5a4c0075f266ecc3f74016038887fa01c5cd21/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/0e5a4c0075f266ecc3f74016038887fa01c5cd21" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Using services</h2>



<p>Because of the single responsibility principle, components should not fetch data or query the server themselves. That is the responsibility of <a href="https://angular.io/tutorial/toh-pt4" target="_blank" rel="noreferrer noopener">services</a>. This allows testing the behaviour of components by mocking the services it uses.</p>



<p>Services are singleton that persists until the end of the navigation. On their side, components are destroyed as soon as they are detached from the component tree (aka. not used anymore). You can store some state inside the component as long you do not need them outside. Else, you should use services.</p>



<p class="exercice"><strong>Exercise 14</strong>: Using the <code>@angular/cli</code>, generate <code>me.service.ts</code> and implement <code>resolve</code>, <code>login</code> and <code>logout</code> methods. Finally, update accordly the <code>LoginComponent</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-10" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">import</span> { Auth$LoginParams } <span class="hljs-keyword">from</span> <span class="hljs-string">'src/dist-typings/routes/auth/post.login.interfaces'</span>;
<span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">'src/dist-typings/models/user'</span>;

<span class="hljs-keyword">interface</span> IMeService {
  me: User

  <span class="hljs-comment">/**
   * On first call, retrieve the current user identity on /api/users/me.
   * On following calls, use a cached reference (this.me).
   * Returns Promise&lt;User&gt; if logged.
   * Returns Promise&lt;null&gt; otherwise.
   */</span>
  resolve: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;User | <span class="hljs-literal">null</span>&gt;

  <span class="hljs-comment">/**
   * Sends credentials against /auth/login.
   * Throws HttpErrorResponse in case of failure.
   * Returns Promise&lt;void&gt; if success.
   */</span>
  login: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-params">credentials</span>: <span class="hljs-params">Auth</span>$<span class="hljs-params">LoginParams</span></span>) =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt;

  <span class="hljs-comment">/**
   * Sends credentials against /auth/logout.
   * Throws HttpErrorResponse in case of failure.
   * Returns Promise&lt;void&gt; if success.
   */</span>
  logout: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt;
}</code></div><small class="shcb-language" id="shcb-language-10"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>

<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/a3803b0dcef7fd9884ab7eb667db81f32f986e17/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/a3803b0dcef7fd9884ab7eb667db81f32f986e17" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Routing &amp; authentication</h2>



<p>At this step, the application suffers a major bug. It is not aware of the current user session.</p>



<ul><li>The login and profile links are always visible.</li><li>The login form is always available, even for logged users.</li><li>The profile page is accessible without session.</li></ul>



<p>This is because the <code>LoginComponent</code> state is destroyed when the user is redirected. We need to store current user identity somewhere it will persist during navigation. That is the purpose of <a href="https://angular.io/tutorial/toh-pt4" target="_blank" rel="noreferrer noopener">Angular Services</a> (among other things like fetching data). Also, this identity should be retrieved from the server via XHR request on browser page reload.</p>



<h4>The login and profile links are always visible</h4>



<p>Let&rsquo;s start by fixing the first issue. <code>@angular/router</code> can resolve async data from a service when a route is triggered. These data are provided to components by injecting the <code>ActivatedRoute</code> service. Here <a href="https://angular.io/api/router/Resolve" target="_blank" rel="noreferrer noopener">an example</a>.</p>



<p>Hopefully, the <code>MeService</code> on which you will rely is ready. It implements an async method <code>resolve()</code> that returns the current user identity. So it is a valid resolver for <code>@angular.router</code>.</p>



<p>You have to change your routes, so they look like:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-11" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript">  { path: <span class="hljs-string">''</span>, component: HomeComponent, resolve: { me: MeService } },
  { path: <span class="hljs-string">'login'</span>, component: LoginComponent, resolve: { me: MeService } },
  { path: <span class="hljs-string">'profile'</span>, component: ProfileComponent, resolve: { me: MeService } }</code></div><small class="shcb-language" id="shcb-language-11"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Now, components scoped inside the <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>  can access the <code>me</code> property through <code>ActivatedRoute</code> service injection.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-12" data-shcb-language-name="TypeScript" data-shcb-language-slug="typescript"><div><code class="hljs language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> NavigationComponent {
  <span class="hljs-comment">// once initialized, you can use it to dynamically adapt the navigation template.</span>
  me: User;

  <span class="hljs-keyword">constructor</span> (<span class="hljs-params">activatedRoute: ActivatedRoute</span>) {
    <span class="hljs-comment">// When the NavigationComponent is mounted, the MeService has already been resolved.</span>
    <span class="hljs-keyword">this</span>.me = activatedRoute.snapshot.data.me;
  }
}</code></div><small class="shcb-language" id="shcb-language-12"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">TypeScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">typescript</span><span class="shcb-language__paren">)</span></small></pre>


<p>For some reason, <code>ActivatedRoute</code> injection behaves properly only inside the <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>. At this step, you include <code>app-navigation</code> in <code>app.component.html</code>. You must move it to <code>home-component</code>, <code>login-component</code>&#8230;</p>



<p class="exercice"><strong>Exercise 15</strong>: Use  <code>MeService</code> to resolve current user identity on all routes like explained above. Then,  conditionally show or hide the login and profile links depending on resolved (or unresolved) session.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="927" height="502" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-dynamic-navigation-items.gif" alt="" class="wp-image-1640"/><figcaption>Expected result: the « login » link is visible until the user logs in. Then, the profile link should be displayed.</figcaption></figure>



<figure class="wp-block-image size-large"><img loading="lazy" width="927" height="502" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-dynamic-navigation-items-on-reload.gif" alt="" class="wp-image-1642"/><figcaption>The user identity is fetched using MeService when a route is triggered. So, it should retrieve current session even after a browser reload.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/9d5075597a424d82a3e81363bab1445243369adb/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/9d5075597a424d82a3e81363bab1445243369adb" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>The login form is always available, even for logged users.</h4>



<p><a href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/" target="_blank" rel="noreferrer noopener">Angular Guards</a> execute codes when a route is triggered. You already experienced resolvers that are useful to mount components once they fetched data from the API. This time, you need a <code>CanActivate</code> guard.</p>


<pre class="wp-block-code"><div><code class="hljs">ng generate guard unauthenticated
? Which interfaces would you like to implement? CanActivate
CREATE src/app/unauthenticated.guard.spec.ts (386 bytes)
CREATE src/app/unauthenticated.guard.ts (468 bytes)</code></div></pre>


<p class="exercice"><strong>Exercise 16</strong>: Implement <code>UnauthenticatedGuard#canActivate()</code> method. It returns a <code>UrlTree</code> redirecting to <code>/profile</code> if user is already logged. Else, it allows activation of <code>/login</code>.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/5460e9ffa5eaeb2c6ac470ffbd2916d0fef6b3ee/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/5460e9ffa5eaeb2c6ac470ffbd2916d0fef6b3ee" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>The profile page is accessible without session.</h4>



<p class="exercice"><strong>Exercise 17</strong>: Implement <code>AuthenticatedGuard#canActivate()</code> method for <code>/profile</code>.</p>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/bf79236edb6480168294c9fedc9816d08fc810e8/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/bf79236edb6480168294c9fedc9816d08fc810e8" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>The final touch</h2>



<p class="exercice"><strong>Exercise 18</strong>: A logout button would be great. Add it to the navigation. Optionally, you may import an icon library like <a href="https://fontawesome.com/" target="_blank" rel="noreferrer noopener">FontAwesome</a> (see <a href="https://www.npmjs.com/package/@fortawesome/angular-fontawesome" target="_blank" rel="noreferrer noopener">package for angular</a>).</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="934" height="511" src="https://thomas-veillard.fr/wp-content/uploads/2021/02/Demo-logout-button-with-fontawesome-and-mattooltip.gif" alt="" class="wp-image-1750"/><figcaption>A simple logout button using <a href="https://www.npmjs.com/package/@fortawesome/angular-fontawesome" target="_blank" rel="noreferrer noopener">FontAwesome</a>, <a href="https://material.angular.io/components/button/overview" target="_blank" rel="noreferrer noopener">MatButton</a> and <a href="https://material.angular.io/components/tooltip/overview" target="_blank" rel="noreferrer noopener">MatTooltip</a>.</figcaption></figure>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/da4ce36840a24c86d5cfb79d6ab0844e9471e9c8/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/da4ce36840a24c86d5cfb79d6ab0844e9471e9c8" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h2>Pull Request &amp; code review</h2>



<p>Each of you will add another student as a collaborator of your git repository.</p>



<p>Then, create a Pull Request for merging <code>feature/authentication-and-routing</code> into <code>develop</code>. Your pair reviews the pull request and let comments.</p>



<p>Once the code is reviewed, merge your pull request on Github and return to develop branch.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/managing-authentication-routing/">2. Managing authentication &#038; routing</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>1. Setup your practical environment</title>
		<link>https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Tue, 09 Feb 2021 09:00:00 +0000</pubDate>
				<category><![CDATA[Front-end web development]]></category>
		<category><![CDATA[Practical works]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=897</guid>

					<description><![CDATA[<p>At the end of this practical works series, you will have built the front-end of a cleaning booking service. The back-end is provided. During this first seance, you will: install the necessary tools (git, node&#8230;) ; setup, build and run your angular application ; access to the back-end API documentation and interact manually with it &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/" class="more-link">Continuer la lecture de <span class="screen-reader-text">1. Setup your practical environment</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/">1. Setup your practical environment</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>At the end of this practical works series, you will have built the front-end of a cleaning booking service. The back-end is provided.</p>



<p>During this first seance, you will:</p>



<ul><li>install the necessary tools (git, node&#8230;) ;</li><li>setup, build and run your angular application ;</li><li>access to the back-end API documentation and interact manually with it ;</li><li>commit that angular project on git and push it to Github ;</li><li>push your code to Cloudflare Page.</li></ul>



<h3>Required softwares installation</h3>



<h4>Git</h4>



<p><a href="https://git-scm.com/" target="_blank" rel="noreferrer noopener">Git</a> is a decentralised source version manager. A git repository stores the source code of a project and any of its changes. Typically, a contributor writes some code on its side. Once it has completed its task, it commits the changes (with a message) and push it to the remote repositories. Other contributors can update their base. Nowadays, teams centralise repositories hosting on SaaS platforms like Github and Gitlab.</p>



<p>During the lecture, I expressed you follow the <a href="https://datasift.github.io/gitflow/IntroducingGitFlow.html" target="_blank" rel="noreferrer noopener">gitflow</a> workflow. Take the time to understand it. In substance:</p>



<ul><li>All the code on master is designed for production.</li><li>The code for next release is on develop.</li><li>When your start a feature, you should open a feature branch.</li></ul>



<p>Of course, you also need a Github (or Gitlab) account.</p>



<p class="exercice"><strong>Exercise 1</strong> : Install git on your machine. You should at least have the git command working. Test it with <code>git --version</code> for example.</p>



<h4>Node.js &amp; npm</h4>



<p><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer noopener">Node.js</a> is a platform that runs Javascript code outside the browser. It makes possible to write server applications in Javascript, allowing developers to use the same technologies for front and back. The back-end you will interface with is running on node.js.</p>



<p>But here we are in front-end module. We are interested in node.js because it powers most tools we will use. Some of them are even shipped with the node installer. Node Package Manager (npm) is one of them. It manages dependencies of your project and installs cli softwares written for node.</p>



<p class="exercice"><strong>Exercise 2</strong> : Install node.js. If installation successed, both commands <code>node --version</code> and <code>npm --version</code> should work. It is recommanded you use the <code>Node Command Prompt</code>.</p>



<h4>Angular</h4>



<p><a href="https://angular.io/" target="_blank" rel="noreferrer noopener">Angular</a> is a full-featured framework you will use for building your front application. Most actions, such as generating projects or components have been automatised in the « cli » tool.</p>



<p>A single command written in a terminal (Powershell or Node Command Prompt for Windows) do the job. Ensure node is installed first. We also install <a href="https://eslint.org/" target="_blank" rel="noreferrer noopener">eslint</a>, which ensure coding conventions are applied across codebase.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-13" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># the following command install angular cli and required dependencies globally. They provide the ng command.</span>
npm i -g @angular/cli @angular-devkit/core @angular-devkit/schematics @angular-eslint/schematics</code></div><small class="shcb-language" id="shcb-language-13"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 3</strong> : Install <code>@angular/cli</code> according the previous procedure. Then test it works with <code>ng version</code>. For everything related <code>node</code>, <code>npm</code> and <code>ng</code>, I recommand you use the <code>Node command prompt</code>.</p>



<h3>Setup the angular project</h3>



<p>At the end of this step, your workspace should match the following folder hierarchy. </p>


<pre class="wp-block-code" aria-describedby="shcb-language-14" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">frontend                       <span class="hljs-comment"># angular projet (generated using @angular/cli)</span>
 ↳ dist                        <span class="hljs-comment"># the folder containing your bundled app. Only exists after running `ng build` command.</span>
 ↳ node_modules                <span class="hljs-comment"># the folder containing local dependencies. See package.json file and npm command for more info.</span>
 ↳ src                         <span class="hljs-comment"># source code (HTML, CSS, TS). It includes components, services, etc.</span>
 ↳ angular.json                <span class="hljs-comment"># @angular/cli configuration</span>
 ↳ package.json                <span class="hljs-comment"># npm configuration, primary used for installing dependencies</span>
 ↳ tsconfig.json               <span class="hljs-comment"># typescript configuration, where are defined target, enabled syntax and type checking features.</span>
 ↳ .eslintrc.json              <span class="hljs-comment"># eslint configuration, where you set linter rules.</span></code></div><small class="shcb-language" id="shcb-language-14"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>Angular project&rsquo;s structure is standard (thanks to @angular/cli). For more information about it, please refer to <a href="https://angular.io/guide/file-structure" target="_blank" rel="noreferrer noopener">official documentation</a>.</p>



<h4>Generate the angular project</h4>



<p class="exercice"><strong>Exercise 4</strong> : Generating such project is easy. Just run the following command in a <code>Node Command Prompt</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-15" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># creates a new project with angular router enabled</span>
ng new --routing --strict --collection=@angular-eslint/schematics frontend

<span class="hljs-comment"># enter the 'frontend' folder</span>
<span class="hljs-built_in">cd</span> frontend</code></div><small class="shcb-language" id="shcb-language-15"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>The previous commands enabled the<code>:</code></p>



<ul><li><code>angular/router</code>, with argument <code>--routing</code> that let our angular app overriding and intercepting the browser URLs through the <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" target="_blank" rel="noreferrer noopener">HTML5 History API</a>.</li><li>the strict mode of typescript with <code>--strict</code> argument. Among other things, Typescript will expect to know the type of each variable, so it can enforce safety checks. See <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noreferrer noopener">typescript reference</a> for more info.</li><li><code>eslint</code> support, with rules recommended by the angular community. Linter&rsquo;s objectives is to ensure codebase consistency across the team and collaborator turnover. It sets guidelines, detects some bad coding patterns, etc.</li></ul>


<div class="exercice" style="display: flex; align-items: center; margin-bottom: 3em; background-color: #ffecb8">
  <i class="fad fa-life-ring" style="font-size: 3em; color: #ffb300; margin-right: 16px"></i>
<div>
  Need help? <a href="https://github.com/TruffeCendree/learning-materials/tree/5444790f18c5e943fd9e6202c677b0db943e8ce0/correction" target="_blank">Explore code</a> or <a href="https://github.com/TruffeCendree/learning-materials/commit/5444790f18c5e943fd9e6202c677b0db943e8ce0" target="_blank">list recent changes</a> on  <i class="fab fa-github" style="margin: 0 0.3em" ></i>Github.
</div>
</div>



<h4>Configure your editor</h4>



<p>If you are using VSCode, you will probably appreciate those extensions:</p>



<ul><li>Angular Language Service (type inference in template)</li><li>Eslint checks that conventions are correctly applied</li><li>Gitlens (optional) for better git experience</li></ul>



<h4>Run your app</h4>



<p>Once your project is generated, it is time to run it. <code>ng serve</code> incremently compile your project and reload on source change. It also starts a HTTP server on port 4200.</p>



<p class="exercice"><strong>Exercise 5</strong> : Serve your app and open it in your favorite browser.</p>



<p>Tips: always start your browser development tool and keep track of the console tab. If there is an error at runtime, that is the place to check.</p>



<p class="exercice"><strong>Exercise 6</strong> : Document yourself on the differences between <code>ng serve</code> and <code>ng build</code>.</p>



<h4>Compare built application with various targets</h4>



<p>The following commands build your app. Many other parameters are available to customise the build process. This is just an overview of more useful.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-16" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">ng build          <span class="hljs-comment"># build the app for development, easy to debug in the browser and heavy bundle size.</span>
ng build --prod   <span class="hljs-comment"># build the app for production. A lot of optimisations are processed, reducing bundle size.</span>
ng build --watch  <span class="hljs-comment"># incrementally rebuild the app on each source code change (faster subsequent builds).</span></code></div><small class="shcb-language" id="shcb-language-16"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p>I provided a sample output of the <code>ng build</code> command. It emitted its output under <code>dist/frontend</code> folder. Let&rsquo;s analyze it!</p>


<pre class="wp-block-code" aria-describedby="shcb-language-17" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php">$ ng build <span class="hljs-comment"># must be run in frontend folder                                                        </span>
✔ Browser application bundle generation complete.
✔ Copying assets complete.
✔ Index html generation complete.

Initial Chunk Files | Names         |      Size
vendor.js           | vendor        |   <span class="hljs-number">2.70</span> MB
polyfills.js        | polyfills     | <span class="hljs-number">127.61</span> kB
main.js             | main          |  <span class="hljs-number">20.85</span> kB
runtime.js          | runtime       |   <span class="hljs-number">6.15</span> kB
styles.css          | styles        | <span class="hljs-number">119</span> bytes

                    | Initial Total |   <span class="hljs-number">2.85</span> MB

Build at: <span class="hljs-number">2021</span><span class="hljs-number">-01</span><span class="hljs-number">-30</span>T08:<span class="hljs-number">46</span>:<span class="hljs-number">07.013</span>Z - Hash: <span class="hljs-number">2</span>b7174e3c646073c60a9 - Time: <span class="hljs-number">6285</span>ms</code></div><small class="shcb-language" id="shcb-language-17"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 7</strong> : What is a bundle ? How does it differ from the source code?</p>



<p class="exercice"><strong>Exercise 8</strong> : <code>.map.js</code> files have been emitted. What is the purpose of these map files?</p>



<p class="exercice"><strong>Exercise 9</strong> : Can you spot some differences between <code>ng build</code> and <code>ng build --prod</code>?</p>



<p class="exercice"><strong>Exercise 10</strong> : What is a javascript polyfill?</p>



<h4>Commit your code and push it to Github</h4>



<p class="exercice"><strong>Exercise 11</strong> : Register yourself on Github. Then create a private git repository (for simplicity, <strong>do not create any file such as <code>README.md</code></strong> while initializing the github repository). Finally push all your changes to Github. </p>



<p>The <code>ng new</code> command already initialised a local git repository. If you have any pending change, you have to <code>commit</code> them. A commit validates and stores a list of changes (files created, updates&#8230;) and a message describing those changes. </p>


<pre class="wp-block-code" aria-describedby="shcb-language-18" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># list all changes currently not committed. Check if you see some "untracked files" that need to be persisted.</span>
git status

<span class="hljs-comment"># you probably want to commit new files in your repository.</span>
<span class="hljs-comment"># git add accepts a list of files or folder.</span>
<span class="hljs-comment"># '.' designates the current directory.</span>
git add .

<span class="hljs-comment"># commit every pending change with a message</span>
git commit -a -m <span class="hljs-string">"configure linter and typescript"</span>

<span class="hljs-comment"># commands extracted from the Github guide to push commits to remote</span>
<span class="hljs-comment"># for the first time (do not forget to replace {UNDER BRACKETS} variables).</span>
git remote add origin https:<span class="hljs-comment">//github.com/{GITHUB_USERNAME}/{REPOSITORY_NAME}.git</span>
git branch -M master
git push -u origin master</code></div><small class="shcb-language" id="shcb-language-18"><span class="shcb-language__label">Code language:</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="905" height="637" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-github-repository-exploration.gif" alt="" class="wp-image-1074"/><figcaption>At this step, your code is on Github. You can explore tracked files, show commit history, list changes in a particular commit, and so much more !</figcaption></figure>



<h4>Gitflow workflow</h4>



<p>All the code is currently committed on master branch. In the GitFlow workflow, the master branch is dedicated to the production code only.</p>



<p>This TPs series will use feature branches, develop and master. Each time you start a new feature (ex. adding authentification), you will start a feature branch. Once you completed your changes, open a pull request on github and merge the code to develop. When the code on develop is well tested, it can be merged on master.</p>



<p class="exercice"><strong>Exercise 12</strong> : Create a develop branch and push it to remote. Both master and develop branch should be visible in Github. The develop branch should be even with master.</p>



<h2>Play with the backend</h2>



<p>Remember: you are building the frontend of a cleaning shop service. I provide you a simple backend for that. It is hosted under:</p>



<p class="has-text-align-center"><em><a href="https://backend.thomas-veillard.fr/" target="_blank" rel="noreferrer noopener">https://backend.thomas-veillard.fr/</a></em></p>



<p>For your information, the code powering the backend is <a href="https://github.com/TruffeCendree/learning-materials/tree/master/frontend-web-development" target="_blank" rel="noreferrer noopener">publicly available</a>.</p>



<h4>API documentation and playground</h4>



<p>The API is self-documented and up to date. Open it at <a href="https://backend.thomas-veillard.fr/docs" target="_blank" rel="noreferrer noopener">https://backend.thomas-veillard.fr/docs</a>.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="835" src="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-1024x835.gif" alt="" class="wp-image-969" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-1024x835.gif 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-300x245.gif 300w, https://thomas-veillard.fr/wp-content/uploads/2021/01/demo-api-playground-768x626.gif 768w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>API playground and documentation demonstration</figcaption></figure>



<p>During database population, some seeds were generated. These built-in accounts are designed for testing purposes:</p>



<ul><li><strong>Operator</strong> (operator@cleaning.com / seedpass)</li><li><strong>Customer</strong> (customer@cleaning.com / seedpass)</li><li><strong>Employee</strong> (employee@cleaning.com / seedpass)</li></ul>



<div class="exercice" style="padding-bottom: 0; margin-bottom: 1em">
<p><strong>Exercise 10</strong> : Through the playground, manually execute the following scenario:</p>

<code>POST /auth/login</code>
<p>Connect yourself as operator.</p>

<code>GET /api/users/me</code>
<p>Query some information about your own account.</p>

<code>GET /api/users</code>
<p>List all users on the shop. That is only possible because you are operator.</p>

<code>POST /auth/logout</code>
<p>Close your session.</p>

<code>??? find paths and arguments yourself</code>
<p>
Try to call any endpoint behind authentication.<br>
Register yourself as customer using public API.
</p>
</div>



<p class="exercice"><strong>Exercise 12</strong> : Same exercise, but this time you will use <a href="https://www.postman.com/" target="_blank" rel="noreferrer noopener">Postman</a>. This way, you are ready to test any kind of API over HTTP.</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/practical-works/setup-your-practical-work-environment/">1. Setup your practical environment</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
