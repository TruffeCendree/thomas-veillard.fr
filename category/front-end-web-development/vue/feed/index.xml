<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Archives des 03. VueJS - Thomas VEILLARD</title>
	<atom:link href="https://thomas-veillard.fr/category/front-end-web-development/vue/feed/" rel="self" type="application/rss+xml" />
	<link>https://thomas-veillard.fr/category/front-end-web-development/vue/</link>
	<description>Mes cours et supports pédagogiques pour l&#039;enseignement de l&#039;ingénierie informatique.</description>
	<lastBuildDate>Mon, 12 Sep 2022 18:41:05 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1</generator>
	<item>
		<title>03. Vue.js project</title>
		<link>https://thomas-veillard.fr/front-end-web-development/vue/project/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Mon, 11 Oct 2021 06:11:51 +0000</pubDate>
				<category><![CDATA[03. VueJS]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=3194</guid>

					<description><![CDATA[<p>Topic (SE groups) Build a web application to book, rent or buy something of your choice, like: A train ticket office. Using public API, it may find routes between 2 train stations at some date and time. Then, the customer can book required tickets. A product shop. The application displays the catalogue, allows both sorting &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/vue/project/" class="more-link">Continuer la lecture de <span class="screen-reader-text">03. Vue.js project</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/project/">03. Vue.js project</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Topic (SE groups)</h4>



<p>Build a web application to book, rent or buy something of your choice, like:</p>



<ul><li><strong>A train ticket office</strong>. Using public API, it may find routes between 2 train stations at some date and time. Then, the customer can book required tickets.</li><li><strong>A product shop</strong>. The application displays the catalogue, allows both sorting and filtering by various criteria. Each product has a dedicated presentation. Additionally, the customer may fill a cart and provide its delivery address.</li><li><strong>A clearing booking app</strong>. Allows customers to find available cleaners near their home at some date and time. Then, the customer picks a proposal, fills its address&#8230;</li><li><strong>A VPS builder</strong>. The customer builds its own VPS instance by selecting some amount of RAM, disk, CPU, IO bandwidth, additional volumes&#8230; The final configuration should be valid (ex. disallow too much RAM if not enough v-core, etc.).</li></ul>



<h4>Topic (non-SE groups)</h4>



<p>Check with your teachers for topic requirements. They may enforce a relevant topic according to your academic major.</p>



<h4>The rules</h4>



<ul><li>Can be done in groups of 4 students (3 exceptionally allowed).</li><li>Use Vue.js, Angular or React. You are free to use any library you want.</li><li>Use <a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noreferrer noopener">this</a> git workflow model (at least master and develop branches).</li><li>Do not be surprised if I check who commits, and when&#8230;</li><li>Document installation steps in <code>README.md</code>.</li><li>Use API over HTTP or HTTPS (a public API, a mock server or your own backend).</li><li>Build various views (pages, modals&#8230;). At least 5 pages with valuable logic.</li><li>Set up various routes using vue-router or such a lib (ex. <code>/products/:productId</code>).</li><li><a href="https://blog.sonatype.com/open-source-attacks-on-the-rise-top-8-malicious-packages-found-in-npm" target="_blank" rel="noreferrer noopener">For your security</a>, do not install dependencies having <span class="has-inline-color has-medium-pink-color"><strong>fewer than 50 000 downloads per week</strong></span>. If you trust a dependency that does not meet my arbitrary expectation, please ask first (during class session) and record my acquaintance in your <code>README</code>.</li></ul>



<h4>README.md</h4>



<p>Describe the steps in your README to build and run your project. For simple front-end projects, it could be really short: (ex. git clone, npm install&#8230;).</p>



<p>But if you implemented a backend or have special requirements, they must be explicit. If setup is complex, please provide an install script (targeting Ubuntu).</p>



<h4>Delivery</h4>



<p>Your git repository is your main delivery. Just share read-only access with your teacher if the repository is private.</p>



<ul><li>For SE groups, share your private repository with <code>TruffeCendree</code>.</li><li>For other groups: information not yet available.</li></ul>



<p>The code must be available at least 2 hours before the oral presentation, which occurs during the last class session.</p>



<h4>Graduation</h4>



<figure class="wp-block-table is-style-stripes"><table><tbody><tr><td><strong>Criteria</strong></td><td><strong>Points</strong></td></tr><tr><td>Git and workflow</td><td>2 points</td></tr><tr><td>User experience (UX), user interface (UI)<br><em>Graded based on your oral presentation.</em></td><td>5 points</td></tr><tr><td>Code quality, maintenability, bugs, challenges&#8230;<br><em>Graded based on the source code on git master/main branch</em></td><td>13 points</td></tr></tbody></table></figure>



<h4>Bonuses</h4>



<p>The following list is not exhaustive. Be free to highlight challenges you overcame in a special section of your README.</p>



<ul><li>Write a fully featured backend (higher bonus if built on node.js). Adding a backend does not reduce my expectation on the frontend part.</li><li>Switch from JavaScript to TypeScript (use strict mode, ban the <code>any</code> type).</li><li>Use high quality JSdoc comments, with <code>tsconfig.json</code> setup to check js all files.</li><li>Host your static website online (ex. Firebase Hosting, render.com, aws S3&#8230;).</li><li>Implement error tracking of hosted site with (ex. Sentry, Rollbar, Stackdriver&#8230;).</li><li>Write automatic specs (unit, e2e&#8230;).</li><li>Send emails with your backend (look at the <a href="https://mailcatcher.me/" target="_blank" rel="noreferrer noopener">mailcatcher</a> to mock the STMP server).</li><li>Generate high quality PDF with putteteer or selenium.</li></ul>



<p></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/project/">03. Vue.js project</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>02. Vue: practical activity, part n°2</title>
		<link>https://thomas-veillard.fr/front-end-web-development/vue/02-vue-practical-activity-part-n2/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Mon, 11 Oct 2021 05:11:51 +0000</pubDate>
				<category><![CDATA[03. VueJS]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=3522</guid>

					<description><![CDATA[<p>Learning outcomes Getting started with Oauth2, OpenID, etc. Understand the need for a state management layer in your app. Exploring various state management strategies. Discuss pros and cons of various state management patterns. Handle in-browser routing and discuss its performance concerns. Using route guards to prevent activation of some routes. The expected result At the &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/vue/02-vue-practical-activity-part-n2/" class="more-link">Continuer la lecture de <span class="screen-reader-text">02. Vue: practical activity, part n°2</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/02-vue-practical-activity-part-n2/">02. Vue: practical activity, part n°2</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Getting started with Oauth2, OpenID, etc.</li><li>Understand the need for a state management layer in your app.</li><li>Exploring various state management strategies.</li><li>Discuss pros and cons of various state management patterns.</li><li>Handle in-browser routing and discuss its performance concerns.</li><li>Using route guards to prevent activation of some routes.</li></ul>



<h4>The expected result</h4>



<p>At the end of the tutorial, the user will be able to login with its Microsoft account. The application will fetch and display its identity (basically its id, email and name). The current user identity is something you need in the whole app. You will explore various ways to achieve this.</p>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> A test microsoft account will be provided in session by your teacher, but you are free to use your own account. During this tutorial, you will only grant access to basic profile information (name and email). API secrets stay in your browser, except when calling the API of course. You can revoke permissions at any time in the confidentiality screen of the Microsoft account.</p>



<h4>Oauth2, OpenID, Microsoft Graph API&#8230; What is it?</h4>



<p>In the continuation of the previous tutorial, the application will gain access to the Microsoft Graph API. This one exposes a large panel of Microsoft&rsquo;s SaaS products, including Outlook.</p>



<p>The <strong>Microsoft Graph API</strong> acts on the side of a logged-in user, that must grant permission to the application. The<strong> Oauth2 protocol </strong>is responsible for authentication and collection of user&rsquo;s consent. In the terminology of Oauth2, a permission is called a <strong>scope</strong>. The application must explicitly declare which <strong>scopes</strong> it needs.</p>



<p>Once authorised, the application gets an <strong>access token</strong> (aka. <strong>Bearer</strong>). This is just a long random string you must provide within each API query. The API knows everything about it (which user, scopes, application&#8230;). This short living key is strictly confidential and expires in about 1 hour, unless the user manually revokes it. Note that the oauth2 protocol also allows the app renewing it without user interaction.</p>



<p><strong>OpenID</strong> is another protocol built on top of Oauth2. It allows the user to share its identity (just the name and email) to the application. This way, the application just trusts the identity provider. This is widely used to implement <strong>SSO</strong> (aka. <strong>Single Sign On</strong>), allowing using a single account to sign-in on any application supporting this identity provider.</p>



<h4>The SigninButton component</h4>



<p>Let&rsquo;s build a <code>SigninButton</code> responsible for retrieving an <strong>access token</strong> and the associated user identity. Microsoft provides a library making this process easier: <a href="https://www.npmjs.com/package/@azure/msal-browser" target="_blank" rel="noreferrer noopener">@azure/msal-browser</a>.</p>



<p>Acquiring the user authorisation and fetching identity from the API is typically an async task that lasts a few seconds. So it is an opportunity to use <code>AsyncButton</code>.</p>



<p>Additionally, the SPA should be registered on Azure Active Directory portal. But do not worry too much about it, since I have already done it. Each integration (the name given to an external application registered on Azure AD) has a <strong>clientId</strong> used in Oauth2 protocol.</p>



<p>From a security and maintainability perspective, you should never let secrets and configurations hardcoded in your code. Instead, extract them to a configuration file ignored by git. Even better, allow those settings to be different depending on the environment (ex. test, development, staging, production&#8230;). The Vue assets pipeline has a built-in feature for this: <a href="https://cli.vuejs.org/guide/mode-and-env.html" target="_blank" rel="noreferrer noopener">env variables</a>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-1" data-shcb-language-name="PHP" data-shcb-language-slug="php"><div><code class="hljs language-php"><span class="hljs-comment"># file: .env.development.local</span>
VUE_APP_OAUTH_CLIENT_ID=e8137439<span class="hljs-number">-4</span>d1d<span class="hljs-number">-462</span>d-a85f-f81cfea8f0d8</code></div><small class="shcb-language" id="shcb-language-1"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">PHP</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">php</span><span class="shcb-language__paren">)</span></small></pre>


<p><i class="fas fa-exclamation-circle" style="color: #d32f2f; margin-right: 0.5em"></i> Unfortunately, changes appyed to .env files cannot be watched by the cli. Each time, you must restart the building process (ex. npm run serve).</p>



<p class="question"><strong>Question 1</strong>: Why you should not commit credentials on git?</p>



<p class="question"><strong>Question 2</strong>: Why may you want different configurations depending on the environment? Give an example.</p>



<p class="exercice"><strong>Exercice 1</strong>: I already wrote helpers on top of msla (see the file <code>src/lib/microsoftGraph.js</code> above). Import them for use in your <code>SigninButton</code> component.  For now, <code>SigninButton</code> stores the resolved user inside its own state (the <code>data</code> property of your component) and displays it in the template.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 1: add SigninButton »</p>


<pre class="wp-block-code" aria-describedby="shcb-language-2" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-comment">// file src/lib/microsoftGraph.js</span>
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> msal <span class="hljs-keyword">from</span> <span class="hljs-string">'@azure/msal-browser'</span>

<span class="hljs-comment">/**
 * List the requested scopes (aka. the requested permissions)
 */</span>
<span class="hljs-keyword">const</span> requestedScopes = {
  <span class="hljs-attr">scopes</span>: [<span class="hljs-string">"User.Read"</span>]
}

<span class="hljs-keyword">const</span> msalInstance = <span class="hljs-keyword">new</span> msal.PublicClientApplication({
  <span class="hljs-attr">auth</span>: {
    <span class="hljs-attr">clientId</span>: process.env.VUE_APP_OAUTH_CLIENT_ID
  },
  <span class="hljs-attr">cache</span>: {
    <span class="hljs-attr">cacheLocation</span>: <span class="hljs-string">"sessionStorage"</span>
  }
})

<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">signInAndGetUser</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> authResult = <span class="hljs-keyword">await</span> msalInstance.loginPopup(requestedScopes)
  msalInstance.setActiveAccount(authResult.account)
  <span class="hljs-keyword">return</span> authResult.account
}</code></div><small class="shcb-language" id="shcb-language-2"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<figure class="wp-block-image size-large"><img decoding="async" width="1060" height="836" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/signin-button.gif" alt="" class="wp-image-3576"/></figure>



<h4>State management for the current user</h4>



<p>Currently, the identity fetched from Microsoft Graph is stored inside the local state of the  <code>SigninButton</code> component.</p>



<figure class="wp-block-image size-large"><img decoding="async" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/user-stored-in-the-signin-button-component.png" alt="" class="wp-image-3586"/><figcaption>Screensheet of vue-devtools, showing the data property of <code>SigninButton</code>.</figcaption></figure>



<p>This means, only that component is currently aware of the connected user:</p>



<ul><li>If the component is unmounted, its internal state is, of course, lost.</li><li>Only children of <code>SigninButton</code> may potentially get access to that user through <code>props</code>. </li></ul>



<p>The current user identity is typically something that should be shared across the whole application (aka. global state). Any component may read it and a few one (the existing <code>SigninButton</code>, a potential <code>SignoutButton</code>&#8230;) need to update it.</p>



<p class="has-text-align-center">***</p>



<p><i class="fas fa-info-circle" style="color: #5c6bc0; margin-right: 0.5em"></i> Now, we want to display the current user name fetched by <code>SigninButton</code> inside the template of <code>HomePage</code>. Let&rsquo;s explore 3 ways to accomplish this.</p>



<h5><span style="color:#a2870d" class="has-inline-color">First solution, use props and events through component tree.</span></h5>



<p>Before going further, please read first <a href="https://v3.vuejs.org/guide/component-basics.html#base-example" target="_blank" rel="noreferrer noopener">Components Basics</a>, <a href="https://v3.vuejs.org/guide/component-props.html#prop-types" target="_blank" rel="noreferrer noopener">Props</a> and <a href="https://v3.vuejs.org/guide/component-custom-events.html" target="_blank" rel="noreferrer noopener">Custom Events</a>. The first proposed solution massively relies on props and events.</p>



<p>The user object is stored at the root of the component tree (inside the <code>App</code> component). When the page loads, the <code>user</code> is <code>null</code> (user not yet logged-in). Any child component that has to read the user object should receive it through props. If the child is nested, every component of the branch must pass the <code>user</code> prop down.</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1294" height="727" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/props-goes-down.gif" alt="" class="wp-image-3609"/><figcaption>Animated flow of props propagation from <code>App</code> to deeply nested children.</figcaption></figure>



<p>Let&rsquo;s suppose now that the user interacts with the <code>SigninButton</code> and sign in. As soon as <code>SigninButton</code> knows the user identity, it emits a custom event called <code>userChanged</code>. Events travel the component tree from bottom to top. Each parent component should handle or propagate the event (or it will be discarded). Eventually, the event reaches the root component <code>App</code>, which consumes it to update its internal state. This triggers a new rendering and the updated identity travels again the tree down through props.</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1294" height="727" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/event-goes-up.gif" alt="" class="wp-image-3613"/><figcaption>Animated flow of events going up, getting handled in App and trigering a view update.</figcaption></figure>


<a href=https://docs.google.com/presentation/d/1FhBhkHADZAE-DtDQU2qk6MczPhqDVYRIyk7ysPOFdA8/edit#slide=id.gebafa763cd_0_119 target="_blank">
  <div style="display: flex; align-items: center; padding: 1em; border-radius: 3px; border: 1px solid #f5ba16; background: #f7f7f7">
    <div style="margin-right: 0.5em"><img src="/wp-content/uploads/2021/01/google_slide.svg" /></div>
    <div>Open the animations in Google Slide</div>
  </div>
</a>



<p></p>



<p class="exercice"><strong>Exercise 2</strong>: Use props to share the user with both  <code>SigninComponent</code> and <code>HomePage</code>. Then use events to update the shared user from <code>SigninComponent</code>. Eventually, display the user name in <code>HomePage</code>.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 2: state management with props/events »</p>



<p class="question"><strong>Question 3</strong>: While being a well-working solution, it suffers from maintainability issues. Please expose and discuss them.</p>



<p>In addition to the reason you may have already found, there is a performance penalty. Did you notice <code>BaseLayout</code> was rendered again because its props changed? But <code>BaseLayout</code> does not need the <code>user</code> props for itself. It just forwards it to children&#8230;</p>



<h5><span style="color:#a2870d" class="has-inline-color">Second solution, use <code>provide</code> and <code>inject</code>.</span></h5>



<p>Read the official documentation carefully for <a href="https://v3.vuejs.org/guide/component-provide-inject.html" target="_blank" rel="noreferrer noopener">Provide &amp; Inject</a>.</p>



<p class="exercice"><strong>Exercise 3</strong>: Replace every needed <code>user</code> props by an <code>inject</code> and remove transitional props that are not useful anymore. For now, you can keep the <code>userChanged</code> event chain. Be sure to make your <code>inject</code> reactive.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 3: state management with provide/inject »</p>



<p class="question"><strong>Question 4</strong>: What is the bug if the <code>inject</code> is not reactive?</p>



<p>Actually, you provide the <code>user</code> objet to the <code>App</code>&lsquo;s children, whatever how deep are the consumer components. But updating the value of <code>user</code> inside <code>App</code> still requires to manually propagate events through some component branches.</p>



<p>There are various ways, just by using <code>provide</code> and <code>inject</code>, to trigger a change from a deeply nested component without emitting a chain of events. One of them is to provide a setter, which is just a function. This will be demonstrated by the teacher.</p>



<h5><span style="color:#a2870d" class="has-inline-color">Third solution, use a store library like vuex.</span></h5>



<p>The third proposed solution is using a store library. With stores, your global state is both readable and writable anywhere in your application. The business logic related to data manipulation is moved to those stores. One of those libraries, <a href="https://next.vuex.vuejs.org/#what-is-a-state-management-pattern" target="_blank" rel="noreferrer noopener">Vuex</a>, is specially crafted to work with Vue and its internals.</p>



<blockquote class="wp-block-quote is-style-default"><p>Vuex helps us deal with shared state management with the cost of more concepts and boilerplate. It&rsquo;s a trade-off between short term and long term productivity.</p><cite>Quoted from vuex documentation: « When Should I Use It? »</cite></blockquote>



<p>According to this quote, vuex is probably not necessary for our dead-simple application. Using props, custom events, provide and inject may gracefully to cover our needs.</p>



<p>However, it is still revelant to explore Vuex from a pedagogical point of view. So let&rsquo;s give it a try for this tutorial series.</p>



<p class="exercice"><strong>Exercise 4</strong>: Move the <code>user</code> property from the <code>App</code> component state to a store managed with vuex. Drop the event chain and let <code>SigninButton</code> directly call a <a href="https://next.vuex.vuejs.org/guide/mutations.html" target="_blank" rel="noreferrer noopener">mutation</a> in the store.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 4: state management with a store »</p>



<p class="question"><strong>Question 5</strong>: Build a comparison table between the various state management strategies available, especially about pro and cons. Optionally, feel free to explore other ways not covered in that tutorial.</p>



<p class="question"><strong>Question 6</strong>: Imagine a developer in your team suggests to exclusively manage the state with stores. Therefore, it recommends not to rely on <code>props</code> and <code>provide</code> anymore. Would you accept this? An argued answer is expected.</p>



<h4>Client-side routing</h4>



<p><i class="fas fa-exclamation-circle" style="color: #d32f2f; margin-right: 0.5em"></i> Unfortunately, we are running out of time. Client-side routing was supposed to be the main part of the next tutorial. Instead, this section will cover the basis of vue-router.</p>



<figure class="wp-block-table is-style-stripes"><table><tbody><tr><td>/</td><td>Displays the <code>HomePage</code> component as it is currently defined.</td></tr><tr><td>/conversations</td><td>Displays the <code>ConversationsIndexPage</code> component that displays the more recent conversations inside the user&rsquo;s mailbox.</td></tr><tr><td>/conversations/:id</td><td>Displays the <code>ConversationShowPage</code> component that fetches and renders the content of a given conversation (id retrieved from the API).</td></tr></tbody></table><figcaption>Expected routes at the end of the tutorial</figcaption></figure>



<p class="exercice"><strong>Exercise 5</strong>: Install vue-router v4+ according to <a href="https://next.router.vuejs.org/installation.html" target="_blank" rel="noreferrer noopener">official documentation</a>. Make sure to pick the version compatible with Vue3, (also compatible with vue-router v4+).</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 5: add vue-router dependency »</p>



<p class="exercice"><strong>Exercise 6</strong>: Using the <a href="https://next.router.vuejs.org/guide/" target="_blank" rel="noreferrer noopener">Getting Started</a> guide, add <code>/</code> and <code>/conversations</code> routes. Define the router inside its own ES module (ex. <code>src/router/index.js</code>). For now, the <code>ConversationsIndexPage</code> should just contain a placeholder (a small message to visually see that the route works fine).</p>



<p><strong>Tips</strong>: for the previous question, you need:</p>



<ul><li>to add <code>src/router/index.js</code> and export a router built with <code>createRouter()</code>.</li><li>to import the router in <code>src/main.js</code> and call <code>.use(router)</code> somewhere&#8230;</li><li>to use <code>&lt;router-view /&gt;</code> instead of <code>&lt;home-page /&gt;</code> somewhere&#8230;</li><li>to create another component for the new page.</li></ul>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 6: add / and /conversations routes »</p>



<p class="exercice"><strong>Exercise 7</strong>: You probably tested your routes by directly changing the URL. However, a normal user clicks on links and buttons. Help them by adding a link to the header that targets the <code>/conversations</code> routes. That link should only be visible for logged users. It must use the <code>&lt;router-link /></code>.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 7: add header navigation »</p>



<div class="is-layout-flex wp-container-4 wp-block-columns">
<div class="is-layout-flow wp-block-column question">
<p><strong>Question 7</strong>: What is the performance difference between:</p>



<ul style="margin-left: 1em; margin-bottom: 0"><li><code>&lt;a href="/conversations"&gt;Conversation&lt;/a&gt;</code></li><li><code>&lt;router-link to="/conversations"&gt;Conversations&lt;/router-link&gt;</code></li></ul>
</div>
</div>



<p class="exercice"><strong>Exercise 8</strong>: In the case the user tries to access <code>/conversations</code> without being logged-in, it should be redirected to the home page. Use a <a href="https://router.vuejs.org/guide/advanced/navigation-guards.html#global-before-guards" target="_blank" rel="noreferrer noopener">guard</a> to implement this behaviour.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 8: add guards for authenticated routes »</p>



<p class="exercice">In a real-world app, I would require a UI feedback, so the user knows it was not allowed to access the previous URL and was redirected. While not being part of the tutorial, it is part of the project UX!</p>



<p class="exercice"><strong>Exercise 9</strong>: Implement the <code>/conversations/:id</code> route. For now, the newly created <code>ConversationShowPage</code> component should access the id given in the URL and display it inside the template.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 9: add /conversations/:id route »</p>



<p>At this step, the routing capabilities are fine. The next step would be to fetch conversations from Outlook using the API and eventually display them in the UI. Unfortunately, we do not have any more in-class session for that.</p>



<p><strong>Tips</strong>: If you want to complete the tutorial yourself, you must ask another authorisation for the API. The scope <em><code>Mail.Read</code></em> is needed to fetch mails (see <code>src/lib/microsoftGraph.js</code>).</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/02-vue-practical-activity-part-n2/">02. Vue: practical activity, part n°2</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>01. Vue: practical activity, part n°1</title>
		<link>https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/</link>
		
		<dc:creator><![CDATA[Thomas Veillard]]></dc:creator>
		<pubDate>Sat, 04 Sep 2021 16:36:06 +0000</pubDate>
				<category><![CDATA[03. VueJS]]></category>
		<category><![CDATA[Modern web development]]></category>
		<guid isPermaLink="false">https://thomas-veillard.fr/?p=3243</guid>

					<description><![CDATA[<p>Learning outcomes Understand how Vue CLI is related to other well-known tools (webpack, babel&#8230;). Practise the Vue&#8217;s essentials (basic components, templates, scoped styles&#8230;). Organise your source code in various files and folders. Build reusable components (isolation, single responsibility, props and slots). Do not repeat yourself (DRY!) Work with Promise and events inside a Vue application. &#8230; <a href="https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/" class="more-link">Continuer la lecture de <span class="screen-reader-text">01. Vue: practical activity, part n°1</span></a></p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/">01. Vue: practical activity, part n°1</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h4>Learning outcomes</h4>



<ul><li>Understand how Vue CLI is related to other well-known tools (webpack, babel&#8230;).</li><li>Practise the Vue&rsquo;s essentials (basic components, templates, scoped styles&#8230;).</li><li>Organise your source code in various files and folders.</li><li>Build reusable components (isolation, single responsibility, props and slots).</li><li>Do not repeat yourself (DRY!)</li><li>Work with Promise and events inside a Vue application.</li><li>Import third party packages providing components with npm.</li><li>Commit and reset staged changes with git.</li></ul>



<h4>Expected result</h4>



<p>At the end of the tutorial series, you got a lightweight SPA client for exploring mails and contacts from the Outlook product, through the Microsoft Graph API. This SPA targets both computers and phones, requiring responsive capabilities and appreciating resilience to network issues.</p>



<p>The first tutorial of the Vue&rsquo;s series focuses on setting up the project, understanding tools behind the Vue CLI (those discussed in the last tutorial), setting up the layout and adding some shared reusable components.</p>



<h4>Prepare your development environment</h4>



<p>In a general manner, your productivity and code quality are affected by used tools. Personally:</p>



<ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer noopener">vscode</a> as my primary code editor, especially suitable for JavaScript development.</li><li><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur" target="_blank" rel="noreferrer noopener">Vetur</a> is a vscode extension enabling syntax and language servers for <code>.vue</code> files.</li><li><a href="https://devtools.vuejs.org/" target="_blank" rel="noreferrer noopener">vue-devtools</a> extends browser&rsquo;s debugging capabilities (beta channel for Vue3).</li><li><a href="https://cli.vuejs.org/" target="_blank" rel="noreferrer noopener">Vue CLI</a> for managed vue projects (from project creation to distribution).</li><li>npm, node, typescript and the rest of well-known JS tools&#8230;</li></ul>



<h4>About the use of git with Moodle delivery</h4>



<p>The Vue CLI automatically initiates a local git repository unless you explicitly refuse it. After each question, I strongly recommend you commit your work with a meaningful message. This provides at least 2 immediate benefits:</p>



<ul><li>You can discard any change to your project since the last commit (for example, the last completed question). So, in the case you went in the wrong direction for a particular question, you can rollback to last clean state. This makes you confident while refactoring or deleting code.</li><li>As a teacher, I can « time travel » inside your code and see how it was at the end of some question.</li></ul>



<p>Because of the graded nature of the tutorial, you cannot push your code on a public repository. On another side, sharing with me access to your private Github repository is a time consuming and error-prone.</p>



<p>Instead, you will just upload the zip archive through the Moodle « assignment activity ». <span class="has-inline-color has-medium-pink-color">While building your zip, be sure to include the <code>.git</code> folder</span>. To be safe, just compress the parent folder and check the output archive.</p>



<h4>Vue project setup</h4>



<p><i class="fa fa-exclamation-circle" style="color: #d32f2f; margin-right: 0.5em"></i> The Vue-CLI has been deprecated at the beginning of the year. Because some questions still rely on it, please use it exceptionnally.</p>



<p class="question"><strong>Question 1</strong>: That is the main difference between local installation and global installation of packages with npm? What kind of packages do you generally install locally? What kind is generally installed globally?</p>


<pre class="wp-block-code" aria-describedby="shcb-language-5" data-shcb-language-name="Bash" data-shcb-language-slug="bash"><div><code class="hljs language-bash"><span class="hljs-comment"># example of command to install the vue cli locally</span>
npm install @vue/cli

<span class="hljs-comment"># example of command to install the vue cli globally</span>
npm install -g @vue/cli</code></div><small class="shcb-language" id="shcb-language-5"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">Bash</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">bash</span><span class="shcb-language__paren">)</span></small></pre>


<p>According to the <a href="https://cli.vuejs.org/guide/installation.html" target="_blank" rel="noreferrer noopener">docs</a>, the global installation is best suitable for Vue CLI.</p>



<p class="exercice"><strong>Exercise 1</strong>: Create a new Vue project (called <code>vue-oauth-microsoft-graph</code>). Opt for the Vue3 recipe that relies on webpack and babel for the build chain.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> The Vue CLI as already committed the newly generated project.</p>



<p class="question"><strong>Question 2</strong>: Webpack is internally used by the Vue CLI. Why is it required to deal with both multiple JavaScript files and special extensions like <code>.vue</code>?</p>



<p>Babel is configured by default with <code>@vue/cli-plugin-babel/preset</code>, as specified in <code>babel.config.js</code>. By reading the package&rsquo;s documentation, you see it uses the <code>browserslist</code> configuration defined in <code>package.json</code>.</p>



<p class="question"><strong>Question 3</strong>: What is the role of babel and how <code>browserslist</code> may configure its output?</p>



<p class="question"><strong>Question 4</strong>: What is eslint and which set of rules are currently applied? The eslint configuration may be defined in a <code>eslint.config.js</code> or in <code>package.json</code> depending on the setup.</p>



<p><strong>Tips</strong>: additionally to the previous tools installed by Vue CLI, you can enable static type checking in your project. See the appendix at the end of the tutorial. Of course, it is optional.</p>



<p class="exercice"><strong>Exercise 2</strong>: Run <code>npm run serve</code> and open the app in your browser. Remember that npm looks at the <code>package.json</code> file (specially the <code>scripts</code> object) to find which command to execute.</p>



<p>Did you notice that <code>npm run serve</code> launches a program called  <code>vue-cli-service</code>? This is a cli locally installed by npm inside the <code>node_modules</code> folder. This dependency is dedicated to development experience, so it is a <code>devDependencies</code> in your <code>package.json</code>.</p>



<p class="exercice"><strong>Exercise 3:</strong> The newly generated project contains a few placeholders. Cleanup your project so it does not contain neither useless assets, nor the hello world. In other words, delete <code>HelloWorld.vue</code>, its related assets and all its references. As at the end of each exercise, the vue cli should not report any error or warning.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 3: remove vue CLI placeholders »</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="376" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders-1024x376.png" alt="" class="wp-image-3762" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders-1024x376.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders-300x110.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders-768x282.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/09/remove-vue-placeholders.png 1501w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>On the left, the vue app with placeholders. On the right, result after cleanup.</figcaption></figure>



<p>By default, only the <code>src/components</code> folder is intended for storing <code>.vue</code> files (aka. vue components). But we are free to use other directories depending on the nature of each component. Let&rsquo;s add <code>src/pages</code> to our code base.</p>



<ul><li><code>src/pages</code> contains top level components that produce a particular page (ex. the home page, the index of mails page, the contact page&#8230;). Those components are intended to be mounted with vue-router in the future.</li><li><code>src/components</code> contains shared components required by pages or other components (ex. navigation headers, buttons, user&rsquo;s cards, short preview of an email&#8230;).</li></ul>



<p class="exercice"><strong>Exercise 4</strong>: Create the <code>HomePage</code> component inside the right folder. Do not spend too much time on the template content, as it could be a simple sentence. Import it inside <code>App.vue</code>.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 4: create HomePage component »</p>



<h4>Base layout</h4>



<p><i class="fas fa-exclamation-circle" style="color: #d32f2f; margin-right: 0.5em"></i> While my original intent was using Vuetify to not spent unnecessary time styling component, Vuetify for Vue 3 is still under active development. Sorry! 😇</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="435" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/image-1024x435.png" alt="" class="wp-image-3378" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/09/image-1024x435.png 1024w, https://thomas-veillard.fr/wp-content/uploads/2021/09/image-300x128.png 300w, https://thomas-veillard.fr/wp-content/uploads/2021/09/image-768x327.png 768w, https://thomas-veillard.fr/wp-content/uploads/2021/09/image.png 1296w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>Basic possible visual at the end of the next exercise and its components tree.</figcaption></figure>



<p><strong>Tips</strong>: If you wish to use <a href="https://fontawesome.com/" target="_blank" rel="noreferrer noopener">font awesome</a> icons with Vue 3, <a href="https://stackoverflow.com/questions/66389974/using-font-awesome-in-vue-3" target="_blank" rel="noreferrer noopener">take a look at this thread</a>.</p>



<p class="exercice"><strong>Exercise 5</strong>: Let&rsquo;s begin with the root component, formally <code>App</code> (in <code>src/App.vue</code>). Replace its template with the following content and create the missing components. Add some content to the header (ex. fake home link, fake user name&#8230;) and legal credits to the footer. Eventually, polish the looks and feels with scoped CSS.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-6" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-comment">&lt;!-- template of file src/App.vue --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">base-header</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">home-page</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">base-footer</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-comment">&lt;!-- do not remove the &lt;script /&gt; markup --&gt;</span></code></div><small class="shcb-language" id="shcb-language-6"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 5: create BaseHeader and BaseFooter »</p>



<p class="question"><strong>Question 5</strong>: What is the difference between scoped and non-scoped CSS?</p>



<p class="exercice"><strong>Exercise 6</strong>: In order to keep the root component <code>App</code> as simple as possible, extract everything related to the layout into a <code>BaseLayout</code> component. Using the <a href="https://v3.vuejs.org/guide/component-slots.html#slot-content" target="_blank" rel="noreferrer noopener">slot API</a>,  allow <code>BaseLayout</code> to receive children (to be rendered between the header and the footer).</p>



<p><strong>Tips</strong>: If you integrated font awesome, try extracting most logic out of <code>App</code>. When it comes to configure third party dependencies, I generally work with ES-modules inside a <code>src/lib</code> folder. Example: <code>src/lib/fontAwesome.js</code>.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-7" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-comment">&lt;!-- template tag of src/App.vue --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">home-page</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-7"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 6: create BaseLayout that uses slot API »</p>



<h4>Reusable BaseButton</h4>



<p>For the need of the UI, let&rsquo;s create a <code>BaseButton</code> component. Basically, this is just a styled <code>&lt;button&gt;</code>. Its usage should be mostly the same (possibility to pass children, styles, classes, <code>role="button"</code> or <code>role="submit"</code>&#8230;).</p>



<p class="question"><strong>Question 6</strong>: How behaves non-prop attributes passed down to a component, when its template has a single root element? <strong>Tips</strong>: it is well documented by vue, but you can also try it youself by passing the <code>style</code> attribute with a straight visual effect.</p>



<p class="exercice"><strong>Exercise 7</strong>: Implement such a <code>BaseButton</code>, animated on hover and focus. Do not forget the disabled state. You may try these buttons on your <code>HomePage</code> for now.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="539" height="124" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button.gif" alt="" class="wp-image-3490"/></figure></div>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 7: create BaseButton with primary color »</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="850" height="166" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button-used-in-header.gif" alt="" class="wp-image-3804"/><figcaption>Tips: it makes sense to use them in the navigation in header.</figcaption></figure>



<p class="exercice"><strong>Exercise 8</strong>: Add the <code>color</code> prop to <code>BaseButton</code>. This prop accepts one of <code>'primary', 'warn' or 'danger'</code> values. It defaults to  <code>primary</code> and you should validate the given value matches the enum. Then, dynamically apply styles to the button based on that prop.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="331" height="219" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button-with-color.png" alt="" class="wp-image-3493" srcset="https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button-with-color.png 331w, https://thomas-veillard.fr/wp-content/uploads/2021/09/base-button-with-color-300x198.png 300w" sizes="(max-width: 331px) 100vw, 331px" /></figure></div>



<p><strong>Tips</strong>: in a first time, ensure you can pass the props from <code>PageHeader</code> template to the <code>BaseButton</code> component (ex. by temporary rendering the color name in the template). Then, use that value to apply some conditional styles (2 proposed solutions above). Remember the DRY principal (Don&rsquo;t Repeat Yourself) and do not duplicate code sections.</p>



<div class="wp-block-advgb-accordions advgb-accordion-wrapper">
<div class="wp-block-advgb-accordion-item advgb-accordion-item" style="margin-bottom:15px"><div class="advgb-accordion-header" style="background-color:#000;color:#eee;border-style:solid;border-width:1px;border-radius:2px"><span class="advgb-accordion-header-icon"><svg fill="#fff" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24"><path fill="none" d="M0,0h24v24H0V0z"></path><path d="M12,5.83L15.17,9l1.41-1.41L12,3L7.41,7.59L8.83,9L12,5.83z M12,18.17L8.83,15l-1.41,1.41L12,21l4.59-4.59L15.17,15 L12,18.17z"></path></svg></span><h4 class="advgb-accordion-header-title" style="color:inherit">Solution 1: using CSS classes (simpler)</h4></div><div class="advgb-accordion-body" style="border-style:solid !important;border-width:1px !important;border-color:undefined !important;border-top:none !important;border-radius:2px !important">
<p>You may split your scoped CSS in 2 parts: the styles common to all components, and specific classes for each color in the palette. So, the component&rsquo;s style could look like:</p>


<pre class="wp-block-code" aria-describedby="shcb-language-8" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">
<span class="hljs-selector-class">.button</span> {
  <span class="hljs-comment">/* css properties common to all buttons */</span>
}

<span class="hljs-selector-class">.button-primary</span> {
  <span class="hljs-comment">/* css properties specific to the primary color */</span>
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#42b983</span>;
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-8"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p>Finally, you just need to conditionally bind the CSS classes (<a href="https://v3.vuejs.org/guide/class-and-style.html" target="_blank" rel="noreferrer noopener">explained here</a>).</p>
</div></div>



<div class="wp-block-advgb-accordion-item advgb-accordion-item" style="margin-bottom:15px"><div class="advgb-accordion-header" style="background-color:#000;color:#eee;border-style:solid;border-width:1px;border-radius:2px"><span class="advgb-accordion-header-icon"><svg fill="#fff" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24"><path fill="none" d="M0,0h24v24H0V0z"></path><path d="M12,5.83L15.17,9l1.41-1.41L12,3L7.41,7.59L8.83,9L12,5.83z M12,18.17L8.83,15l-1.41,1.41L12,21l4.59-4.59L15.17,15 L12,18.17z"></path></svg></span><h4 class="advgb-accordion-header-title" style="color:inherit">Solution 2: using CSS variables &amp; computed properties</h4></div><div class="advgb-accordion-body" style="border-style:solid !important;border-width:1px !important;border-color:undefined !important;border-top:none !important;border-radius:2px !important">
<p>Declare in a single place the allowed values for the colour enum and its corresponding colours. On my side, I just declared the above object and always take it as a single source of truth in <code>BaseComponent</code>. In other words, this object contains the colour palette indexed by names I use as reference everywhere in the component.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-9" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><div><code class="hljs language-javascript"><span class="hljs-keyword">const</span> colorPalette = {
  <span class="hljs-attr">primary</span>: { <span class="hljs-attr">bg</span>: <span class="hljs-string">'#42b983'</span>, <span class="hljs-attr">hoverBg</span>: <span class="hljs-string">'#4cce93'</span>, <span class="hljs-attr">focusBorder</span>: <span class="hljs-string">'#47d696'</span> },
  <span class="hljs-attr">warn</span>: { <span class="hljs-attr">bg</span>: <span class="hljs-string">'#ff5722'</span>, <span class="hljs-attr">hoverBg</span>: <span class="hljs-string">'#ff7043'</span>, <span class="hljs-attr">focusBorder</span>: <span class="hljs-string">'#ff8a65'</span> },
  <span class="hljs-attr">danger</span>: { <span class="hljs-attr">bg</span>: <span class="hljs-string">'#e53935'</span>, <span class="hljs-attr">hoverBg</span>: <span class="hljs-string">'#ef5350'</span>, <span class="hljs-attr">focusBorder</span>: <span class="hljs-string">'#e57373'</span> },
}</code></div><small class="shcb-language" id="shcb-language-9"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">JavaScript</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">javascript</span><span class="shcb-language__paren">)</span></small></pre>


<p>Then, you need <a href="https://stackoverflow.com/questions/42872002/in-vue-js-component-how-to-use-props-in-css" target="_blank" rel="noreferrer noopener">a way to apply variables to your CSS</a>. In short, this is a conjugaison of <a href="https://v3.vuejs.org/guide/class-and-style.html" target="_blank" rel="noreferrer noopener">style binding</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties" target="_blank" rel="noreferrer noopener">CSS variables</a>, <a href="https://v3.vuejs.org/guide/computed.html" target="_blank" rel="noreferrer noopener">computed properties</a> and scoped styles.</p>
</div></div>
</div>



<p style="margin-top: -0.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 8: color palette and prop for BaseButton »</p>



<h4>Reusable AsyncButton</h4>



<p>Now, let&rsquo;s add <code>AsyncButton</code> built on top of <code>BaseButton</code>. It prevents the user from clicking multiple times on the button while a Promise is in progress. That Promise is returned by the parent&rsquo;s <code>onClick</code> listener.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="539" height="124" src="https://thomas-veillard.fr/wp-content/uploads/2021/09/async-button.gif" alt="" class="wp-image-3510"/></figure></div>



<p>Here you have its source code (if you did not install FontAwesome, just replace the <code>&lt;font-awesome-icon /&gt;</code> by a simple text, while preserving the <code>v-if</code> directive.</p>


<pre class="wp-block-code" aria-describedby="shcb-language-10" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><div><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">base-button</span>
    <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"isPending"</span>
    <span class="hljs-attr">:color</span>=<span class="hljs-string">"color"</span>
    @<span class="hljs-attr">click.stop.prevent</span>=<span class="hljs-string">"handleClick"</span>
  &gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">font-awesome-icon</span> 
      <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isPending"</span>
      <span class="hljs-attr">:icon</span>=<span class="hljs-string">"['fas', 'circle-notch']"</span>
      <span class="hljs-attr">pulse</span>
    /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">base-button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> BaseButton <span class="hljs-keyword">from</span> <span class="hljs-string">'./BaseButton.vue'</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-attr">name</span>: <span class="hljs-string">'AsyncButton'</span>,
  <span class="hljs-attr">components</span>: { BaseButton },
  <span class="hljs-attr">inheritAttrs</span>: <span class="hljs-literal">false</span>,

  <span class="hljs-attr">props</span>: {
    <span class="hljs-attr">color</span>: {
      <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,
      <span class="hljs-attr">default</span>: <span class="hljs-string">'primary'</span>
    }
  },

  data () {
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">isPending</span>: <span class="hljs-literal">false</span>
    }
  },

  <span class="hljs-attr">methods</span>: {
    handleClick () {
      <span class="hljs-keyword">const</span> originalOnClick = <span class="hljs-comment">/** @type {() =&gt; Promise&lt;void&gt;} */</span> (<span class="hljs-keyword">this</span>.$attrs.onClick)
      <span class="hljs-keyword">this</span>.isPending = <span class="hljs-literal">true</span>
      originalOnClick().finally(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> { <span class="hljs-keyword">this</span>.isPending = <span class="hljs-literal">false</span> })
    }
  }
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></div><small class="shcb-language" id="shcb-language-10"><span class="shcb-language__label">Langage du code :</span> <span class="shcb-language__name">HTML, XML</span> <span class="shcb-language__paren">(</span><span class="shcb-language__slug">xml</span><span class="shcb-language__paren">)</span></small></pre>


<p class="exercice"><strong>Exercise 9</strong>: Add a button to the <code>HomePage</code> that is disabled for 2 seconds each time it is clicked. According to the above code, this just means the <code>@click</code> event listener attached to the instance of <code>AsyncComponent</code> instance returns a Promise that waits for 2 seconds before resolving. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer noopener">You can create such a Promise using its constructor and a setTimeou</a>t. Also, please <a href="https://v3.vuejs.org/guide/events.html#method-event-handlers" target="_blank" rel="noreferrer noopener">write the event handler inside a dedicated method</a> since at is a bit complex.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 9: add AsyncButton »</p>



<p class="exercice"><strong>Exercise 10</strong>. Change the behaviour of the previous button, so its waiting time increases by one second each it is clicked. Because <code>AsyncButton</code> waits for any promise, whatever how long it takes to resolve, you do not need and you should not change it. Instead, keep trace of the number of clicks in the internal state (data) of the <code>HomePage</code> component (<a href="https://v3.vuejs.org/guide/events.html#listening-to-events" target="_blank" rel="noreferrer noopener">see the counter app example</a>) and use it while forging new promises.</p>



<p style="margin-top: -1.5em"><i class="fab fa-git-alt" style="color: #f4511e; margin-right: 0.5em"></i> Commit changes with message « Ex 10: slowing down the button on click »</p>



<p class="question"><strong>Question 7</strong>: Analyse how works the <code>AsyncButton</code>. How the child component is aware of the returned Promise by the parent onClick handler? When is executed the callback passed to <code>.finally()</code>? Why use <code>.finally()</code> instead of <code>.then()</code>? Etc.</p>



<p class="question"><strong>Question 8</strong>: Which bug is introduced if <code>inheritAttrs: false</code> is missing or set to <code>true</code> in <code>AsyncButton</code>? Why?</p>



<h4>To continue</h4>



<p>Next time, you will handle Oauth2 authentication against the Microsoft Graph API, fetch the user identity, use it at various locations of the UI and eventually implement some routes. Maybe improved state management will also be useful&#8230;</p>



<p class="has-text-align-center">***</p>



<h4>Appendix: about static type checking</h4>



<p>In the previous tutorial, I introduced you static type checking with straightforward JavaScript and JSDoc. Badly, the <code>tsc</code> command does not handle <code>.vue</code> files. Despite the fact that it is partially working,  it does not worth the vue&rsquo;s typescript integration.</p>



<p>A more robust approach would be moving the whole project to <code>typescript</code>. With the Vue CLI, it is just running <code>vue add typescript</code> at the beginning of the journey. Be sure every change is committed, since this command override some files without warning.</p>



<p>Migrating to TypeScript at the beginning of the tutorial is not a big deal. Most types are already built in the Vue module. Eventually, the whole project is checked on serve and on build.</p>



<p>Since TypeScript may save your time, catch bugs and give you bonus grade to the project, why not giving it a try?</p>
<p>L’article <a rel="nofollow" href="https://thomas-veillard.fr/front-end-web-development/vue/01-vue-practical-activity-part-n1/">01. Vue: practical activity, part n°1</a> est apparu en premier sur <a rel="nofollow" href="https://thomas-veillard.fr/">Thomas VEILLARD</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
